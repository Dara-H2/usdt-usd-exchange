"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isAddress = exports.fromPrivateKey = exports.toHex = exports.fromHex = exports.TRON_BIP39_PATH_INDEX_0 = exports.TRON_BIP39_PATH_PREFIX = exports.ADDRESS_PREFIX_REGEX = exports.ADDRESS_PREFIX_BYTE = exports.ADDRESS_PREFIX = exports.ADDRESS_SIZE = void 0;
const code_js_1 = require("./code.js");
const crypto_js_1 = require("./crypto.js");
const validations_js_1 = require("./validations.js");
exports.ADDRESS_SIZE = 34;
exports.ADDRESS_PREFIX = '41';
exports.ADDRESS_PREFIX_BYTE = 0x41;
exports.ADDRESS_PREFIX_REGEX = /^(41)/;
exports.TRON_BIP39_PATH_PREFIX = "m/44'/195'";
exports.TRON_BIP39_PATH_INDEX_0 = exports.TRON_BIP39_PATH_PREFIX + "/0'/0/0";
function fromHex(address) {
    if (!(0, validations_js_1.isHex)(address))
        return address;
    return (0, crypto_js_1.getBase58CheckAddress)((0, code_js_1.hexStr2byteArray)(address.replace(/^0x/, exports.ADDRESS_PREFIX)));
}
exports.fromHex = fromHex;
function toHex(address) {
    if ((0, validations_js_1.isHex)(address))
        return address.toLowerCase().replace(/^0x/, exports.ADDRESS_PREFIX);
    return (0, code_js_1.byteArray2hexStr)((0, crypto_js_1.decodeBase58Address)(address)).toLowerCase();
}
exports.toHex = toHex;
function fromPrivateKey(privateKey, strict = false) {
    try {
        return (0, crypto_js_1.pkToAddress)(privateKey, strict);
    }
    catch {
        return false;
    }
}
exports.fromPrivateKey = fromPrivateKey;
function isAddress(address) {
    if (!address || !(0, validations_js_1.isString)(address))
        return false;
    // Convert HEX to Base58
    if (address.length === 42) {
        try {
            // it throws an error if the address starts with 0x
            return isAddress((0, crypto_js_1.getBase58CheckAddress)((0, code_js_1.hexStr2byteArray)(address)));
        }
        catch (err) {
            return false;
        }
    }
    try {
        return (0, crypto_js_1.isAddressValid)(address);
    }
    catch (err) {
        return false;
    }
}
exports.isAddress = isAddress;
//# sourceMappingURL=address.js.map