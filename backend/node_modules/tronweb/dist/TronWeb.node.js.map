{"version":3,"file":"TronWeb.node.js","mappings":"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","sources":["webpack://tronweb/./src/lib/TransactionBuilder/TransactionBuilder.ts","webpack://tronweb/./src/lib/TransactionBuilder/helper.ts","webpack://tronweb/./src/lib/contract/index.ts","webpack://tronweb/./src/lib/contract/method.ts","webpack://tronweb/./src/lib/event.ts","webpack://tronweb/./src/lib/plugin.ts","webpack://tronweb/./src/lib/providers/HttpProvider.ts","webpack://tronweb/./src/lib/providers/index.ts","webpack://tronweb/./src/lib/trx.ts","webpack://tronweb/./src/paramValidator/index.ts","webpack://tronweb/./src/tronweb.ts","webpack://tronweb/./src/types/Contract.ts","webpack://tronweb/./src/utils/abi.ts","webpack://tronweb/./src/utils/accounts.ts","webpack://tronweb/./src/utils/address.ts","webpack://tronweb/./src/utils/base58.ts","webpack://tronweb/./src/utils/base64.ts","webpack://tronweb/./src/utils/bytes.ts","webpack://tronweb/./src/utils/code.ts","webpack://tronweb/./src/utils/crypto.ts","webpack://tronweb/./src/utils/ethersUtils.ts","webpack://tronweb/./src/utils/fragments.ts","webpack://tronweb/./src/utils/index.ts","webpack://tronweb/./src/utils/interface.ts","webpack://tronweb/./src/utils/message.ts","webpack://tronweb/./src/utils/transaction.ts","webpack://tronweb/./src/utils/typedData.ts","webpack://tronweb/./src/utils/validations.ts","webpack://tronweb/external commonjs \"@ethersproject/abi\"","webpack://tronweb/external commonjs \"@tronweb3/google-protobuf\"","webpack://tronweb/external commonjs \"@tronweb3/google-protobuf/google/protobuf/any_pb.js\"","webpack://tronweb/external commonjs \"axios\"","webpack://tronweb/external commonjs \"bignumber.js\"","webpack://tronweb/external commonjs \"ethereum-cryptography/secp256k1\"","webpack://tronweb/external commonjs \"ethers\"","webpack://tronweb/external commonjs \"eventemitter3\"","webpack://tronweb/external commonjs \"semver\"","webpack://tronweb/external commonjs \"tslib\"","webpack://tronweb/external commonjs \"validator\"","webpack://tronweb/./src/protocol/core/Tron_pb.cjs","webpack://tronweb/./src/protocol/core/contract/account_contract_pb.cjs","webpack://tronweb/./src/protocol/core/contract/asset_issue_contract_pb.cjs","webpack://tronweb/./src/protocol/core/contract/balance_contract_pb.cjs","webpack://tronweb/./src/protocol/core/contract/common_pb.cjs","webpack://tronweb/./src/protocol/core/contract/exchange_contract_pb.cjs","webpack://tronweb/./src/protocol/core/contract/proposal_contract_pb.cjs","webpack://tronweb/./src/protocol/core/contract/smart_contract_pb.cjs","webpack://tronweb/./src/protocol/core/contract/storage_contract_pb.cjs","webpack://tronweb/./src/protocol/core/contract/witness_contract_pb.cjs","webpack://tronweb/webpack/bootstrap","webpack://tronweb/./src/index.ts"],"sourcesContent":["import { TronWeb } from '../../tronweb.js';\nimport { AbiCoder, keccak256 } from '../../utils/ethersUtils.js';\nimport { ADDRESS_PREFIX_REGEX, toHex } from '../../utils/address.js';\nimport { encodeParamsV2ByABI } from '../../utils/abi.js';\nimport { CreateSmartContractTransaction, SignedTransaction, Transaction, TransactionWrapper } from '../../types/Transaction.js';\nimport { Validator } from '../../paramValidator/index.js';\nimport { GetSignWeightResponse } from '../../types/APIResponse.js';\nimport { isArray, isInteger, isNotNullOrUndefined, isObject, isString } from '../../utils/validations.js';\nimport {\n    AccountPermissionUpdateContract,\n    AssetIssueContract,\n    ContractType,\n    CreateSmartContract,\n    DelegateResourceContract,\n    DeployConstantContract,\n    FreezeBalanceContract,\n    FreezeBalanceV2Contract,\n    Permission,\n    TriggerSmartContract,\n    UnDelegateResourceContract,\n    UnfreezeBalanceV2Contract,\n    UpdateAssetContract,\n} from '../../types/Contract.js';\nimport {\n    createTransaction,\n    deepCopyJson,\n    fromUtf8,\n    genContractAddress,\n    resultManager,\n    resultManagerTriggerSmartContract,\n    getTransactionOptions,\n} from './helper.js';\nimport {\n    AlterTransactionOptions,\n    CreateSmartContractOptions,\n    CreateTokenOptions,\n    DeployConstantContractOptions,\n    TriggerConstantContractOptions,\n    TransactionCommonOptions,\n    Resource,\n    ContractFunctionParameter,\n    TriggerSmartContractOptions,\n    TxLocal,\n    UpdateTokenOptions,\n    VoteInfo,\n} from '../../types/TransactionBuilder.js';\nimport { Address } from '../../types/Trx.js';\nimport { ConstructorFragment, ContractAbiInterface, FunctionFragment } from '../../types/ABI.js';\n\nexport class TransactionBuilder {\n    private tronWeb: TronWeb;\n    private validator: Validator;\n    constructor(tronWeb?: TronWeb) {\n        if (!tronWeb || !(tronWeb instanceof TronWeb)) {\n            throw new Error('Expected instance of TronWeb');\n        }\n        this.tronWeb = tronWeb;\n        this.validator = new Validator();\n    }\n\n    async sendTrx(\n        to: string,\n        amount = 0,\n        from: string = this.tronWeb.defaultAddress.hex as string,\n        options: TransactionCommonOptions = {}\n    ): Promise<Transaction> {\n        // accept amounts passed as strings\n        amount = parseInt(amount);\n\n        this.validator.notValid([\n            {\n                name: 'recipient',\n                type: 'address',\n                value: to,\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: from as string,\n            },\n            {\n                names: ['recipient', 'origin'],\n                type: 'notEqual',\n                msg: 'Cannot transfer TRX to the same account',\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount,\n            },\n        ]);\n\n        const data = {\n            to_address: toHex(to),\n            owner_address: toHex(from as string),\n            amount: amount,\n        };\n\n        const transactionOptions = getTransactionOptions(options);\n        return createTransaction(this.tronWeb, ContractType.TransferContract, data, options?.permissionId, transactionOptions);\n    }\n\n    async sendToken(\n        to: string,\n        amount = 0,\n        tokenId: string,\n        from: string = this.tronWeb.defaultAddress.hex as string,\n        options: TransactionCommonOptions = {}\n    ): Promise<Transaction> {\n        amount = parseInt(amount);\n        this.validator.notValid([\n            {\n                name: 'recipient',\n                type: 'address',\n                value: to,\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: from as string,\n            },\n            {\n                names: ['recipient', 'origin'],\n                type: 'notEqual',\n                msg: 'Cannot transfer tokens to the same account',\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount,\n            },\n            {\n                name: 'token ID',\n                type: 'tokenId',\n                value: tokenId,\n            },\n        ]);\n\n        const data = {\n            to_address: toHex(to),\n            owner_address: toHex(from as string),\n            asset_name: fromUtf8(tokenId as string),\n            amount,\n        };\n\n        const transactionOptions = getTransactionOptions(options);\n        return createTransaction(this.tronWeb, ContractType.TransferAssetContract, data, options?.permissionId, transactionOptions);\n    }\n\n    async purchaseToken(\n        issuerAddress: string,\n        tokenId: string,\n        amount = 0,\n        buyer: string = this.tronWeb.defaultAddress.hex as string,\n        options: TransactionCommonOptions = {}\n    ) {\n        this.validator.notValid([\n            {\n                name: 'buyer',\n                type: 'address',\n                value: buyer as string,\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress,\n            },\n            {\n                names: ['buyer', 'issuer'],\n                type: 'notEqual',\n                msg: 'Cannot purchase tokens from same account',\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount,\n            },\n            {\n                name: 'token ID',\n                type: 'tokenId',\n                value: tokenId,\n            },\n        ]);\n\n        const data = {\n            to_address: toHex(issuerAddress),\n            owner_address: toHex(buyer as string),\n            asset_name: fromUtf8(tokenId as string),\n            amount: parseInt(amount),\n        };\n\n        const transactionOptions = getTransactionOptions(options);\n        return createTransaction(this.tronWeb, ContractType.ParticipateAssetIssueContract, data, options?.permissionId, transactionOptions);\n    }\n\n    async freezeBalance(\n        amount = 0,\n        duration = 3,\n        resource: Resource = 'BANDWIDTH',\n        ownerAddress: string = this.tronWeb.defaultAddress.hex as string,\n        receiverAddress?: string,\n        options: TransactionCommonOptions = {}\n    ) {\n        this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: ownerAddress as string,\n            },\n            {\n                name: 'receiver',\n                type: 'address',\n                value: receiverAddress as string,\n                optional: true,\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount,\n            },\n            {\n                name: 'duration',\n                type: 'integer',\n                gte: 3,\n                value: duration,\n            },\n            {\n                name: 'resource',\n                type: 'resource',\n                value: resource,\n                msg: 'Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"',\n            },\n        ]);\n        const data: FreezeBalanceContract = {\n            owner_address: toHex(ownerAddress as string),\n            frozen_balance: parseInt(amount),\n            frozen_duration: parseInt(String(duration)),\n        };\n        if (resource !== 'BANDWIDTH') {\n            data.resource = resource as Resource;\n        }\n\n        if (isNotNullOrUndefined(receiverAddress) && toHex(receiverAddress as string) !== toHex(ownerAddress as string)) {\n            data.receiver_address = toHex(receiverAddress as string);\n        }\n\n        const transactionOptions = getTransactionOptions(options);\n        return createTransaction(this.tronWeb, ContractType.FreezeBalanceContract, data, options?.permissionId, transactionOptions);\n    }\n\n    async unfreezeBalance(\n        resource: Resource = 'BANDWIDTH',\n        address: string = this.tronWeb.defaultAddress.hex as string,\n        receiverAddress?: string,\n        options: TransactionCommonOptions = {}\n    ) {\n        this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address as string,\n            },\n            {\n                name: 'receiver',\n                type: 'address',\n                value: receiverAddress as string,\n                optional: true,\n            },\n            {\n                name: 'resource',\n                type: 'resource',\n                value: resource,\n                msg: 'Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"',\n            },\n        ]);\n        const data: { owner_address: string; resource?: Resource; receiver_address?: string } = {\n            owner_address: toHex(address as string),\n        };\n        if (resource !== 'BANDWIDTH') {\n            data.resource = resource as Resource;\n        }\n\n        if (isNotNullOrUndefined(receiverAddress) && toHex(receiverAddress as string) !== toHex(address as string)) {\n            data.receiver_address = toHex(receiverAddress as string);\n        }\n\n        const transactionOptions = getTransactionOptions(options);\n        return createTransaction(this.tronWeb, ContractType.UnfreezeBalanceContract, data, options?.permissionId, transactionOptions);\n    }\n\n    async freezeBalanceV2(\n        amount = 0,\n        resource: Resource = 'BANDWIDTH',\n        address: string = this.tronWeb.defaultAddress.hex as string,\n        options: TransactionCommonOptions = {}\n    ) {\n        this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address as string,\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount,\n            },\n            {\n                name: 'resource',\n                type: 'resource',\n                value: resource as string,\n                msg: 'Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"',\n            },\n        ]);\n        const data: FreezeBalanceV2Contract = {\n            owner_address: toHex(address as string),\n            frozen_balance: parseInt(amount),\n        };\n        if (resource !== 'BANDWIDTH') {\n            data.resource = resource as Resource;\n        }\n\n        const transactionOptions = getTransactionOptions(options);\n        return createTransaction(this.tronWeb, ContractType.FreezeBalanceV2Contract, data, options?.permissionId, transactionOptions);\n    }\n\n    async unfreezeBalanceV2(\n        amount = 0,\n        resource: Resource = 'BANDWIDTH',\n        address: string = this.tronWeb.defaultAddress.hex as string,\n        options: TransactionCommonOptions = {}\n    ) {\n        this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address as string,\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount,\n            },\n            {\n                name: 'resource',\n                type: 'resource',\n                value: resource as string,\n                msg: 'Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"',\n            },\n        ]);\n        const data: UnfreezeBalanceV2Contract = {\n            owner_address: toHex(address as string),\n            unfreeze_balance: parseInt(amount),\n        };\n        if (resource !== 'BANDWIDTH') {\n            data.resource = resource as Resource;\n        }\n\n        const transactionOptions = getTransactionOptions(options);\n        return createTransaction(this.tronWeb, ContractType.UnfreezeBalanceV2Contract, data, options?.permissionId, transactionOptions);\n    }\n\n    async cancelUnfreezeBalanceV2(address: string = this.tronWeb.defaultAddress.hex as string, options: TransactionCommonOptions = {}) {\n        this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address as string,\n            },\n        ]);\n        const data = {\n            owner_address: toHex(address as string),\n        };\n\n        const transactionOptions = getTransactionOptions(options);\n        return createTransaction(this.tronWeb, ContractType.CancelAllUnfreezeV2Contract, data, options?.permissionId, transactionOptions);\n    }\n\n    async delegateResource(\n        amount = 0,\n        receiverAddress: string,\n        resource: Resource = 'BANDWIDTH',\n        address: string = this.tronWeb.defaultAddress.hex as string,\n        lock = false,\n        lockPeriod?: number,\n        options: TransactionCommonOptions = {}\n    ) {\n        this.validator.notValid([\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount,\n            },\n            {\n                name: 'resource',\n                type: 'resource',\n                value: resource as string,\n                msg: 'Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"',\n            },\n            {\n                name: 'receiver',\n                type: 'address',\n                value: receiverAddress,\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: address as string,\n            },\n            {\n                name: 'lock',\n                type: 'boolean',\n                value: lock as boolean,\n            },\n            {\n                name: 'lock period',\n                type: 'integer',\n                gte: 0,\n                value: lockPeriod as number,\n                optional: true,\n            },\n        ]);\n        if (toHex(receiverAddress) === toHex(address as string)) {\n            throw new Error('Receiver address must not be the same as owner address');\n        }\n\n        const data: DelegateResourceContract = {\n            owner_address: toHex(address as string),\n            receiver_address: toHex(receiverAddress),\n            balance: parseInt(amount),\n        };\n        if (resource !== 'BANDWIDTH') {\n            data.resource = resource as Resource;\n        }\n        if (lock) {\n            data.lock = lock as boolean;\n            if (isNotNullOrUndefined(lockPeriod)) {\n                data.lock_period = lockPeriod as number;\n            }\n        }\n\n        const transactionOptions = getTransactionOptions(options);\n        return createTransaction(this.tronWeb, ContractType.DelegateResourceContract, data, options?.permissionId, transactionOptions);\n    }\n\n    async undelegateResource(\n        amount = 0,\n        receiverAddress: string,\n        resource: Resource = 'BANDWIDTH',\n        address: string = this.tronWeb.defaultAddress.hex as string,\n        options: TransactionCommonOptions = {}\n    ) {\n        this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address as string,\n            },\n            {\n                name: 'receiver',\n                type: 'address',\n                value: receiverAddress,\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount,\n            },\n            {\n                name: 'resource',\n                type: 'resource',\n                value: resource as string,\n                msg: 'Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"',\n            },\n        ]);\n\n        if (toHex(receiverAddress) === toHex(address as string)) {\n            throw new Error('Receiver address must not be the same as owner address');\n        }\n\n        const data: UnDelegateResourceContract = {\n            owner_address: toHex(address as string),\n            receiver_address: toHex(receiverAddress),\n            balance: parseInt(amount),\n        };\n        if (resource !== 'BANDWIDTH') {\n            data.resource = resource as Resource;\n        }\n\n        const transactionOptions = getTransactionOptions(options);\n        return createTransaction(this.tronWeb, ContractType.UnDelegateResourceContract, data, options?.permissionId, transactionOptions);\n    }\n\n    async withdrawExpireUnfreeze(address: string = this.tronWeb.defaultAddress.hex as string, options: TransactionCommonOptions = {}) {\n        this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address,\n            },\n        ]);\n\n        const data = {\n            owner_address: toHex(address),\n        };\n\n        const transactionOptions = getTransactionOptions(options);\n        return createTransaction(this.tronWeb, ContractType.WithdrawExpireUnfreezeContract, data, options?.permissionId, transactionOptions);\n    }\n\n    async withdrawBlockRewards(address: string = this.tronWeb.defaultAddress.hex as string, options: TransactionCommonOptions = {}) {\n        this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address as string,\n            },\n        ]);\n\n        const data = {\n            owner_address: toHex(address as string),\n        };\n\n        const transactionOptions = getTransactionOptions(options);\n        return createTransaction(this.tronWeb, ContractType.WithdrawBalanceContract, data, options?.permissionId, transactionOptions);\n    }\n\n    async applyForSR(address: string = this.tronWeb.defaultAddress.hex as string, url = '', options: TransactionCommonOptions = {}) {\n        this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address,\n            },\n            {\n                name: 'url',\n                type: 'url',\n                value: url as string,\n                msg: 'Invalid url provided',\n            },\n            {\n                name: 'url',\n                type: 'string',\n                value: url as string,\n                lte: 256,\n                msg: 'Invalid url provided',\n            },\n        ]);\n\n        const data = {\n            owner_address: toHex(address as string),\n            url: fromUtf8(url as string),\n        };\n\n        const transactionOptions = getTransactionOptions(options);\n        return createTransaction(this.tronWeb, ContractType.WitnessCreateContract, data, options?.permissionId, transactionOptions);\n    }\n\n    async vote(\n        votes: VoteInfo = {},\n        voterAddress: string = this.tronWeb.defaultAddress.hex as string,\n        options: TransactionCommonOptions = {}\n    ) {\n        this.validator.notValid([\n            {\n                name: 'voter',\n                type: 'address',\n                value: voterAddress as string,\n            },\n            {\n                name: 'votes',\n                type: 'notEmptyObject',\n                value: votes as VoteInfo,\n            },\n        ]);\n\n        const entries = Object.entries(votes);\n        for (const [srAddress, voteCount] of entries) {\n            this.validator.notValid([\n                {\n                    name: 'SR',\n                    type: 'address',\n                    value: srAddress,\n                },\n                {\n                    name: 'vote count',\n                    type: 'integer',\n                    gt: 0,\n                    value: voteCount,\n                    msg: 'Invalid vote count provided for SR: ' + srAddress,\n                },\n            ]);\n        }\n        const voteList = entries.map(([srAddress, voteCount]) => {\n            return {\n                vote_address: toHex(srAddress),\n                vote_count: parseInt(voteCount),\n            };\n        });\n\n        const data = {\n            owner_address: toHex(voterAddress as string),\n            votes: voteList,\n        };\n\n        const transactionOptions = getTransactionOptions(options);\n        return createTransaction(this.tronWeb, ContractType.VoteWitnessContract, data, options?.permissionId, transactionOptions);\n    }\n\n    async createSmartContract(\n        options: CreateSmartContractOptions = {} as CreateSmartContractOptions,\n        issuerAddress: string = this.tronWeb.defaultAddress.hex as string\n    ): Promise<CreateSmartContractTransaction> {\n        const feeLimit = options.feeLimit || this.tronWeb.feeLimit;\n        let userFeePercentage = options.userFeePercentage;\n        if (typeof userFeePercentage !== 'number' && !userFeePercentage) {\n            userFeePercentage = 100;\n        }\n        const originEnergyLimit = options.originEnergyLimit || 10_000_000;\n        const callValue = options.callValue || 0;\n        const tokenValue = options.tokenValue;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        const tokenId = options.tokenId || options.token_id;\n\n        let { abi, parameters = [] } = options;\n        const { bytecode = false, name = '' } = options;\n        if (abi && isString(abi)) {\n            try {\n                abi = JSON.parse(abi);\n            } catch {\n                throw new Error('Invalid options.abi provided');\n            }\n        }\n\n        const newAbi = abi as { entrys: ContractAbiInterface } | ContractAbiInterface;\n        let entries: ContractAbiInterface | null = newAbi as ContractAbiInterface;\n        if ((newAbi as { entrys: ContractAbiInterface }).entrys) {\n            entries = (newAbi as { entrys: ContractAbiInterface }).entrys;\n        }\n\n        if (!isArray(entries)) throw new Error('Invalid options.abi provided');\n\n        const payable = entries.some((func) => {\n            return func.type === 'constructor' && 'payable' === (func as ConstructorFragment).stateMutability.toLowerCase();\n        });\n\n        this.validator.notValid([\n            {\n                name: 'bytecode',\n                type: 'hex',\n                value: bytecode,\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n            },\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0,\n            },\n            {\n                name: 'userFeePercentage',\n                type: 'integer',\n                value: userFeePercentage,\n                gte: 0,\n                lte: 100,\n            },\n            {\n                name: 'originEnergyLimit',\n                type: 'integer',\n                value: originEnergyLimit,\n                gte: 0,\n                lte: 10_000_000,\n            },\n            {\n                name: 'parameters',\n                type: 'array',\n                value: parameters,\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress,\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0,\n                optional: true,\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0,\n                optional: true,\n            },\n        ]);\n\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        if (!payable && (callValue > 0 || tokenValue > 0))\n            throw new Error('When contract is not payable, options.callValue and options.tokenValue must be 0');\n\n        const { rawParameter, funcABIV2, parametersV2 } = options as any;\n        if (rawParameter && isString(rawParameter)) {\n            parameters = rawParameter.replace(/^(0x)/, '');\n        } else if (funcABIV2) {\n            parameters = encodeParamsV2ByABI(funcABIV2, parametersV2).replace(/^(0x)/, '');\n        } else {\n            let constructorParams: any = entries.find((it: any) => {\n                return it.type === 'constructor';\n            });\n\n            if (typeof constructorParams !== 'undefined' && constructorParams) {\n                const abiCoder = new AbiCoder();\n                const types = [];\n                const values = [];\n                constructorParams = constructorParams.inputs;\n\n                if (parameters.length != constructorParams.length)\n                    throw new Error(`constructor needs ${constructorParams.length} but ${parameters.length} provided`);\n\n                for (let i = 0; i < parameters.length; i++) {\n                    let type = constructorParams[i].type;\n                    let value: any = parameters[i];\n\n                    if (!type || !isString(type) || !type.length) throw new Error('Invalid parameter type provided: ' + type);\n\n                    const replaceAddressPrefix = (value: unknown): any => {\n                        if (isArray(value)) {\n                            return value.map((v) => replaceAddressPrefix(v));\n                        }\n                        return toHex(value as string).replace(ADDRESS_PREFIX_REGEX, '0x');\n                    };\n                    if (type === 'address') value = replaceAddressPrefix(value);\n                    else if (type.match(/^([^\\x5b]*)(\\x5b|$)/)?.[0] === 'address[') value = replaceAddressPrefix(value);\n                    else if (/trcToken/.test(type)) {\n                        type = type.replace(/trcToken/, 'uint256');\n                    }\n\n                    types.push(type);\n                    values.push(value);\n                }\n\n                try {\n                    parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n                } catch (ex) {\n                    throw new Error(ex as string);\n                }\n            } else {\n                parameters = '';\n            }\n        }\n\n        const args: any = {\n            owner_address: toHex(issuerAddress),\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            consume_user_resource_percent: userFeePercentage,\n            origin_energy_limit: originEnergyLimit,\n            abi: JSON.stringify(abi),\n            bytecode,\n            parameter: parameters,\n            name,\n        };\n\n        // tokenValue and tokenId can cause errors if provided when the trx10 proposal has not been approved yet. So we set them only if they are passed to the method.\n        if (isNotNullOrUndefined(tokenValue)) {\n            args.call_token_value = parseInt(tokenValue as number);\n        }\n        if (isNotNullOrUndefined(tokenId)) {\n            args.token_id = parseInt(tokenId);\n        }\n\n        const contract: CreateSmartContract = {} as CreateSmartContract;\n        contract.owner_address = args.owner_address;\n        if (isNotNullOrUndefined(args.call_token_value)) {\n            contract.call_token_value = args.call_token_value;\n        }\n        if (isNotNullOrUndefined(args.token_id)) {\n            contract.token_id = args.token_id;\n        }\n        const new_contract = (contract.new_contract = {} as CreateSmartContract['new_contract']);\n\n        if (args.abi) {\n            new_contract.abi = {\n                entrys: JSON.parse(args.abi),\n            };\n        } else {\n            new_contract.abi = {};\n        }\n        if (args.call_value) {\n            new_contract.call_value = args.call_value;\n        }\n        new_contract.consume_user_resource_percent = args.consume_user_resource_percent;\n        new_contract.origin_energy_limit = args.origin_energy_limit;\n        new_contract.origin_address = args.origin_address ?? args.owner_address;\n        if (args.bytecode + args.parameter) {\n            new_contract.bytecode = (args.bytecode + args.parameter).replace(/^0x/, '');\n        }\n        if (isNotNullOrUndefined(args.name)) {\n            new_contract.name = args.name;\n        }\n        const transactionOptions = getTransactionOptions(options);\n        const tx = (await createTransaction(this.tronWeb, ContractType.CreateSmartContract, contract, options?.permissionId, {\n            ...transactionOptions,\n            fee_limit: args.fee_limit,\n        })) as CreateSmartContractTransaction;\n        tx.contract_address = genContractAddress(args.owner_address, tx.txID);\n        return tx;\n    }\n\n    async triggerSmartContract(\n        contractAddress: string,\n        functionSelector: string,\n        options?: TriggerSmartContractOptions,\n        parameters?: ContractFunctionParameter[],\n        issuerAddress?: string\n    ): Promise<TransactionWrapper> {\n        const params: Parameters<typeof this._triggerSmartContractLocal> = [\n            contractAddress,\n            functionSelector,\n            options,\n            parameters,\n            issuerAddress,\n        ];\n        if (typeof params[2] !== 'object') {\n            params[2] = {\n                feeLimit: params[2],\n                callValue: params[3] as unknown as number,\n            };\n            params.splice(3, 1);\n        }\n        if (params[2]?.txLocal) {\n            return this._triggerSmartContractLocal(...params);\n        }\n        return this._triggerSmartContract(...params);\n    }\n\n    async triggerConstantContract(\n        contractAddress: string,\n        functionSelector: string,\n        options: TriggerConstantContractOptions = {},\n        parameters: ContractFunctionParameter[] = [],\n        issuerAddress: string = this.tronWeb.defaultAddress.hex as string\n    ): Promise<TransactionWrapper> {\n        options._isConstant = true;\n        return this._triggerSmartContract(contractAddress, functionSelector, options, parameters, issuerAddress);\n    }\n\n    async triggerConfirmedConstantContract(\n        contractAddress: string,\n        functionSelector: string,\n        options: TriggerConstantContractOptions = {},\n        parameters: ContractFunctionParameter[] = [],\n        issuerAddress: string = this.tronWeb.defaultAddress.hex as string\n    ): Promise<TransactionWrapper> {\n        options._isConstant = true;\n        options.confirmed = true;\n        return this._triggerSmartContract(contractAddress, functionSelector, options, parameters, issuerAddress);\n    }\n\n    async estimateEnergy(\n        contractAddress: string,\n        functionSelector: string,\n        options: TriggerConstantContractOptions = {},\n        parameters: ContractFunctionParameter[] = [],\n        issuerAddress: string = this.tronWeb.defaultAddress.hex as string\n    ): Promise<{ result: { result: boolean }; energy_required: number }> {\n        options.estimateEnergy = true;\n        const result = await this._triggerSmartContract(contractAddress, functionSelector, options, parameters, issuerAddress);\n        return result as { result: { result: boolean }; energy_required: number };\n    }\n\n    async deployConstantContract(options: DeployConstantContractOptions = { input: '', ownerAddress: '' }) {\n        const { input, ownerAddress, tokenId, tokenValue, callValue = 0 } = options;\n\n        this.validator.notValid([\n            {\n                name: 'input',\n                type: 'not-empty-string',\n                value: input,\n            },\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0,\n            },\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress,\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0,\n                optional: true,\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0,\n                optional: true,\n            },\n        ]);\n\n        const args: DeployConstantContract = {\n            data: input,\n            owner_address: toHex(ownerAddress),\n            call_value: callValue,\n        };\n\n        if (tokenId) {\n            args.token_id = tokenId;\n        }\n        if (tokenValue) {\n            args.call_token_value = tokenValue;\n        }\n\n        const pathInfo = `wallet${options.confirmed ? 'solidity' : ''}/estimateenergy`;\n        const transaction: TransactionWrapper = await this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(\n            pathInfo,\n            args,\n            'post'\n        );\n        if (transaction.Error) throw new Error(transaction.Error);\n\n        if (transaction.result && transaction.result.message) {\n            throw new Error(this.tronWeb.toUtf8(transaction.result.message));\n        }\n        return transaction as { result: { result: boolean }; energy_required: number };\n    }\n\n    _getTriggerSmartContractArgs(\n        contractAddress: string,\n        functionSelector: string,\n        options: TriggerConstantContractOptions,\n        parameters: ContractFunctionParameter[],\n        issuerAddress: string,\n        tokenValue?: number,\n        tokenId?: string,\n        callValue?: number,\n        feeLimit?: number\n    ) {\n        const args: TriggerSmartContract = {\n            contract_address: toHex(contractAddress),\n            owner_address: toHex(issuerAddress),\n        };\n\n        if (functionSelector && isString(functionSelector)) {\n            functionSelector = functionSelector.replace(/\\s*/g, '');\n            let parameterStr;\n            if (parameters.length) {\n                const abiCoder = new AbiCoder();\n                let types = [];\n                const values = [];\n\n                for (let i = 0; i < parameters.length; i++) {\n                    let { value } = parameters[i];\n                    const { type } = parameters[i];\n\n                    if (!type || !isString(type) || !type.length) throw new Error('Invalid parameter type provided: ' + type);\n\n                    const replaceAddressPrefix = (value: unknown): any => {\n                        if (isArray(value)) {\n                            return value.map((v) => replaceAddressPrefix(v));\n                        }\n                        return toHex(value as string).replace(ADDRESS_PREFIX_REGEX, '0x');\n                    };\n                    if (type === 'address') value = replaceAddressPrefix(value);\n                    else if (type.match(/^([^\\x5b]*)(\\x5b|$)/)?.[0] === 'address[') value = replaceAddressPrefix(value);\n\n                    types.push(type);\n                    values.push(value);\n                }\n\n                try {\n                    // workaround for unsupported trcToken type\n                    types = types.map((type) => {\n                        if (/trcToken/.test(type)) {\n                            type = type.replace(/trcToken/, 'uint256');\n                        }\n                        return type;\n                    });\n\n                    parameterStr = abiCoder.encode(types, values).replace(/^(0x)/, '');\n                } catch (ex) {\n                    throw new Error(ex as string);\n                }\n            } else parameterStr = '';\n\n            // work for abiv2 if passed the function abi in options\n            if (options.funcABIV2) {\n                parameterStr = encodeParamsV2ByABI(\n                    options.funcABIV2 as FunctionFragment,\n                    options.parametersV2 as unknown[]\n                ).replace(/^(0x)/, '');\n            }\n\n            if (options.shieldedParameter && isString(options.shieldedParameter)) {\n                parameterStr = options.shieldedParameter.replace(/^(0x)/, '');\n            }\n\n            if (options.rawParameter && isString(options.rawParameter)) {\n                parameterStr = options.rawParameter.replace(/^(0x)/, '');\n            }\n\n            args.function_selector = functionSelector;\n            args.parameter = parameterStr;\n        } else if (options.input) {\n            args.data = options.input;\n        }\n\n        args.call_value = parseInt(callValue as number);\n        if (isNotNullOrUndefined(tokenValue)) args.call_token_value = parseInt(tokenValue as number);\n        if (isNotNullOrUndefined(tokenId)) args.token_id = parseInt(tokenId as string);\n\n        if (!(options._isConstant || options.estimateEnergy)) {\n            args.fee_limit = parseInt(feeLimit as number);\n        }\n\n        if (options.permissionId) {\n            args.Permission_id = options.permissionId;\n        }\n\n        return args;\n    }\n\n    async _triggerSmartContractLocal(\n        contractAddress: string,\n        functionSelector: string,\n        options: TriggerConstantContractOptions = {},\n        parameters: ContractFunctionParameter[] = [],\n        issuerAddress = this.tronWeb.defaultAddress.hex as string\n    ) {\n        const { tokenValue, tokenId, callValue, feeLimit } = Object.assign(\n            {\n                callValue: 0,\n                feeLimit: this.tronWeb.feeLimit,\n            },\n            options\n        );\n\n        this.validator.notValid([\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n            },\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0,\n            },\n            {\n                name: 'parameters',\n                type: 'array',\n                value: parameters,\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress,\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress,\n                optional: true,\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0,\n                optional: true,\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0,\n                optional: true,\n            },\n        ]);\n\n        const args = this._getTriggerSmartContractArgs(\n            contractAddress,\n            functionSelector,\n            options,\n            parameters,\n            issuerAddress,\n            tokenValue,\n            tokenId,\n            callValue,\n            feeLimit\n        );\n\n        if (args.function_selector) {\n            args.data = keccak256(Buffer.from(args.function_selector, 'utf-8')).toString().substring(2, 10) + args.parameter;\n        }\n        const value: TriggerSmartContract = {\n            data: args.data,\n            owner_address: args.owner_address,\n            contract_address: args.contract_address,\n        };\n        if (args.call_value) {\n            value.call_value = args.call_value;\n        }\n        if (args.call_token_value) {\n            value.call_token_value = args.call_token_value;\n        }\n        if (args.token_id) {\n            value.token_id = args.token_id;\n        }\n        const transactionOptions = getTransactionOptions(options);\n        const transaction = await createTransaction(\n            this.tronWeb,\n            ContractType.TriggerSmartContract,\n            value,\n            options.permissionId,\n            {\n                ...transactionOptions,\n                fee_limit: args.fee_limit,\n            }\n        );\n        return {\n            result: {\n                result: true,\n            },\n            transaction,\n        };\n    }\n\n    async _triggerSmartContract(\n        contractAddress: string,\n        functionSelector: string,\n        options: TriggerConstantContractOptions = {},\n        parameters: ContractFunctionParameter[] = [],\n        issuerAddress: string = this.tronWeb.defaultAddress.hex as string\n    ) {\n        const { tokenValue, tokenId, callValue, feeLimit } = Object.assign(\n            {\n                callValue: 0,\n                feeLimit: this.tronWeb.feeLimit,\n            },\n            options\n        );\n        this.validator.notValid([\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n            },\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0,\n            },\n            {\n                name: 'parameters',\n                type: 'array',\n                value: parameters,\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress,\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress,\n                optional: true,\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0,\n                optional: true,\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0,\n                optional: true,\n            },\n        ]);\n        const args = this._getTriggerSmartContractArgs(\n            contractAddress,\n            functionSelector,\n            options,\n            parameters,\n            issuerAddress,\n            tokenValue,\n            tokenId,\n            callValue,\n            feeLimit\n        );\n\n        let pathInfo = 'triggersmartcontract';\n        if (options._isConstant) {\n            pathInfo = 'triggerconstantcontract';\n        } else if (options.estimateEnergy) {\n            pathInfo = 'estimateenergy';\n        }\n\n        pathInfo = `wallet${options.confirmed ? 'solidity' : ''}/${pathInfo}`;\n        const transaction: TransactionWrapper = await this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(\n            pathInfo,\n            args,\n            'post'\n        );\n        return resultManagerTriggerSmartContract(transaction, args, options);\n    }\n\n    async clearABI(\n        contractAddress: string,\n        ownerAddress: string = this.tronWeb.defaultAddress.hex as string,\n        options: TransactionCommonOptions = {}\n    ) {\n        if (!TronWeb.isAddress(contractAddress)) throw new Error('Invalid contract address provided');\n        if (!TronWeb.isAddress(ownerAddress)) throw new Error('Invalid owner address provided');\n        const data = {\n            contract_address: toHex(contractAddress),\n            owner_address: toHex(ownerAddress as string),\n        };\n\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        if (this.tronWeb.trx.cache.contracts[contractAddress]) {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            delete this.tronWeb.trx.cache.contracts[contractAddress];\n        }\n\n        const transactionOptions = getTransactionOptions(options);\n        return createTransaction(this.tronWeb, ContractType.ClearABIContract, data, options?.permissionId, transactionOptions);\n    }\n    async updateBrokerage(\n        brokerage: number,\n        ownerAddress: string = this.tronWeb.defaultAddress.hex as string,\n        options: TransactionCommonOptions = {}\n    ) {\n        if (!isNotNullOrUndefined(brokerage)) throw new Error('Invalid brokerage provided');\n\n        if (!isInteger(brokerage) || brokerage < 0 || brokerage > 100)\n            throw new Error('Brokerage must be an integer between 0 and 100');\n\n        if (!TronWeb.isAddress(ownerAddress)) throw new Error('Invalid owner address provided');\n\n        const data = {\n            brokerage: parseInt(brokerage),\n            owner_address: toHex(ownerAddress as string),\n        };\n\n        const transactionOptions = getTransactionOptions(options);\n        return createTransaction(this.tronWeb, ContractType.UpdateBrokerageContract, data, options?.permissionId, transactionOptions);\n    }\n\n    async createToken(\n        options: CreateTokenOptions = {} as CreateTokenOptions,\n        issuerAddress: string = this.tronWeb.defaultAddress.hex as string\n    ) {\n        const {\n            name = false,\n            abbreviation = false,\n            description = '',\n            url = false,\n            totalSupply = 0,\n            trxRatio = 1, // How much TRX will `tokenRatio` cost\n            tokenRatio = 1, // How many tokens will `trxRatio` afford\n            saleStart = Date.now(),\n            saleEnd = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0, // Out of `totalFreeBandwidth`, the amount each token holder get\n            frozenAmount = 0,\n            frozenDuration = 0,\n            // for now there is no default for the following values\n            voteScore,\n            precision,\n        } = options;\n\n        this.validator.notValid([\n            {\n                name: 'Supply amount',\n                type: 'positive-integer',\n                value: totalSupply,\n            },\n            {\n                name: 'TRX ratio',\n                type: 'positive-integer',\n                value: trxRatio,\n            },\n            {\n                name: 'Token ratio',\n                type: 'positive-integer',\n                value: tokenRatio,\n            },\n            {\n                name: 'token abbreviation',\n                type: 'string',\n                value: abbreviation,\n                lte: 32,\n                gt: 0,\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: name,\n            },\n            {\n                name: 'token description',\n                type: 'string',\n                value: description,\n                lte: 200,\n            },\n            {\n                name: 'token url',\n                type: 'url',\n                value: url,\n            },\n            {\n                name: 'token url',\n                type: 'string',\n                value: url,\n                lte: 256,\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress,\n            },\n            {\n                name: 'sale start timestamp',\n                type: 'integer',\n                value: saleStart,\n                gte: Date.now(),\n            },\n            {\n                name: 'sale end timestamp',\n                type: 'integer',\n                value: saleEnd,\n                gt: saleStart,\n            },\n            {\n                name: 'Frozen supply',\n                type: 'integer',\n                value: frozenAmount,\n                gte: 0,\n            },\n            {\n                name: 'Frozen duration',\n                type: 'integer',\n                value: frozenDuration,\n                gte: 0,\n            },\n        ]);\n\n        if (isNotNullOrUndefined(voteScore) && (!isInteger(voteScore) || voteScore <= 0))\n            throw new Error('voteScore must be a positive integer greater than 0');\n\n        if (isNotNullOrUndefined(precision) && (!isInteger(precision) || precision < 0 || precision > 6))\n            throw new Error('precision must be a positive integer >= 0 and <= 6');\n\n        const data: Optional<AssetIssueContract> = {\n            owner_address: toHex(issuerAddress),\n            name: fromUtf8(name as string),\n            abbr: fromUtf8(abbreviation as string),\n            description: fromUtf8(description),\n            url: fromUtf8(url as string),\n            total_supply: parseInt(totalSupply),\n            trx_num: parseInt(trxRatio),\n            num: parseInt(tokenRatio),\n            start_time: parseInt(saleStart),\n            end_time: parseInt(saleEnd as number),\n            frozen_supply: [\n                {\n                    frozen_amount: parseInt(frozenAmount),\n                    frozen_days: parseInt(frozenDuration),\n                },\n            ],\n        };\n        (['name', 'abbr', 'description', 'url'] as (keyof typeof data)[]).forEach((key) => {\n            if (!data[key]) {\n                delete data[key];\n            }\n        });\n        if (!(parseInt(frozenAmount) > 0)) {\n            delete data.frozen_supply;\n        }\n        if (freeBandwidth && !isNaN(parseInt(freeBandwidth)) && parseInt(freeBandwidth) >= 0) {\n            data.free_asset_net_limit = parseInt(freeBandwidth);\n        }\n        if (freeBandwidthLimit && !isNaN(parseInt(freeBandwidthLimit)) && parseInt(freeBandwidthLimit) >= 0) {\n            data.public_free_asset_net_limit = parseInt(freeBandwidthLimit);\n        }\n        if (precision && !isNaN(parseInt(precision))) {\n            data.precision = parseInt(precision);\n        }\n        if (voteScore && !isNaN(parseInt(voteScore))) {\n            data.vote_score = parseInt(voteScore);\n        }\n        const transactionOptions = getTransactionOptions(options);\n        return createTransaction(\n            this.tronWeb,\n            ContractType.AssetIssueContract,\n            data as AssetIssueContract,\n            options?.permissionId,\n            transactionOptions,\n        );\n    }\n\n    async createAccount(\n        accountAddress: string,\n        address: string = this.tronWeb.defaultAddress.hex as string,\n        options: TransactionCommonOptions = {}\n    ) {\n        this.validator.notValid([\n            {\n                name: 'account',\n                type: 'address',\n                value: accountAddress,\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: address as string,\n            },\n        ]);\n        const data = {\n            owner_address: toHex(address as string),\n            account_address: toHex(accountAddress),\n        };\n\n        const transactionOptions = getTransactionOptions(options);\n        return createTransaction(this.tronWeb, ContractType.AccountCreateContract, data, options?.permissionId, transactionOptions);\n    }\n\n    async updateAccount(\n        accountName: string,\n        address: string = this.tronWeb.defaultAddress.hex as string,\n        options: TransactionCommonOptions = {}\n    ) {\n        this.validator.notValid([\n            {\n                name: 'Name',\n                type: 'string',\n                lte: 200,\n                gt: 0,\n                value: accountName,\n                msg: 'Invalid accountName',\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: address as string,\n            },\n        ]);\n\n        const data = {\n            account_name: fromUtf8(accountName as string),\n            owner_address: toHex(address as string),\n        };\n\n        const transactionOptions = getTransactionOptions(options);\n        return createTransaction(this.tronWeb, ContractType.AccountUpdateContract, data, options?.permissionId, transactionOptions);\n    }\n\n    async setAccountId(\n        accountId: string,\n        address: string = this.tronWeb.defaultAddress.hex as string,\n        options: TransactionCommonOptions = {}\n    ) {\n        if (accountId && isString(accountId) && accountId.startsWith('0x')) {\n            accountId = accountId.slice(2);\n        }\n\n        this.validator.notValid([\n            {\n                name: 'accountId',\n                type: 'hex',\n                value: accountId,\n            },\n            {\n                name: 'accountId',\n                type: 'string',\n                lte: 32,\n                gte: 8,\n                value: accountId,\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: address as string,\n            },\n        ]);\n\n        const data = {\n            account_id: accountId,\n            owner_address: toHex(address as string),\n        };\n\n        const transactionOptions = getTransactionOptions(options);\n        return createTransaction(this.tronWeb, ContractType.SetAccountIdContract, data, options?.permissionId, transactionOptions);\n    }\n\n    async updateToken(\n        options: UpdateTokenOptions = {} as UpdateTokenOptions,\n        issuerAddress: string = this.tronWeb.defaultAddress.hex as string\n    ) {\n        const {\n            description = '',\n            url = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0, // Out of `totalFreeBandwidth`, the amount each token holder get\n        } = options;\n\n        this.validator.notValid([\n            {\n                name: 'token description',\n                type: 'string',\n                value: description,\n                lte: 200,\n            },\n            {\n                name: 'token url',\n                type: 'url',\n                value: url,\n            },\n            {\n                name: 'token url',\n                type: 'string',\n                value: url,\n                lte: 256,\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress as string,\n            },\n        ]);\n\n        const data: UpdateAssetContract = {\n            owner_address: toHex(issuerAddress as string),\n            description: fromUtf8(description),\n            url: fromUtf8(url as string),\n        };\n\n        if (freeBandwidth && !isNaN(parseInt(freeBandwidth)) && parseInt(freeBandwidth) >= 0) {\n            data.new_limit = parseInt(freeBandwidth);\n        }\n        if (freeBandwidthLimit && !isNaN(parseInt(freeBandwidthLimit)) && parseInt(freeBandwidthLimit) >= 0) {\n            data.new_public_limit = parseInt(freeBandwidthLimit);\n        }\n\n        const transactionOptions = getTransactionOptions(options);\n        return createTransaction(this.tronWeb, ContractType.UpdateAssetContract, data, options?.permissionId, transactionOptions);\n    }\n\n    async sendAsset(\n        to: string,\n        amount = 0,\n        tokenId: string,\n        from: string = this.tronWeb.defaultAddress.hex as string,\n        options: TransactionCommonOptions = {}\n    ) {\n        return this.sendToken(to, amount, tokenId, from as string, options);\n    }\n\n    async purchaseAsset(\n        issuerAddress: string,\n        tokenId: string,\n        amount = 0,\n        buyer: string = this.tronWeb.defaultAddress.hex as string,\n        options: TransactionCommonOptions = {}\n    ) {\n        return this.purchaseToken(issuerAddress, tokenId, amount, buyer as string, options);\n    }\n\n    async createAsset(options: CreateTokenOptions, issuerAddress: string) {\n        return this.createToken(options, issuerAddress);\n    }\n\n    async updateAsset(\n        options: UpdateTokenOptions = {} as UpdateTokenOptions,\n        issuerAddress: string = this.tronWeb.defaultAddress.hex as string\n    ) {\n        return this.updateToken(options, issuerAddress);\n    }\n\n    /**\n     * Creates a proposal to modify the network.\n     * Can only be created by a current Super Representative.\n     */\n    async createProposal(\n        parameters: Record<string, string | number> | Record<string, string | number>[],\n        issuerAddress: string = this.tronWeb.defaultAddress.hex as string,\n        options: TransactionCommonOptions = {}\n    ) {\n        this.validator.notValid([\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress as string,\n            },\n        ]);\n\n        const invalid = 'Invalid proposal parameters provided';\n        if (!parameters) throw new Error(invalid);\n\n        const newParams = isArray(parameters) ? parameters : [parameters];\n        for (const parameter of newParams) {\n            if (!isObject(parameter)) throw new Error(invalid);\n        }\n\n        const data = {\n            owner_address: toHex(issuerAddress as string),\n            parameters: newParams,\n        };\n\n        const transactionOptions = getTransactionOptions(options);\n        return createTransaction(this.tronWeb, ContractType.ProposalCreateContract, data, options?.permissionId, transactionOptions);\n    }\n\n    /**\n     * Deletes a network modification proposal that the owner issued.\n     * Only current Super Representative can vote on a proposal.\n     */\n    async deleteProposal(\n        proposalID: number,\n        issuerAddress: string = this.tronWeb.defaultAddress.hex as string,\n        options: TransactionCommonOptions = {}\n    ) {\n        this.validator.notValid([\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress as string,\n            },\n            {\n                name: 'proposalID',\n                type: 'integer',\n                value: proposalID,\n                gte: 0,\n            },\n        ]);\n\n        const data = {\n            owner_address: toHex(issuerAddress as string),\n            proposal_id: parseInt(proposalID as number),\n        };\n\n        const transactionOptions = getTransactionOptions(options);\n        return createTransaction(this.tronWeb, ContractType.ProposalDeleteContract, data, options?.permissionId, transactionOptions);\n    }\n\n    /**\n     * Adds a vote to an issued network modification proposal.\n     * Only current Super Representative can vote on a proposal.\n     */\n    async voteProposal(\n        proposalID: number,\n        isApproval = false,\n        voterAddress: string = this.tronWeb.defaultAddress.hex as string,\n        options: TransactionCommonOptions = {}\n    ) {\n        this.validator.notValid([\n            {\n                name: 'voter',\n                type: 'address',\n                value: voterAddress as string,\n            },\n            {\n                name: 'proposalID',\n                type: 'integer',\n                value: proposalID,\n                gte: 0,\n            },\n            {\n                name: 'has approval',\n                type: 'boolean',\n                value: isApproval,\n            },\n        ]);\n\n        const data = {\n            owner_address: toHex(voterAddress as string),\n            proposal_id: parseInt(proposalID),\n            is_add_approval: isApproval,\n        };\n\n        const transactionOptions = getTransactionOptions(options);\n        return createTransaction(this.tronWeb, ContractType.ProposalApproveContract, data, options?.permissionId, transactionOptions);\n    }\n\n    /**\n     * Create an exchange between a token and TRX.\n     * Token Name should be a CASE SENSITIVE string.\n     * PLEASE VERIFY THIS ON TRONSCAN.\n     */\n    async createTRXExchange(\n        tokenName: string,\n        tokenBalance: number,\n        trxBalance: number,\n        ownerAddress: string = this.tronWeb.defaultAddress.hex as string,\n        options: TransactionCommonOptions = {}\n    ) {\n        this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress as string,\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName,\n            },\n            {\n                name: 'token balance',\n                type: 'positive-integer',\n                value: tokenBalance,\n            },\n            {\n                name: 'trx balance',\n                type: 'positive-integer',\n                value: trxBalance,\n            },\n        ]);\n\n        const data = {\n            owner_address: toHex(ownerAddress as string),\n            first_token_id: fromUtf8(tokenName),\n            first_token_balance: tokenBalance,\n            second_token_id: '5f', // Constant for TRX.\n            second_token_balance: trxBalance,\n        };\n\n        const transactionOptions = getTransactionOptions(options);\n        return createTransaction(this.tronWeb, ContractType.ExchangeCreateContract, data, options?.permissionId, transactionOptions);\n    }\n\n    /**\n     * Create an exchange between a token and another token.\n     * DO NOT USE THIS FOR TRX.\n     * Token Names should be a CASE SENSITIVE string.\n     * PLEASE VERIFY THIS ON TRONSCAN.\n     */\n    async createTokenExchange(\n        firstTokenName: string,\n        firstTokenBalance: number,\n        secondTokenName: string,\n        secondTokenBalance: number,\n        ownerAddress: string = this.tronWeb.defaultAddress.hex as string,\n        options: TransactionCommonOptions = {}\n    ) {\n        this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress as string,\n            },\n            {\n                name: 'first token name',\n                type: 'not-empty-string',\n                value: firstTokenName,\n            },\n            {\n                name: 'second token name',\n                type: 'not-empty-string',\n                value: secondTokenName,\n            },\n            {\n                name: 'first token balance',\n                type: 'positive-integer',\n                value: firstTokenBalance,\n            },\n            {\n                name: 'second token balance',\n                type: 'positive-integer',\n                value: secondTokenBalance,\n            },\n        ]);\n\n        const data = {\n            owner_address: toHex(ownerAddress as string),\n            first_token_id: fromUtf8(firstTokenName),\n            first_token_balance: firstTokenBalance,\n            second_token_id: fromUtf8(secondTokenName),\n            second_token_balance: secondTokenBalance,\n        };\n\n        const transactionOptions = getTransactionOptions(options);\n        return createTransaction(this.tronWeb, ContractType.ExchangeCreateContract, data, options?.permissionId, transactionOptions);\n    }\n\n    /**\n     * Adds tokens into a bancor style exchange.\n     * Will add both tokens at market rate.\n     * Use \"_\" for the constant value for TRX.\n     */\n    async injectExchangeTokens(\n        exchangeID: number,\n        tokenName: string,\n        tokenAmount: number,\n        ownerAddress: string = this.tronWeb.defaultAddress.hex as string,\n        options: TransactionCommonOptions = {}\n    ) {\n        this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress as string,\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName,\n            },\n            {\n                name: 'token amount',\n                type: 'integer',\n                value: tokenAmount,\n                gte: 1,\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0,\n            },\n        ]);\n\n        const data = {\n            owner_address: toHex(ownerAddress as string),\n            exchange_id: parseInt(exchangeID),\n            token_id: fromUtf8(tokenName),\n            quant: parseInt(tokenAmount),\n        };\n\n        const transactionOptions = getTransactionOptions(options);\n        return createTransaction(this.tronWeb, ContractType.ExchangeInjectContract, data, options?.permissionId, transactionOptions);\n    }\n\n    /**\n     * Withdraws tokens from a bancor style exchange.\n     * Will withdraw at market rate both tokens.\n     * Use \"_\" for the constant value for TRX.\n     */\n    async withdrawExchangeTokens(\n        exchangeID: number,\n        tokenName: string,\n        tokenAmount: number,\n        ownerAddress: string = this.tronWeb.defaultAddress.hex as string,\n        options: TransactionCommonOptions = {}\n    ) {\n        this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress as string,\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName,\n            },\n            {\n                name: 'token amount',\n                type: 'integer',\n                value: tokenAmount,\n                gte: 1,\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0,\n            },\n        ]);\n\n        const data = {\n            owner_address: toHex(ownerAddress as string),\n            exchange_id: parseInt(exchangeID),\n            token_id: fromUtf8(tokenName),\n            quant: parseInt(tokenAmount),\n        };\n\n        const transactionOptions = getTransactionOptions(options);\n        return createTransaction(this.tronWeb, ContractType.ExchangeWithdrawContract, data, options?.permissionId, transactionOptions);\n    }\n\n    /**\n     * Trade tokens on a bancor style exchange.\n     * Expected value is a validation and used to cap the total amt of token 2 spent.\n     * Use \"_\" for the constant value for TRX.\n     */\n    async tradeExchangeTokens(\n        exchangeID: number,\n        tokenName: string,\n        tokenAmountSold: number,\n        tokenAmountExpected: number,\n        ownerAddress: string = this.tronWeb.defaultAddress.hex as string,\n        options: TransactionCommonOptions = {}\n    ) {\n        this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress as string,\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName,\n            },\n            {\n                name: 'tokenAmountSold',\n                type: 'integer',\n                value: tokenAmountSold,\n                gte: 1,\n            },\n            {\n                name: 'tokenAmountExpected',\n                type: 'integer',\n                value: tokenAmountExpected,\n                gte: 1,\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0,\n            },\n        ]);\n\n        const data = {\n            owner_address: toHex(ownerAddress as string),\n            exchange_id: parseInt(exchangeID),\n            token_id: TronWeb.fromAscii(tokenName).replace(/^0x/, ''),\n            quant: parseInt(tokenAmountSold),\n            expected: parseInt(tokenAmountExpected),\n        };\n\n        const transactionOptions = getTransactionOptions(options);\n        return createTransaction(this.tronWeb, ContractType.ExchangeTransactionContract, data, options?.permissionId, transactionOptions);\n    }\n\n    /**\n     * Update userFeePercentage.\n     */\n    async updateSetting(\n        contractAddress: string,\n        userFeePercentage: number,\n        ownerAddress: string = this.tronWeb.defaultAddress.hex as string,\n        options: TransactionCommonOptions = {}\n    ) {\n        this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress as string,\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress,\n            },\n            {\n                name: 'userFeePercentage',\n                type: 'integer',\n                value: userFeePercentage,\n                gte: 0,\n                lte: 100,\n            },\n        ]);\n\n        const data = {\n            owner_address: toHex(ownerAddress as string),\n            contract_address: toHex(contractAddress),\n            consume_user_resource_percent: userFeePercentage,\n        };\n\n        const transactionOptions = getTransactionOptions(options);\n        return createTransaction(this.tronWeb, ContractType.UpdateSettingContract, data, options?.permissionId, transactionOptions);\n    }\n\n    /**\n     * Update energy limit.\n     */\n    async updateEnergyLimit(\n        contractAddress: string,\n        originEnergyLimit = 0,\n        ownerAddress: string = this.tronWeb.defaultAddress.hex as string,\n        options: TransactionCommonOptions = {}\n    ) {\n        this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress as string,\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress,\n            },\n            {\n                name: 'originEnergyLimit',\n                type: 'integer',\n                value: originEnergyLimit,\n                gte: 0,\n                lte: 10_000_000,\n            },\n        ]);\n\n        const data = {\n            owner_address: toHex(ownerAddress as string),\n            contract_address: toHex(contractAddress),\n            origin_energy_limit: originEnergyLimit,\n        };\n\n        const transactionOptions = getTransactionOptions(options);\n        return createTransaction(this.tronWeb, ContractType.UpdateEnergyLimitContract, data, options?.permissionId, transactionOptions);\n    }\n\n    private checkPermissions(permissions: Permission, type: number) {\n        if (permissions) {\n            if (\n                permissions.type !== type ||\n                !permissions.permission_name ||\n                !isString(permissions.permission_name) ||\n                !isInteger(permissions.threshold) ||\n                permissions.threshold < 1 ||\n                !permissions.keys\n            ) {\n                return false;\n            }\n            for (const key of permissions.keys) {\n                if (\n                    !TronWeb.isAddress(key.address) ||\n                    !isInteger(key.weight) ||\n                    key.weight > permissions.threshold ||\n                    key.weight < 1 ||\n                    (type === 2 && !permissions.operations)\n                ) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    async updateAccountPermissions(\n        ownerAddress: string = this.tronWeb.defaultAddress.hex as string,\n        ownerPermission: Permission,\n        witnessPermission?: Permission,\n        activesPermissions?: Permission | Permission[],\n        options: TransactionCommonOptions = {}\n    ) {\n        if (!TronWeb.isAddress(ownerAddress as Address)) throw new Error('Invalid ownerAddress provided');\n\n        if (!this.checkPermissions(ownerPermission, 0)) {\n            throw new Error('Invalid ownerPermissions provided');\n        }\n\n        if (!this.checkPermissions(witnessPermission!, 1)) {\n            throw new Error('Invalid witnessPermissions provided');\n        }\n\n        if (!Array.isArray(activesPermissions)) {\n            activesPermissions = [activesPermissions!];\n        }\n\n        for (const activesPermission of activesPermissions) {\n            if (!this.checkPermissions(activesPermission, 2)) {\n                throw new Error('Invalid activesPermissions provided');\n            }\n        }\n\n        const data: AccountPermissionUpdateContract = {\n            owner_address: toHex(ownerAddress as string),\n        };\n        if (ownerPermission) {\n            const _ownerPermissions = deepCopyJson<Optional<Permission>>(ownerPermission);\n            // for compatible with old way of building transaction from chain which type prop is omitted\n            if ('type' in _ownerPermissions) {\n                delete _ownerPermissions.type;\n            }\n            _ownerPermissions.keys = _ownerPermissions.keys?.map(({ address, weight }) => ({\n                address: this.tronWeb.address.toHex(address),\n                weight,\n            }));\n            data.owner = _ownerPermissions as Permission;\n        }\n        if (witnessPermission) {\n            const _witnessPermissions = deepCopyJson<Permission>(witnessPermission);\n            // for compatible with old way of building transaction from chain which type prop is Witness\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            _witnessPermissions.type = 'Witness';\n            _witnessPermissions.keys = _witnessPermissions.keys.map(({ address, weight }) => ({\n                address: this.tronWeb.address.toHex(address),\n                weight,\n            }));\n            data.witness = _witnessPermissions;\n        }\n        if (activesPermissions) {\n            const _activesPermissions = deepCopyJson<Permission[]>(activesPermissions);\n            // for compatible with old way of building transaction from chain which type prop is Active\n            _activesPermissions.forEach((activePermissions: Permission) => {\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                activePermissions.type = 'Active';\n            });\n            _activesPermissions.forEach((_activesPermission) => {\n                _activesPermission.keys = _activesPermission.keys.map(({ address, weight }) => ({\n                    address: this.tronWeb.address.toHex(address),\n                    weight,\n                }));\n            });\n            data.actives = _activesPermissions as Permission[];\n        }\n\n        const transactionOptions = getTransactionOptions(options);\n        return createTransaction(this.tronWeb, ContractType.AccountPermissionUpdateContract, data, options?.permissionId, transactionOptions);\n    }\n\n    async newTxID(transaction: SignedTransaction, options: { txLocal?: boolean } = {}) {\n        if (options?.txLocal) {\n            const contract = transaction.raw_data.contract[0];\n            try {\n                const tx = await createTransaction(\n                    this.tronWeb,\n                    contract.type,\n                    contract.parameter.value,\n                    contract.Permission_id,\n                    {\n                        fee_limit: transaction.raw_data.fee_limit,\n                        data: transaction.raw_data.data,\n                        ref_block_bytes: transaction.raw_data.ref_block_bytes,\n                        ref_block_hash: transaction.raw_data.ref_block_hash,\n                        expiration: transaction.raw_data.expiration,\n                        timestamp: transaction.raw_data.timestamp,\n                    }\n                );\n                (tx as SignedTransaction).signature = transaction.signature;\n                tx.visible = transaction.visible;\n                return tx;\n            } catch (e) {\n                throw new Error('Error generating a new transaction id.');\n            }\n        }\n        try {\n            const res: GetSignWeightResponse = await this.tronWeb.fullNode.request('wallet/getsignweight', transaction, 'post');\n            if (typeof transaction.visible === 'boolean') {\n                res.transaction.transaction.visible = transaction.visible;\n            }\n            return resultManager(\n                res.transaction.transaction as unknown as TransactionWrapper,\n                {\n                    ...transaction.raw_data.contract[0].parameter.value,\n                    Permission_id: transaction.raw_data.contract[0].Permission_id,\n                },\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                /* @ts-ignore */\n                { data: transaction.raw_data.data, fee_limit: transaction.raw_data.fee_limit }\n            );\n        } catch (e) {\n            throw new Error('Error generating a new transaction id.');\n        }\n    }\n\n    async alterTransaction(transaction: Transaction, options: AlterTransactionOptions = {}) {\n        if (Reflect.has(transaction, 'signature')) throw new Error('You can not extend the expiration of a signed transaction.');\n\n        if (options.data) {\n            if (options.dataFormat !== 'hex') options.data = TronWeb.toHex(options.data);\n            options.data = options.data!.replace(/^0x/, '');\n            if (options.data.length === 0) throw new Error('Invalid data provided');\n            transaction.raw_data.data = options.data;\n        }\n\n        if (options.extension) {\n            options.extension = parseInt(options.extension * 1000);\n            if (isNaN(options.extension) || transaction.raw_data.expiration + options.extension <= Date.now() + 3000)\n                throw new Error('Invalid extension provided');\n            transaction.raw_data.expiration += options.extension;\n        }\n\n        return await this.newTxID(transaction as SignedTransaction, { txLocal: options.txLocal });\n    }\n\n    async extendExpiration(transaction: SignedTransaction, extension: number, options: TxLocal = {}) {\n        return await this.alterTransaction(transaction, { extension, txLocal: options?.txLocal });\n    }\n\n    async addUpdateData(transaction: Transaction, data: string, dataFormat: 'utf8' | 'hex' = 'utf8', options: TxLocal = {}) {\n        return this.alterTransaction(transaction, { data, dataFormat: dataFormat as string, txLocal: options?.txLocal });\n    }\n}\n","import { TronWeb } from '../../tronweb.js';\nimport { Transaction, TransactionWrapper } from '../../types/Transaction.js';\nimport { txCheckWithArgs, txJsonToPb, txPbToTxID, txPbToRawDataHex } from '../../utils/transaction.js';\nimport { keccak256 } from '../../utils/ethersUtils.js';\nimport { BlockWithoutDetail } from '../../types/APIResponse.js';\nimport HttpProvider from '../providers/HttpProvider.js';\nimport { ContractParamter, ContractType } from '../../types/Contract.js';\nimport { TriggerConstantContractOptions } from '../../types/TransactionBuilder.js';\n\nexport function fromUtf8(value: string) {\n    return TronWeb.fromUtf8(value).replace(/^0x/, '');\n}\n\nexport function deepCopyJson<T = unknown>(json: object): T {\n    return JSON.parse(JSON.stringify(json));\n}\nexport function resultManager(transaction: TransactionWrapper, data: unknown, options: TriggerConstantContractOptions) {\n    if (transaction.Error) throw new Error(transaction.Error);\n\n    if (transaction.result && transaction.result.message) {\n        throw new Error(TronWeb.toUtf8(transaction.result.message));\n    }\n    const authResult = txCheckWithArgs(transaction, data, options);\n    if (authResult) {\n        return transaction;\n    }\n    throw new Error('Invalid transaction');\n}\n\nexport function resultManagerTriggerSmartContract(\n    transaction: TransactionWrapper,\n    data: unknown,\n    options: TriggerConstantContractOptions\n) {\n    if (transaction.Error) throw new Error(transaction.Error);\n\n    if (transaction.result && transaction.result.message) {\n        throw new Error(TronWeb.toUtf8(transaction.result.message));\n    }\n\n    if (!(options._isConstant || options.estimateEnergy)) {\n        const authResult = txCheckWithArgs(transaction.transaction, data, options);\n        if (authResult) {\n            return transaction;\n        }\n        throw new Error('Invalid transaction');\n    }\n    return transaction;\n}\n\nexport function genContractAddress(ownerAddress: string, txID: string) {\n    return (\n        '41' +\n        keccak256(Buffer.from(txID + ownerAddress, 'hex'))\n            .toString()\n            .substring(2)\n            .slice(24)\n    );\n}\n\nexport function getHeaderInfo(node: HttpProvider) {\n    return node.request<BlockWithoutDetail>('wallet/getblock', { detail: false }, 'post').then((data) => {\n        return {\n            ref_block_bytes: data.block_header.raw_data.number.toString(16).slice(-4).padStart(4, '0'),\n            ref_block_hash: data.blockID.slice(16, 32),\n            expiration: data.block_header.raw_data.timestamp + 60 * 1000,\n            timestamp: data.block_header.raw_data.timestamp,\n        };\n    });\n}\n\nfunction checkBlockHeader(options = {} as Partial<Transaction['raw_data']>): boolean {\n    if (\n        typeof options['ref_block_bytes'] === 'undefined' &&\n        typeof options['ref_block_hash'] === 'undefined' &&\n        typeof options['expiration'] === 'undefined' &&\n        typeof options['timestamp'] === 'undefined'\n    ) {\n        return false;\n    }\n    if (typeof options['ref_block_bytes'] !== 'string') {\n        throw new Error('Invalid ref_block_bytes provided.');\n    }\n    if (typeof options['ref_block_hash'] !== 'string') {\n        throw new Error('Invalid ref_block_hash provided.');\n    }\n    if (typeof options['expiration'] !== 'number') {\n        throw new Error('Invalid expiration provided.');\n    }\n    if (typeof options['timestamp'] !== 'number') {\n        throw new Error('Invalid timestamp provided.');\n    }\n    return true;\n}\n\nexport async function createTransaction(\n    tronWeb: TronWeb,\n    type: ContractType,\n    value: ContractParamter,\n    Permission_id?: number,\n    options = {} as Partial<Omit<Transaction['raw_data'], 'contract'>>\n): Promise<Transaction> {\n    const tx: Transaction = {\n        visible: false,\n        txID: '',\n        raw_data_hex: '',\n        raw_data: {\n            contract: [\n                {\n                    parameter: {\n                        value,\n                        type_url: `type.googleapis.com/protocol.${type}`,\n                    },\n                    type,\n                },\n            ],\n            ...(checkBlockHeader(options) ? ({} as Transaction['raw_data']) : await getHeaderInfo(tronWeb.fullNode)),\n            ...options,\n        },\n    };\n    if (Permission_id) {\n        tx.raw_data.contract[0].Permission_id = Permission_id;\n    }\n    const pb = txJsonToPb(tx);\n    tx.txID = txPbToTxID(pb).replace(/^0x/, '');\n    tx.raw_data_hex = txPbToRawDataHex(pb).toLowerCase();\n    return tx;\n}\n\nexport function getTransactionOptions(options: { blockHeader?: Partial<Transaction['raw_data']> } = {}) {\n    const ret = {} as Partial<Transaction['raw_data']>;\n    if (checkBlockHeader(options.blockHeader)) {\n        ret['ref_block_bytes'] = options.blockHeader!['ref_block_bytes'];\n        ret['ref_block_hash'] = options.blockHeader!['ref_block_hash'];\n        ret['expiration'] = options.blockHeader!['expiration'];\n        ret['timestamp'] = options.blockHeader!['timestamp'];\n    }\n    return ret;\n}\n","import { TronWeb } from '../../tronweb.js';\nimport utils from '../../utils/index.js';\nimport { Method, AbiFragmentNoErrConstructor } from './method.js';\nimport type { ContractAbiInterface } from '../../types/ABI.js';\nimport { Address } from '../../types/Trx.js';\nimport { CreateSmartContractOptions } from '../../types/TransactionBuilder.js';\n\n\nexport class Contract {\n    tronWeb: TronWeb;\n    abi: ContractAbiInterface;\n    address: false | string;\n    eventListener: any;\n    bytecode?: false | string;\n    deployed?: boolean;\n    lastBlock?: false | number;\n    methods: Record<string | number | symbol, (...args: any) => ReturnType<Method['onMethod']>>;\n    methodInstances: Record<string | number | symbol, Method>;\n    props: any[];\n    [key: string | number | symbol]: any;\n\n    constructor(tronWeb: TronWeb, abi: ContractAbiInterface = [], address: Address) {\n        if (!tronWeb || !(tronWeb instanceof TronWeb)) throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n\n        this.address = address;\n        this.abi = abi;\n\n        this.eventListener = false;\n        this.bytecode = false;\n        this.deployed = false;\n        this.lastBlock = false;\n\n        this.methods = {};\n        this.methodInstances = {};\n        this.props = [];\n\n        if (utils.address.isAddress(address)) {\n            this.deployed = true;\n        } else {\n            this.address = false;\n        }\n\n        this.loadAbi(abi);\n    }\n\n    hasProperty(property: number | string | symbol) {\n        // eslint-disable-next-line no-prototype-builtins\n        return this.hasOwnProperty(property) || (this as any).__proto__.hasOwnProperty(property);\n    }\n\n    loadAbi(abi: ContractAbiInterface) {\n        this.abi = abi;\n        this.methods = {};\n\n        this.props.forEach((prop: string) => delete (this as any)[prop]);\n\n        abi.forEach((func) => {\n            // Don't build a method for constructor function. That's handled through contract create.\n            // Don't build a method for error function.\n            if (!func.type || /constructor|error/i.test(func.type)) return;\n\n            const method = new Method(this, func as AbiFragmentNoErrConstructor);\n            const methodCall = method.onMethod.bind(method);\n\n            const { name, functionSelector, signature } = method;\n\n            this.methods[name] = methodCall;\n            this.methods[functionSelector!] = methodCall;\n            this.methods[signature] = methodCall;\n\n            this.methodInstances[name] = method;\n            this.methodInstances[functionSelector!] = method;\n            this.methodInstances[signature] = method;\n\n            if (!this.hasProperty(name)) {\n                (this as any)[name] = methodCall;\n                this.props.push(name);\n            }\n\n            if (!this.hasProperty(functionSelector!)) {\n                (this as any)[functionSelector!] = methodCall;\n                this.props.push(functionSelector);\n            }\n\n            if (!this.hasProperty(signature)) {\n                (this as any)[signature] = methodCall;\n                this.props.push(signature);\n            }\n        });\n    }\n\n    decodeInput(data: string) {\n        const methodName = data.substring(0, 8);\n        const inputData = data.substring(8);\n\n        if (!this.methodInstances[methodName]) throw new Error('Contract method ' + methodName + ' not found');\n\n        const methodInstance = this.methodInstances[methodName];\n\n        return {\n            name: methodInstance.name,\n            params: this.methodInstances[methodName].decodeInput(inputData),\n        };\n    }\n\n    async new(options: CreateSmartContractOptions, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        const address = this.tronWeb.address.fromPrivateKey(privateKey as string);\n        const transaction = await this.tronWeb.transactionBuilder.createSmartContract(options, address as Address);\n        const signedTransaction = await this.tronWeb.trx.sign(transaction, privateKey);\n        const contract = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n        if (contract.code) {\n            throw {\n                error: contract.code,\n                message: this.tronWeb.toUtf8(contract.message),\n            };\n        }\n\n        await utils.sleep(3000);\n        return this.at(signedTransaction.contract_address);\n    }\n\n    async at(contractAddress: Address) {\n        try {\n            const contract = await this.tronWeb.trx.getContract(contractAddress);\n\n            if (!contract.contract_address) {\n                throw new Error('Unknown error: ' + JSON.stringify(contract, null, 2));\n            }\n\n            this.address = contract.contract_address;\n            this.bytecode = contract.bytecode;\n            this.deployed = true;\n\n            this.loadAbi(contract.abi ? (contract.abi.entrys ? contract.abi.entrys : []) : []);\n\n            return this;\n        } catch (ex: any) {\n            if (ex.toString().includes('does not exist')) {\n                throw new Error('Contract has not been deployed on the network');\n            }\n\n            throw new Error(ex);\n        }\n    }\n}\n\nexport type { CallOptions, SendOptions, AbiFragmentNoErrConstructor } from './method.js';\nexport { Method } from './method.js';\n","/* eslint-disable no-control-regex */\nimport utils from '../../utils/index.js';\nimport { encodeParamsV2ByABI, decodeParamsV2ByABI } from '../../utils/abi.js';\nimport { TronWeb } from '../../tronweb.js';\nimport { Contract } from './index.js';\nimport { sha3 } from '../../utils/crypto.js';\n\nexport interface CallOptions {\n    feeLimit?: number;\n    callValue?: number;\n    callTokenValue?: number;\n    callTokenId?: number;\n    userFeePercentage?: number;\n    shouldPollResponse?: boolean;\n    from?: string | false;\n    rawParameter?: string;\n    _isConstant?: true;\n}\n\nexport interface SendOptions {\n    from?: string | false;\n    feeLimit?: number;\n    callValue?: number;\n    rawParameter?: string;\n    userFeePercentage?: number;\n    shouldPollResponse?: boolean;\n    pollTimes?: number;\n    rawResponse?: boolean;\n    keepTxID?: boolean;\n}\n\nimport type {\n    FragmentTypes,\n    StateMutabilityTypes,\n    FunctionFragment,\n    FallbackFragment,\n    ReceiveFragment,\n    EventFragment,\n    AbiInputsType,\n    AbiOutputsType,\n} from '../../types/ABI';\n\nexport type AbiFragmentNoErrConstructor = FunctionFragment | EventFragment | FallbackFragment | ReceiveFragment;\n\nconst getFunctionSelector = (abi: AbiFragmentNoErrConstructor) => {\n    if ('stateMutability' in abi) {\n        (abi.stateMutability as StateMutabilityTypes) = abi.stateMutability ? abi.stateMutability.toLowerCase() : 'nonpayable';\n    }\n    (abi.type as FragmentTypes) = abi.type ? abi.type.toLowerCase() : '';\n    if (abi.type === 'fallback' || abi.type === 'receive') return '0x';\n    const iface = new utils.ethersUtils.Interface([abi]);\n    let obj;\n    if (abi.type === 'event') {\n        obj = iface.getEvent(abi.name);\n    } else {\n        obj = iface.getFunction(abi.name);\n    }\n    if (obj) {\n        return obj.format('sighash');\n    }\n    throw new Error('unknown function');\n};\n\nconst decodeOutput = (abi: AbiFragmentNoErrConstructor, output: string) => {\n    return decodeParamsV2ByABI(abi, output);\n};\n\nexport class Method {\n    tronWeb: TronWeb;\n    contract: Contract;\n    abi: AbiFragmentNoErrConstructor;\n    name: string;\n    inputs: AbiInputsType;\n    outputs: AbiOutputsType;\n    functionSelector: string | null;\n    signature: string;\n    defaultOptions: {\n        feeLimit: number;\n        callValue: number;\n        userFeePercentage: number;\n        shouldPollResponse: boolean;\n    };\n\n    constructor(contract: Contract, abi: AbiFragmentNoErrConstructor) {\n        this.tronWeb = contract.tronWeb;\n        this.contract = contract;\n\n        this.abi = abi;\n        this.name = abi.name || abi.type;\n\n        this.inputs = abi.inputs || [];\n\n        this.outputs = [];\n        if ('outputs' in abi && abi.outputs) {\n            this.outputs = abi.outputs;\n        }\n\n        this.functionSelector = getFunctionSelector(abi);\n        this.signature = sha3(this.functionSelector, false).slice(0, 8);\n\n        this.defaultOptions = {\n            feeLimit: this.tronWeb.feeLimit,\n            callValue: 0,\n            userFeePercentage: 100,\n            shouldPollResponse: false, // Only used for sign()\n        };\n    }\n\n    decodeInput(data: string) {\n        return decodeOutput(this.abi, '0x' + data);\n    }\n\n    onMethod(...args: any[]) {\n        let rawParameter = '';\n        if (this.abi && !/event/i.test(this.abi.type)) {\n            rawParameter = encodeParamsV2ByABI(this.abi, args);\n        }\n        return {\n            call: async (options: CallOptions = {}) => {\n                options = {\n                    ...options,\n                    rawParameter,\n                };\n\n                return await this._call([], [], options);\n            },\n            send: async (options: SendOptions = {}, privateKey = this.tronWeb.defaultPrivateKey) => {\n                options = {\n                    ...options,\n                    rawParameter,\n                };\n\n                return await this._send([], [], options, privateKey);\n            },\n        };\n    }\n\n    async _call(types: [], args: [], options: CallOptions = {}) {\n        if (types.length !== args.length) {\n            throw new Error('Invalid argument count provided');\n        }\n\n        if (!this.contract.address) {\n            throw new Error('Smart contract is missing address');\n        }\n\n        if (!this.contract.deployed) {\n            throw new Error('Calling smart contracts requires you to load the contract first');\n        }\n        if ('stateMutability' in this.abi) {\n            const { stateMutability } = this.abi;\n\n            if (stateMutability && !['pure', 'view'].includes(stateMutability.toLowerCase())) {\n                throw new Error(`Methods with state mutability \"${stateMutability}\" must use send()`);\n            }\n        }\n\n        options = {\n            ...this.defaultOptions,\n            from: this.tronWeb.defaultAddress.hex,\n            ...options,\n            _isConstant: true,\n        };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value,\n        }));\n\n        const transaction = await this.tronWeb.transactionBuilder.triggerSmartContract(\n            this.contract.address,\n            this.functionSelector!,\n            options,\n            parameters,\n            options.from ? this.tronWeb.address.toHex(options.from) : undefined\n        );\n\n        if (!utils.hasProperty(transaction, 'constant_result')) {\n            throw new Error('Failed to execute');\n        }\n\n        const len = transaction.constant_result![0].length;\n        if (len === 0 || len % 64 === 8) {\n            let msg = 'The call has been reverted or has thrown an error.';\n            if (len !== 0) {\n                msg += ' Error message: ';\n                let msg2 = '';\n                const chunk = transaction.constant_result![0].substring(8);\n                for (let i = 0; i < len - 8; i += 64) {\n                    msg2 += this.tronWeb.toUtf8(chunk.substring(i, i + 64));\n                }\n                msg += msg2\n                    .replace(/(\\u0000|\\u000b|\\f)+/g, ' ')\n                    .replace(/ +/g, ' ')\n                    .replace(/\\s+$/g, '');\n            }\n            throw new Error(msg);\n        }\n\n        let output = decodeOutput(this.abi, '0x' + transaction.constant_result![0]);\n\n        if (output.length === 1 && Object.keys(output).length === 1) {\n            output = output[0];\n        }\n        return output;\n    }\n\n    async _send(types: [], args: [], options: SendOptions = {}, privateKey = this.tronWeb.defaultPrivateKey) {\n        if (types.length !== args.length) {\n            throw new Error('Invalid argument count provided');\n        }\n\n        if (!this.contract.address) {\n            throw new Error('Smart contract is missing address');\n        }\n\n        if (!this.contract.deployed) {\n            throw new Error('Calling smart contracts requires you to load the contract first');\n        }\n\n        const { stateMutability } = this.abi as { stateMutability: StateMutabilityTypes };\n\n        if (['pure', 'view'].includes(stateMutability.toLowerCase())) {\n            throw new Error(`Methods with state mutability \"${stateMutability}\" must use call()`);\n        }\n\n        // If a function isn't payable, dont provide a callValue.\n        if (!['payable'].includes(stateMutability.toLowerCase())) {\n            options.callValue = 0;\n        }\n\n        options = {\n            ...this.defaultOptions,\n            from: this.tronWeb.defaultAddress.hex,\n            ...options,\n        };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value,\n        }));\n\n        const address = privateKey ? this.tronWeb.address.fromPrivateKey(privateKey) : this.tronWeb.defaultAddress.base58;\n        const transaction = await this.tronWeb.transactionBuilder.triggerSmartContract(\n            this.contract.address,\n            this.functionSelector!,\n            options,\n            parameters,\n            this.tronWeb.address.toHex(address as string)\n        );\n\n        if (!transaction.result || !transaction.result.result) {\n            throw new Error('Unknown error: ' + JSON.stringify(transaction, null, 2));\n        }\n\n        // If privateKey is false, this won't be signed here. We assume sign functionality will be replaced.\n        const signedTransaction = await this.tronWeb.trx.sign(transaction.transaction, privateKey);\n\n        if (!signedTransaction.signature) {\n            if (!privateKey) {\n                throw new Error('Transaction was not signed properly');\n            }\n\n            throw new Error('Invalid private key provided');\n        }\n\n        const broadcast = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n        if (broadcast.code) {\n            const err = {\n                error: broadcast.code,\n                message: broadcast.code as unknown as string,\n            };\n            if (broadcast.message) err.message = this.tronWeb.toUtf8(broadcast.message);\n            const error = new Error(err.message);\n            (error as any).error = broadcast.code;\n            throw error;\n        }\n\n        if (!options.shouldPollResponse) {\n            return signedTransaction.txID;\n        }\n\n        const checkResult: (index: number) => any = async (index) => {\n            if (index === (options.pollTimes || 20)) {\n                const error: any = new Error('Cannot find result in solidity node');\n                error.error = 'Cannot find result in solidity node';\n                error.transaction = signedTransaction;\n                throw error;\n            }\n\n            const output = await this.tronWeb.trx.getTransactionInfo(signedTransaction.txID);\n\n            if (!Object.keys(output).length) {\n                await new Promise((r) => setTimeout(r, 3000));\n                return checkResult(index + 1);\n            }\n\n            if (output.result && output.result === 'FAILED') {\n                const error: any = new Error(this.tronWeb.toUtf8(output.resMessage));\n                error.error = this.tronWeb.toUtf8(output.resMessage);\n                error.transaction = signedTransaction;\n                error.output = output;\n                throw error;\n            }\n\n            if (!utils.hasProperty(output, 'contractResult')) {\n                const error: any = new Error('Failed to execute: ' + JSON.stringify(output, null, 2));\n                error.error = 'Failed to execute: ' + JSON.stringify(output, null, 2);\n                error.transaction = signedTransaction;\n                error.output = output;\n                throw error;\n            }\n\n            if (options.rawResponse) {\n                return output;\n            }\n\n            let decoded = decodeOutput(this.abi, '0x' + output.contractResult[0]);\n\n            if (decoded.length === 1 && Object.keys(decoded).length === 1) {\n                decoded = decoded[0];\n            }\n\n            if (options.keepTxID) {\n                return [signedTransaction.txID, decoded];\n            }\n\n            return decoded;\n        };\n\n        return checkResult(0);\n    }\n}\n","import { TronWeb } from '../tronweb.js';\nimport { NodeProvider } from '../types/TronWeb.js';\nimport utils from '../utils/index.js';\nimport { HttpProvider } from './providers/index.js';\n\nexport interface GetEventResultOptions {\n    /**\n     * Name of the event to filter by.\n     */\n    eventName?: string;\n    /**\n     * Specific block number to query.\n     */\n    blockNumber?: number;\n    /**\n     * Maximum number returned.\n     */\n    limit?: number;\n    /**\n     * When the data volume of the query result is large, the returned result of one query will not contain all the data, and it takes multiple queries to obtain the complete data. Therefore, the fingerprint field will appear in the last piece of data in the returned result. After specifying this field as the content of the fingerprint in the result of the previous query in the next query, the query will return subsequent data. If there is no such field in the last data of the query result, it means that there is no more data.\n     */\n    fingerprint?: string;\n    /**\n     * If set to true, only returns confirmed transactions.\n     */\n    onlyConfirmed?: boolean;\n    /**\n     * If set to true, only returns unconfirmed transactions.\n     */\n    onlyUnconfirmed?: boolean;\n    /**\n     * Specify the query order, whether to query forward or backward from the sinceTimestamp.\n     * The value can be 'block_timestamp,desc' for time sequence or 'block_timestamp,asc' for the reverse.\n     * Default is 'block_timestamp,desc'.\n     */\n    orderBy?: 'block_timestamp,desc' | 'block_timestamp,asc';\n    /**\n     * Specifies the starting timestamp of the query, in milliseconds, default value is the current time.\n     */\n    minBlockTimestamp?: number;\n    /**\n     * Specifies the ending timestamp of the query, in milliseconds.\n     */\n    maxBlockTimestamp?: number;\n}\n\nexport interface EventResponse {\n    success: boolean;\n    error?: string;\n    data?: {\n        block_number: number;\n        block_timestamp: number;\n        caller_contract_address: string;\n        contract_address: string;\n        event_index: number;\n        event_name: string;\n        result: Record<string, string>;\n        result_type: Record<string, string>;\n        event: string;\n        transaction_id: string;\n        _unconfirmed: boolean;\n    }[];\n    meta?: {\n        at: number;\n        fingerprint?: string;\n        links?: {\n            next: string;\n        };\n        page_size: number;\n    };\n}\n\nexport class Event {\n    private tronWeb: TronWeb;\n\n    constructor(tronWeb: TronWeb) {\n        if (!tronWeb || !(tronWeb instanceof TronWeb)) throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n    }\n\n    setServer(eventServer: NodeProvider, healthcheck = 'healthcheck') {\n        if (!eventServer) return (this.tronWeb.eventServer = undefined);\n\n        if (utils.isString(eventServer)) eventServer = new HttpProvider(eventServer);\n\n        if (!this.tronWeb.isValidProvider(eventServer)) throw new Error('Invalid event server provided');\n\n        this.tronWeb.eventServer = eventServer;\n        this.tronWeb.eventServer.isConnected = () =>\n            this.tronWeb\n                .eventServer!.request(healthcheck)\n                .then(() => true)\n                .catch(() => false);\n    }\n\n    async getEventsByContractAddress(contractAddress: string, options: GetEventResultOptions = {}) {\n        const newOptions = Object.assign(\n            {\n                limit: 20,\n            },\n            options\n        );\n        const {\n            eventName,\n            blockNumber,\n            onlyUnconfirmed,\n            onlyConfirmed,\n            minBlockTimestamp,\n            maxBlockTimestamp,\n            orderBy,\n            fingerprint,\n        } = newOptions;\n        let { limit } = newOptions;\n\n        if (!this.tronWeb.eventServer) {\n            throw new Error('No event server configured');\n        }\n\n        if (!this.tronWeb.isAddress(contractAddress)) {\n            throw new Error('Invalid contract address provided');\n        }\n\n        if (typeof minBlockTimestamp !== 'undefined' && !utils.isInteger(minBlockTimestamp)) {\n            throw new Error('Invalid minBlockTimestamp provided');\n        }\n\n        if (typeof maxBlockTimestamp !== 'undefined' && !utils.isInteger(maxBlockTimestamp)) {\n            throw new Error('Invalid maxBlockTimestamp provided');\n        }\n\n        if (utils.isInteger(limit) && limit > 200) {\n            console.warn('Defaulting to maximum accepted limit: 200');\n            limit = 200;\n        }\n\n        const qs = {} as any;\n\n        if (eventName) qs.event_name = eventName;\n        if (blockNumber) qs.block_number = blockNumber;\n        if (typeof onlyUnconfirmed === 'boolean') qs.only_unconfirmed = onlyUnconfirmed;\n        if (typeof onlyConfirmed === 'boolean') qs.only_confirmed = onlyConfirmed;\n        if (minBlockTimestamp) qs.min_block_timestamp = minBlockTimestamp;\n        if (maxBlockTimestamp) qs.max_block_timestamp = maxBlockTimestamp;\n        if (orderBy) qs.order_by = orderBy;\n        if (fingerprint) qs.fingerprint = fingerprint;\n        if (utils.isInteger(limit)) qs.limit = limit;\n\n        const res = await this.tronWeb.eventServer.request<EventResponse>(\n            `v1/contracts/${this.tronWeb.address.fromHex(contractAddress)}/events?${new URLSearchParams(qs).toString()}`\n        );\n        if (res.success) {\n            return res;\n        }\n        throw new Error(res.error);\n    }\n\n    async getEventsByTransactionID(\n        transactionID: string,\n        options: {\n            only_unconfirmed?: boolean;\n            only_confirmed?: boolean;\n        } = {}\n    ) {\n        if (!this.tronWeb.eventServer) {\n            throw new Error('No event server configured');\n        }\n\n        const qs = {} as any;\n\n        if (typeof options.only_unconfirmed === 'boolean') {\n            qs.only_unconfirmed = options.only_unconfirmed;\n        }\n\n        if (typeof options.only_confirmed === 'boolean') {\n            qs.only_confirmed = options.only_confirmed;\n        }\n\n        return this.tronWeb.eventServer\n            .request<EventResponse>(`v1/transactions/${transactionID}/events?${new URLSearchParams(qs).toString()}`)\n            .then((res) => {\n                if (res.success) {\n                    return res;\n                }\n                throw new Error(JSON.parse(res.error!).message);\n            });\n    }\n\n    async getEventsByBlockNumber(\n        blockNumber: number | string,\n        options: {\n            only_confirmed?: boolean;\n            limit?: number;\n            fingerprint?: string;\n        } = {}\n    ) {\n        if (!this.tronWeb.eventServer) {\n            throw new Error('No event server configured');\n        }\n\n        const qs = {} as any;\n\n        if (typeof options.only_confirmed === 'boolean') {\n            qs.only_confirmed = options.only_confirmed;\n        }\n\n        if (options.limit) {\n            qs.limit = options.limit;\n        }\n\n        if (options.fingerprint) {\n            qs.fingerprint = options.fingerprint;\n        }\n\n        return this.tronWeb.eventServer\n            .request<EventResponse>(`v1/blocks/${blockNumber}/events?${new URLSearchParams(qs).toString()}`)\n            .then((res) => {\n                if (res.success) {\n                    return res;\n                }\n                throw new Error(res.error);\n            });\n    }\n\n    async getEventsOfLatestBlock(\n        options: {\n            only_confirmed?: boolean;\n        } = {}\n    ) {\n        if (!this.tronWeb.eventServer) {\n            throw new Error('No event server configured');\n        }\n\n        const qs = {} as any;\n\n        if (typeof options.only_confirmed === 'boolean') {\n            qs.only_confirmed = options.only_confirmed;\n        }\n\n        return this.tronWeb.eventServer\n            .request<EventResponse>(`v1/blocks/latest/events?${new URLSearchParams(qs).toString()}`)\n            .then((res) => {\n                if (res.success) {\n                    return res;\n                }\n                throw new Error(res.error);\n            });\n    }\n}\n","import { TronWeb } from '../tronweb.js';\nimport utils from '../utils/index.js';\nimport semver from 'semver';\n\ninterface PluginConstructorOptions {\n    disablePlugins?: boolean;\n}\n\ninterface PluginClassInterface {\n    new (tronWeb: TronWeb): {\n        pluginInterface?: (options: PluginOptions) => PluginInterfaceReturn;\n    };\n}\n\ninterface PluginInterfaceReturn {\n    requires: string;\n    components?: Record<string | number | symbol, any>;\n    fullClass?: boolean;\n}\n\ntype PluginOptions = any;\n\nexport class Plugin {\n    tronWeb: TronWeb;\n    pluginNoOverride: string[];\n    disablePlugins: boolean;\n\n    constructor(tronWeb: TronWeb, options: PluginConstructorOptions = {}) {\n        if (!tronWeb || !(tronWeb instanceof TronWeb)) throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n        this.pluginNoOverride = ['register'];\n        this.disablePlugins = !!options.disablePlugins;\n    }\n\n    register(Plugin: PluginClassInterface, options?: PluginOptions) {\n        let pluginInterface: PluginInterfaceReturn = {\n            requires: '0.0.0',\n            components: {},\n        };\n        const result: {\n            libs: any[];\n            plugged: any[];\n            skipped: any[];\n            error?: string;\n        } = {\n            libs: [],\n            plugged: [],\n            skipped: [],\n            error: undefined,\n        };\n        if (this.disablePlugins) {\n            result.error = 'This instance of TronWeb has plugins disabled.';\n            return result;\n        }\n        const plugin = new Plugin(this.tronWeb);\n        if (utils.isFunction(plugin.pluginInterface)) {\n            pluginInterface = plugin.pluginInterface(options);\n        }\n        if (semver.satisfies(TronWeb.version, pluginInterface.requires)) {\n            if (pluginInterface.fullClass) {\n                // plug the entire class at the same level of tronWeb.trx\n                const className = plugin.constructor.name;\n                const classInstanceName = className.substring(0, 1).toLowerCase() + className.substring(1);\n                if (className !== classInstanceName) {\n                    Object.assign(TronWeb, {\n                        [className]: Plugin,\n                    });\n                    Object.assign(this.tronWeb, {\n                        [classInstanceName]: plugin,\n                    });\n                    result.libs.push(className);\n                }\n            } else {\n                // plug methods into a class, like trx\n                for (const component in pluginInterface.components) {\n                    // eslint-disable-next-line no-prototype-builtins\n                    if (!this.tronWeb.hasOwnProperty(component)) {\n                        continue;\n                    }\n                    const methods = pluginInterface.components[component];\n                    const pluginNoOverride = (this.tronWeb as any)[component].pluginNoOverride || [];\n                    for (const method in methods) {\n                        if (\n                            method === 'constructor' ||\n                            ((this.tronWeb as any)[component][method] &&\n                                (pluginNoOverride.includes(method) || // blacklisted methods\n                                    /^_/.test(method))) // private methods\n                        ) {\n                            result.skipped.push(method);\n                            continue;\n                        }\n                        (this.tronWeb as any)[component][method] = methods[method].bind((this.tronWeb as any)[component]);\n                        result.plugged.push(method);\n                    }\n                }\n            }\n        } else {\n            throw new Error('The plugin is not compatible with this version of TronWeb');\n        }\n        return result;\n    }\n}\n","import axios, { Method, RawAxiosRequestHeaders, AxiosHeaders, HeadersDefaults } from 'axios';\nimport { hasProperties, isObject, isValidURL } from '../../utils/validations.js';\n\nexport type HeadersType = RawAxiosRequestHeaders | AxiosHeaders | Partial<HeadersDefaults>;\n\nexport interface HttpProviderInstance {\n    request<R = any>(config: any): Promise<R>;\n}\n\nexport default class HttpProvider {\n    host: string;\n    timeout: number;\n    user: string;\n    password: string;\n    headers: HeadersType;\n    statusPage: string;\n    instance: HttpProviderInstance;\n    constructor(host: string, timeout = 30000, user = '', password = '', headers: HeadersType = {}, statusPage = '/') {\n        if (!isValidURL(host)) throw new Error('Invalid URL provided to HttpProvider');\n\n        if (isNaN(timeout) || timeout < 0) throw new Error('Invalid timeout duration provided');\n\n        if (!isObject(headers)) throw new Error('Invalid headers object provided');\n\n        host = host.replace(/\\/+$/, '');\n\n        this.host = host;\n        this.timeout = timeout;\n        this.user = user;\n        this.password = password;\n        this.headers = headers;\n        this.statusPage = statusPage;\n\n        this.instance = axios.create({\n            baseURL: host,\n            timeout: timeout,\n            headers: headers,\n            auth: user\n                ? {\n                      username: user,\n                      password,\n                  }\n                : undefined,\n        });\n    }\n\n    setStatusPage(statusPage = '/') {\n        this.statusPage = statusPage;\n    }\n\n    async isConnected(statusPage = this.statusPage) {\n        return this.request(statusPage)\n            .then((data) => {\n                return hasProperties(data as Record<string, string>, 'blockID', 'block_header');\n            })\n            .catch(() => false);\n    }\n\n    request<T = unknown>(url: string, payload = {}, method: Method = 'get'): Promise<T> {\n        method = method.toLowerCase() as Method;\n\n        return this.instance\n            .request<{ data: T }>({\n                data: method == 'post' && Object.keys(payload).length ? payload : null,\n                params: method == 'get' && payload,\n                url,\n                method,\n            })\n            .then(({ data }) => data);\n    }\n}\n","import HttpProvider from './HttpProvider.js';\nexport interface Providers {\n    HttpProvider: typeof HttpProvider;\n}\nexport const providers: Providers = { HttpProvider };\nexport { HttpProvider };\n","import { TronWeb } from '../tronweb.js';\nimport utils from '../utils/index.js';\nimport { keccak256, toUtf8Bytes, recoverAddress, SigningKey, Signature } from '../utils/ethersUtils.js';\nimport { ADDRESS_PREFIX } from '../utils/address.js';\nimport { Validator } from '../paramValidator/index.js';\nimport { txCheck } from '../utils/transaction.js';\nimport { ecRecover } from '../utils/crypto.js';\nimport { Block } from '../types/APIResponse.js';\nimport {\n    Token,\n    Account,\n    AccountNetMessage,\n    Witness,\n    TransactionSignWeight,\n    BroadcastReturn,\n    AddressOptions,\n    Proposal,\n    ChainParameter,\n    BroadcastHexReturn,\n    AccountResourceMessage,\n    Address,\n    Exchange,\n    TransactionInfo,\n} from '../types/Trx.js';\nimport { SignedTransaction, Transaction } from '../types/Transaction.js';\nimport { TypedDataDomain, TypedDataField } from '../utils/typedData.js';\nimport { Resource } from '../types/TransactionBuilder';\n\nconst TRX_MESSAGE_HEADER = '\\x19TRON Signed Message:\\n32';\n// it should be: '\\x15TRON Signed Message:\\n32';\nconst ETH_MESSAGE_HEADER = '\\x19Ethereum Signed Message:\\n32';\n\nfunction toHex(value: string) {\n    return TronWeb.address.toHex(value);\n}\n\ntype SignedStringOrSignedTransaction<T extends string | Transaction | SignedTransaction> = T extends string\n    ? string\n    : SignedTransaction & T;\n\nexport class Trx {\n    private tronWeb: TronWeb;\n    private cache: { contracts: Record<string, any> };\n    private validator: Validator;\n\n    signMessage;\n    sendAsset;\n    send;\n    sendTrx;\n    broadcast;\n    broadcastHex;\n    signTransaction;\n\n    constructor(tronWeb: TronWeb) {\n        this.tronWeb = tronWeb;\n\n        this.cache = {\n            contracts: {},\n        };\n        this.validator = new Validator();\n        this.signMessage = this.sign;\n        this.sendAsset = this.sendToken;\n        this.send = this.sendTransaction;\n        this.sendTrx = this.sendTransaction;\n        this.broadcast = this.sendRawTransaction;\n        this.broadcastHex = this.sendHexTransaction;\n        this.signTransaction = this.sign;\n    }\n\n    _parseToken(token: any): Token {\n        return {\n            ...token,\n            name: this.tronWeb.toUtf8(token.name),\n            abbr: token.abbr && this.tronWeb.toUtf8(token.abbr),\n            description: token.description && this.tronWeb.toUtf8(token.description),\n            url: token.url && this.tronWeb.toUtf8(token.url),\n        };\n    }\n\n    getCurrentBlock(): Promise<Block> {\n        return this.tronWeb.fullNode.request('wallet/getnowblock');\n    }\n\n    getConfirmedCurrentBlock(): Promise<Block> {\n        return this.tronWeb.solidityNode.request('walletsolidity/getnowblock');\n    }\n\n    async getBlock(block: 'earliest' | 'latest' | number | string | false = this.tronWeb.defaultBlock): Promise<Block> {\n        if (block === false) {\n            throw new Error('No block identifier provided');\n        }\n\n        if (block == 'earliest') block = 0;\n\n        if (block == 'latest') return this.getCurrentBlock();\n\n        if (isNaN(+block) && utils.isHex(block.toString())) return this.getBlockByHash(block as string);\n\n        return this.getBlockByNumber(block as number);\n    }\n\n    async getBlockByHash(blockHash: string): Promise<Block> {\n        const block = await this.tronWeb.fullNode.request<Block>(\n            'wallet/getblockbyid',\n            {\n                value: blockHash,\n            },\n            'post'\n        );\n        if (!Object.keys(block).length) {\n            throw new Error('Block not found');\n        }\n        return block;\n    }\n\n    async getBlockByNumber(blockID: number): Promise<Block> {\n        if (!utils.isInteger(blockID) || blockID < 0) {\n            throw new Error('Invalid block number provided');\n        }\n\n        return this.tronWeb.fullNode\n            .request<Block>(\n                'wallet/getblockbynum',\n                {\n                    num: parseInt(blockID),\n                },\n                'post'\n            )\n            .then((block) => {\n                if (!Object.keys(block).length) {\n                    throw new Error('Block not found');\n                }\n\n                return block;\n            });\n    }\n\n    async getBlockTransactionCount(\n        block: 'earliest' | 'latest' | number | string | false = this.tronWeb.defaultBlock\n    ): Promise<number> {\n        const { transactions = [] } = await this.getBlock(block);\n        return transactions.length;\n    }\n\n    async getTransactionFromBlock(\n        block: 'earliest' | 'latest' | number | string | false = this.tronWeb.defaultBlock,\n        index: number\n    ): Promise<Transaction> {\n        const { transactions } = await this.getBlock(block);\n        if (!transactions) {\n            throw new Error('Transaction not found in block');\n        }\n        if (index >= 0 && index < transactions.length) return transactions[index];\n        else throw new Error('Invalid transaction index provided');\n    }\n\n    async getTransactionsFromBlock(\n        block: 'earliest' | 'latest' | number | string | false = this.tronWeb.defaultBlock\n    ): Promise<Transaction[]> {\n        const { transactions } = await this.getBlock(block);\n        if (!transactions) {\n            throw new Error('Transaction not found in block');\n        }\n        return transactions;\n    }\n\n    async getTransaction(transactionID: string): Promise<Transaction> {\n        const transaction = await this.tronWeb.fullNode.request<Transaction>(\n            'wallet/gettransactionbyid',\n            {\n                value: transactionID,\n            },\n            'post'\n        );\n        if (!Object.keys(transaction).length) {\n            throw new Error('Transaction not found');\n        }\n        return transaction;\n    }\n\n    async getConfirmedTransaction(transactionID: string): Promise<Transaction> {\n        const transaction = await this.tronWeb.solidityNode.request<Transaction>(\n            'walletsolidity/gettransactionbyid',\n            {\n                value: transactionID,\n            },\n            'post'\n        );\n        if (!Object.keys(transaction).length) {\n            throw new Error('Transaction not found');\n        }\n        return transaction;\n    }\n\n    getUnconfirmedTransactionInfo(transactionID: string): Promise<TransactionInfo> {\n        return this.tronWeb.fullNode.request('wallet/gettransactioninfobyid', { value: transactionID }, 'post');\n    }\n\n    getTransactionInfo(transactionID: string): Promise<TransactionInfo> {\n        return this.tronWeb.solidityNode.request('walletsolidity/gettransactioninfobyid', { value: transactionID }, 'post');\n    }\n\n    getTransactionsToAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0): Promise<Transaction[]> {\n        return this.getTransactionsRelated(this.tronWeb.address.toHex(address as string), 'to', limit, offset);\n    }\n\n    getTransactionsFromAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0): Promise<Transaction[]> {\n        return this.getTransactionsRelated(this.tronWeb.address.toHex(address as string), 'from', limit, offset);\n    }\n\n    async getTransactionsRelated(\n        address = this.tronWeb.defaultAddress.hex,\n        direction = 'all',\n        limit = 30,\n        offset = 0\n    ): Promise<Transaction[]> {\n        if (!['to', 'from', 'all'].includes(direction)) {\n            throw new Error('Invalid direction provided: Expected \"to\", \"from\" or \"all\"');\n        }\n\n        if (direction == 'all') {\n            const [from, to] = await Promise.all([\n                this.getTransactionsRelated(address, 'from', limit, offset),\n                this.getTransactionsRelated(address, 'to', limit, offset),\n            ]);\n\n            return [\n                ...from.map((tx) => (((tx as any).direction = 'from'), tx)),\n                ...to.map((tx) => (((tx as any).direction = 'to'), tx)),\n            ].sort((a, b) => {\n                return b.raw_data.timestamp - a.raw_data.timestamp;\n            });\n        }\n\n        if (!this.tronWeb.isAddress(address as string)) {\n            throw new Error('Invalid address provided');\n        }\n\n        if (!utils.isInteger(limit) || limit < 0 || (offset && limit < 1)) {\n            throw new Error('Invalid limit provided');\n        }\n\n        if (!utils.isInteger(offset) || offset < 0) {\n            throw new Error('Invalid offset provided');\n        }\n\n        address = this.tronWeb.address.toHex(address as string);\n\n        return this.tronWeb.solidityNode\n            .request<{ transaction: Transaction[] }>(\n                `walletextension/gettransactions${direction}this`,\n                {\n                    account: {\n                        address,\n                    },\n                    offset,\n                    limit,\n                },\n                'post'\n            )\n            .then(({ transaction }) => {\n                return transaction;\n            });\n    }\n\n    async getAccount(address = this.tronWeb.defaultAddress.hex): Promise<Account> {\n        if (!this.tronWeb.isAddress(address as Address)) {\n            throw new Error('Invalid address provided');\n        }\n\n        address = this.tronWeb.address.toHex(address as string);\n\n        return this.tronWeb.solidityNode.request(\n            'walletsolidity/getaccount',\n            {\n                address,\n            },\n            'post'\n        );\n    }\n\n    getAccountById(id: string): Promise<Account> {\n        return this.getAccountInfoById(id, { confirmed: true });\n    }\n\n    async getAccountInfoById(id: string, options: { confirmed: boolean }): Promise<Account> {\n        this.validator.notValid([\n            {\n                name: 'accountId',\n                type: 'hex',\n                value: id,\n            },\n            {\n                name: 'accountId',\n                type: 'string',\n                lte: 32,\n                gte: 8,\n                value: id,\n            },\n        ]);\n\n        if (id.startsWith('0x')) {\n            id = id.slice(2);\n        }\n\n        return this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(\n            `wallet${options.confirmed ? 'solidity' : ''}/getaccountbyid`,\n            {\n                account_id: id,\n            },\n            'post'\n        );\n    }\n\n    async getBalance(address = this.tronWeb.defaultAddress.hex): Promise<number> {\n        const { balance = 0 } = await this.getAccount(address);\n        return balance;\n    }\n\n    async getUnconfirmedAccount(address = this.tronWeb.defaultAddress.hex): Promise<Account> {\n        if (!this.tronWeb.isAddress(address as Address)) {\n            throw new Error('Invalid address provided');\n        }\n\n        address = this.tronWeb.address.toHex(address as string);\n\n        return this.tronWeb.fullNode.request(\n            'wallet/getaccount',\n            {\n                address,\n            },\n            'post'\n        );\n    }\n\n    getUnconfirmedAccountById(id: string): Promise<Account> {\n        return this.getAccountInfoById(id, { confirmed: false });\n    }\n\n    async getUnconfirmedBalance(address = this.tronWeb.defaultAddress.hex): Promise<number> {\n        const { balance = 0 } = await this.getUnconfirmedAccount(address);\n        return balance;\n    }\n\n    async getBandwidth(address = this.tronWeb.defaultAddress.hex): Promise<number> {\n        if (!this.tronWeb.isAddress(address as Address)) {\n            throw new Error('Invalid address provided');\n        }\n\n        address = this.tronWeb.address.toHex(address as string);\n\n        return this.tronWeb.fullNode\n            .request<AccountNetMessage>(\n                'wallet/getaccountnet',\n                {\n                    address,\n                },\n                'post'\n            )\n            .then(({ freeNetUsed = 0, freeNetLimit = 0, NetUsed = 0, NetLimit = 0 }) => {\n                return freeNetLimit - freeNetUsed + (NetLimit - NetUsed);\n            });\n    }\n\n    async getTokensIssuedByAddress(address = this.tronWeb.defaultAddress.hex): Promise<Record<string, Token>> {\n        if (!this.tronWeb.isAddress(address as Address)) {\n            throw new Error('Invalid address provided');\n        }\n\n        address = this.tronWeb.address.toHex(address as string);\n\n        return this.tronWeb.fullNode\n            .request<{ assetIssue: Token[] }>(\n                'wallet/getassetissuebyaccount',\n                {\n                    address,\n                },\n                'post'\n            )\n            .then(({ assetIssue }) => {\n                if (!assetIssue) return {};\n\n                const tokens = assetIssue\n                    .map((token) => {\n                        return this._parseToken(token);\n                    })\n                    .reduce((tokens, token) => {\n                        return (tokens[token.name] = token), tokens;\n                    }, {} as Record<string, Token>);\n\n                return tokens;\n            });\n    }\n\n    async getTokenFromID(tokenID: string | number): Promise<Token> {\n        if (utils.isInteger(tokenID)) tokenID = tokenID.toString();\n\n        if (!utils.isString(tokenID) || !tokenID.length) {\n            throw new Error('Invalid token ID provided');\n        }\n\n        return this.tronWeb.fullNode\n            .request<Token>(\n                'wallet/getassetissuebyname',\n                {\n                    value: this.tronWeb.fromUtf8(tokenID),\n                },\n                'post'\n            )\n            .then((token) => {\n                if (!token.name) {\n                    throw new Error('Token does not exist');\n                }\n\n                return this._parseToken(token);\n            });\n    }\n\n    async listNodes(): Promise<string[]> {\n        const { nodes = [] } = await this.tronWeb.fullNode.request<{ nodes: { address: { host: string; port: number } }[] }>(\n            'wallet/listnodes'\n        );\n        return nodes.map(({ address: { host, port } }) => `${this.tronWeb.toUtf8(host)}:${port}`);\n    }\n\n    async getBlockRange(start = 0, end = 30): Promise<Block[]> {\n        if (!utils.isInteger(start) || start < 0) {\n            throw new Error('Invalid start of range provided');\n        }\n\n        if (!utils.isInteger(end) || end < start) {\n            throw new Error('Invalid end of range provided');\n        }\n\n        if (end + 1 - start > 100) {\n            throw new Error('Invalid range size, which should be no more than 100.');\n        }\n\n        return this.tronWeb.fullNode\n            .request<{ block: Block[] }>(\n                'wallet/getblockbylimitnext',\n                {\n                    startNum: parseInt(start),\n                    endNum: parseInt(end) + 1,\n                },\n                'post'\n            )\n            .then(({ block = [] }) => block);\n    }\n\n    async listSuperRepresentatives(): Promise<Witness[]> {\n        const { witnesses = [] } = await this.tronWeb.fullNode.request<{ witnesses: Witness[] }>('wallet/listwitnesses');\n        return witnesses;\n    }\n\n    async listTokens(limit = 0, offset = 0): Promise<Token[]> {\n        if (!utils.isInteger(limit) || limit < 0 || (offset && limit < 1)) {\n            throw new Error('Invalid limit provided');\n        }\n\n        if (!utils.isInteger(offset) || offset < 0) {\n            throw new Error('Invalid offset provided');\n        }\n\n        if (!limit) {\n            return this.tronWeb.fullNode\n                .request<{ assetIssue: Token[] }>('wallet/getassetissuelist')\n                .then(({ assetIssue = [] }) => assetIssue.map((token) => this._parseToken(token)));\n        }\n\n        return this.tronWeb.fullNode\n            .request<{ assetIssue: Token[] }>(\n                'wallet/getpaginatedassetissuelist',\n                {\n                    offset: parseInt(offset),\n                    limit: parseInt(limit),\n                },\n                'post'\n            )\n            .then(({ assetIssue = [] }) => assetIssue.map((token) => this._parseToken(token)));\n    }\n\n    async timeUntilNextVoteCycle(): Promise<number> {\n        const { num = -1 } = await this.tronWeb.fullNode.request<{ num: number }>('wallet/getnextmaintenancetime');\n        if (num == -1) {\n            throw new Error('Failed to get time until next vote cycle');\n        }\n        return Math.floor(num / 1000);\n    }\n\n    async getContract(contractAddress: string): Promise<any> {\n        if (!this.tronWeb.isAddress(contractAddress)) {\n            throw new Error('Invalid contract address provided');\n        }\n\n        if (this.cache.contracts[contractAddress]) {\n            return this.cache.contracts[contractAddress];\n        }\n\n        contractAddress = this.tronWeb.address.toHex(contractAddress);\n\n        const contract = await this.tronWeb.fullNode.request<any>('wallet/getcontract', {\n            value: contractAddress,\n        });\n        if (contract.Error) {\n            throw new Error('Contract does not exist');\n        }\n        this.cache.contracts[contractAddress] = contract;\n        return contract;\n    }\n\n    ecRecover(transaction: SignedTransaction) {\n        return Trx.ecRecover(transaction);\n    }\n\n    static ecRecover(transaction: SignedTransaction): Address | Address[] {\n        if (!txCheck(transaction)) {\n            throw new Error('Invalid transaction');\n        }\n        if (!transaction.signature?.length) {\n            throw new Error('Transaction is not signed');\n        }\n        if (transaction.signature.length === 1) {\n            const tronAddress = ecRecover(transaction.txID, transaction.signature[0]);\n            return TronWeb.address.fromHex(tronAddress);\n        }\n        return transaction.signature.map((sig) => {\n            const tronAddress = ecRecover(transaction.txID, sig);\n            return TronWeb.address.fromHex(tronAddress);\n        });\n    }\n\n    async verifyMessage(message: string, signature: string, address = this.tronWeb.defaultAddress.base58, useTronHeader = true) {\n        if (!utils.isHex(message)) {\n            throw new Error('Expected hex message input');\n        }\n\n        if (Trx.verifySignature(message, address as string, signature, useTronHeader)) {\n            return true;\n        }\n\n        throw new Error('Signature does not match');\n    }\n\n    static verifySignature(message: string, address: string, signature: string, useTronHeader = true) {\n        message = message.replace(/^0x/, '');\n        const messageBytes = [\n            ...toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n            ...utils.code.hexStr2byteArray(message),\n        ];\n\n        const messageDigest = keccak256(new Uint8Array(messageBytes));\n        const recovered = recoverAddress(messageDigest, Signature.from(`0x${signature.replace(/^0x/, '')}`));\n\n        const tronAddress = ADDRESS_PREFIX + recovered.substr(2);\n        const base58Address = TronWeb.address.fromHex(tronAddress);\n\n        return base58Address == TronWeb.address.fromHex(address);\n    }\n\n    async verifyMessageV2(message: string | Uint8Array | Array<number>, signature: string) {\n        return Trx.verifyMessageV2(message, signature);\n    }\n\n    static verifyMessageV2(message: string | Uint8Array | Array<number>, signature: string) {\n        return utils.message.verifyMessage(message, signature);\n    }\n\n    verifyTypedData(\n        domain: TypedDataDomain,\n        types: Record<string, TypedDataField[]>,\n        value: Record<string, any>,\n        signature: string,\n        address = this.tronWeb.defaultAddress.base58\n    ) {\n        if (Trx.verifyTypedData(domain, types, value, signature, address as string)) return true;\n\n        throw new Error('Signature does not match');\n    }\n\n    static verifyTypedData(\n        domain: TypedDataDomain,\n        types: Record<string, TypedDataField[]>,\n        value: Record<string, any>,\n        signature: string,\n        address: string\n    ) {\n        const messageDigest = utils._TypedDataEncoder.hash(domain, types, value);\n        const recovered = recoverAddress(messageDigest, Signature.from(`0x${signature.replace(/^0x/, '')}`));\n\n        const tronAddress = ADDRESS_PREFIX + recovered.substr(2);\n        const base58Address = TronWeb.address.fromHex(tronAddress);\n\n        return base58Address == TronWeb.address.fromHex(address);\n    }\n\n    async sign<T extends SignedTransaction | Transaction | string>(\n        transaction: T,\n        privateKey = this.tronWeb.defaultPrivateKey,\n        useTronHeader = true,\n        multisig = false\n    ): Promise<SignedStringOrSignedTransaction<T>> {\n        // Message signing\n        if (utils.isString(transaction)) {\n            if (!utils.isHex(transaction)) {\n                throw new Error('Expected hex message input');\n            }\n\n            return Trx.signString(transaction, privateKey as string, useTronHeader) as SignedStringOrSignedTransaction<T>;\n        }\n\n        if (!utils.isObject(transaction)) {\n            throw new Error('Invalid transaction provided');\n        }\n\n        if (!multisig && (transaction as SignedTransaction).signature) {\n            throw new Error('Transaction is already signed');\n        }\n\n        if (!multisig) {\n            const address = this.tronWeb.address\n                .toHex(this.tronWeb.address.fromPrivateKey(privateKey as string) as string)\n                .toLowerCase();\n\n            if (address !== this.tronWeb.address.toHex(transaction.raw_data.contract[0].parameter.value.owner_address)) {\n                throw new Error('Private key does not match address in transaction');\n            }\n\n            if (!txCheck(transaction)) {\n                throw new Error('Invalid transaction');\n            }\n        }\n        return utils.crypto.signTransaction(privateKey as string, transaction) as SignedStringOrSignedTransaction<T>;\n    }\n\n    static signString(message: string, privateKey: string, useTronHeader = true) {\n        message = message.replace(/^0x/, '');\n        const value = `0x${privateKey.replace(/^0x/, '')}`;\n        const signingKey = new SigningKey(value);\n        const messageBytes = [\n            ...toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n            ...utils.code.hexStr2byteArray(message),\n        ];\n        const messageDigest = keccak256(new Uint8Array(messageBytes));\n        const signature = signingKey.sign(messageDigest);\n        const signatureHex = ['0x', signature.r.substring(2), signature.s.substring(2), Number(signature.v).toString(16)].join(\n            ''\n        );\n        return signatureHex;\n    }\n\n    /**\n     * sign message v2 for verified header length\n     *\n     * @param {message to be signed, should be Bytes or string} message\n     * @param {privateKey for signature} privateKey\n     * @param {reserved} options\n     * @param {callback function} callback\n     */\n    signMessageV2(message: string | Uint8Array | Array<number>, privateKey = this.tronWeb.defaultPrivateKey) {\n        return Trx.signMessageV2(message, privateKey as string);\n    }\n\n    static signMessageV2(message: string | Uint8Array | Array<number>, privateKey: string) {\n        return utils.message.signMessage(message, privateKey);\n    }\n\n    _signTypedData(\n        domain: TypedDataDomain,\n        types: Record<string, TypedDataField[]>,\n        value: Record<string, any>,\n        privateKey = this.tronWeb.defaultPrivateKey\n    ) {\n        return Trx._signTypedData(domain, types, value, privateKey as string);\n    }\n\n    static _signTypedData(\n        domain: TypedDataDomain,\n        types: Record<string, TypedDataField[]>,\n        value: Record<string, any>,\n        privateKey: string\n    ) {\n        return utils.crypto._signTypedData(domain, types, value, privateKey);\n    }\n\n    async multiSign(transaction: Transaction, privateKey = this.tronWeb.defaultPrivateKey, permissionId = 0) {\n        if (!utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract) {\n            throw new Error('Invalid transaction provided');\n        }\n\n        // If owner permission or permission id exists in transaction, do sign directly\n        // If no permission id inside transaction or user passes permission id, use old way to reset permission id\n        if (!transaction.raw_data.contract[0].Permission_id && permissionId > 0) {\n            // set permission id\n            transaction.raw_data.contract[0].Permission_id = permissionId;\n\n            // check if private key insides permission list\n            const address = this.tronWeb.address\n                .toHex(this.tronWeb.address.fromPrivateKey(privateKey as string) as string)\n                .toLowerCase();\n            const signWeight = await this.getSignWeight(transaction, permissionId);\n\n            if (signWeight.result.code === 'PERMISSION_ERROR') {\n                throw new Error(signWeight.result.message);\n            }\n\n            let foundKey = false;\n            signWeight.permission.keys.map((key) => {\n                if (key.address === address) foundKey = true;\n            });\n\n            if (!foundKey) {\n                throw new Error(privateKey + ' has no permission to sign');\n            }\n\n            if (signWeight.approved_list && signWeight.approved_list.indexOf(address) != -1) {\n                throw new Error(privateKey + ' already sign transaction');\n            }\n\n            // reset transaction\n            if (signWeight.transaction && signWeight.transaction.transaction) {\n                transaction = signWeight.transaction.transaction;\n                if (permissionId > 0) {\n                    transaction.raw_data.contract[0].Permission_id = permissionId;\n                }\n            } else {\n                throw new Error('Invalid transaction provided');\n            }\n        }\n\n        // sign\n        if (!txCheck(transaction)) {\n            throw new Error('Invalid transaction');\n        }\n        return utils.crypto.signTransaction(privateKey as string, transaction);\n    }\n\n    async getApprovedList(transaction: Transaction): Promise<{ approved_list: string[] }> {\n        if (!utils.isObject(transaction)) {\n            throw new Error('Invalid transaction provided');\n        }\n\n        return this.tronWeb.fullNode.request('wallet/getapprovedlist', transaction, 'post');\n    }\n\n    async getSignWeight(transaction: Transaction, permissionId?: number): Promise<TransactionSignWeight> {\n        if (!utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract)\n            throw new Error('Invalid transaction provided');\n\n        if (utils.isInteger(permissionId)) {\n            transaction.raw_data.contract[0].Permission_id = parseInt(permissionId);\n        } else if (typeof transaction.raw_data.contract[0].Permission_id !== 'number') {\n            transaction.raw_data.contract[0].Permission_id = 0;\n        }\n\n        return this.tronWeb.fullNode.request('wallet/getsignweight', transaction, 'post');\n    }\n\n    async sendRawTransaction<T extends SignedTransaction>(signedTransaction: T): Promise<BroadcastReturn<T>> {\n        if (!utils.isObject(signedTransaction)) {\n            throw new Error('Invalid transaction provided');\n        }\n\n        if (!signedTransaction.signature || !utils.isArray(signedTransaction.signature)) {\n            throw new Error('Transaction is not signed');\n        }\n\n        const result = await this.tronWeb.fullNode.request<Omit<BroadcastReturn<T>, 'transaction'>>(\n            'wallet/broadcasttransaction',\n            signedTransaction,\n            'post'\n        );\n        return {\n            ...result,\n            transaction: signedTransaction,\n        };\n    }\n\n    async sendHexTransaction(signedHexTransaction: string) {\n        if (!utils.isHex(signedHexTransaction)) {\n            throw new Error('Invalid hex transaction provided');\n        }\n\n        const params = {\n            transaction: signedHexTransaction,\n        };\n\n        const result = await this.tronWeb.fullNode.request<BroadcastHexReturn>('wallet/broadcasthex', params, 'post');\n        if (result.result) {\n            return {\n                ...result,\n                transaction: JSON.parse(result.transaction) as Transaction,\n                hexTransaction: signedHexTransaction,\n            };\n        }\n        return result;\n    }\n\n    async sendTransaction(to: string, amount: number, options: AddressOptions = {}): Promise<BroadcastReturn<SignedTransaction>> {\n        if (typeof options === 'string') options = { privateKey: options };\n\n        if (!this.tronWeb.isAddress(to)) {\n            throw new Error('Invalid recipient provided');\n        }\n\n        if (!utils.isInteger(amount) || amount <= 0) {\n            throw new Error('Invalid amount provided');\n        }\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey as string,\n            address: this.tronWeb.defaultAddress.hex as string,\n            ...options,\n        };\n\n        if (!options.privateKey && !options.address) {\n            throw new Error('Function requires either a private key or address to be set');\n        }\n\n        const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n        const transaction = await this.tronWeb.transactionBuilder.sendTrx(to, amount, address as Address);\n        const signedTransaction = await this.sign(transaction, options.privateKey);\n        const result = await this.sendRawTransaction(signedTransaction);\n        return result;\n    }\n\n    async sendToken(\n        to: string,\n        amount: number,\n        tokenID: string | number,\n        options: AddressOptions = {}\n    ): Promise<BroadcastReturn<SignedTransaction>> {\n        if (typeof options === 'string') options = { privateKey: options };\n\n        if (!this.tronWeb.isAddress(to)) {\n            throw new Error('Invalid recipient provided');\n        }\n\n        if (!utils.isInteger(amount) || amount <= 0) {\n            throw new Error('Invalid amount provided');\n        }\n\n        if (utils.isInteger(tokenID)) tokenID = tokenID.toString();\n\n        if (!utils.isString(tokenID)) {\n            throw new Error('Invalid token ID provided');\n        }\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey as string,\n            address: this.tronWeb.defaultAddress.hex as string,\n            ...options,\n        };\n\n        if (!options.privateKey && !options.address) {\n            throw new Error('Function requires either a private key or address to be set');\n        }\n\n        const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n        const transaction = await this.tronWeb.transactionBuilder.sendToken(to, amount, tokenID, address as Address);\n        const signedTransaction = await this.sign(transaction, options.privateKey);\n        const result = await this.sendRawTransaction(signedTransaction);\n        return result;\n    }\n\n    /**\n     * Freezes an amount of TRX.\n     * Will give bandwidth OR Energy and TRON Power(voting rights)\n     * to the owner of the frozen tokens.\n     *\n     * @param amount - is the number of frozen trx\n     * @param duration - is the duration in days to be frozen\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async freezeBalance(\n        amount = 0,\n        duration = 3,\n        resource: Resource = 'BANDWIDTH',\n        options: AddressOptions = {},\n        receiverAddress?: string\n    ): Promise<BroadcastReturn<SignedTransaction>> {\n        if (typeof options === 'string') options = { privateKey: options };\n\n        if (!['BANDWIDTH', 'ENERGY'].includes(resource)) {\n            throw new Error('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n        }\n\n        if (!utils.isInteger(amount) || amount <= 0) {\n            throw new Error('Invalid amount provided');\n        }\n\n        if (!utils.isInteger(duration) || duration < 3) {\n            throw new Error('Invalid duration provided, minimum of 3 days');\n        }\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey as string,\n            address: this.tronWeb.defaultAddress.hex as string,\n            ...options,\n        };\n\n        if (!options.privateKey && !options.address) {\n            throw new Error('Function requires either a private key or address to be set');\n        }\n\n        const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n        const freezeBalance = await this.tronWeb.transactionBuilder.freezeBalance(\n            amount,\n            duration,\n            resource,\n            address as Address,\n            receiverAddress\n        );\n        const signedTransaction = await this.sign(freezeBalance, options.privateKey);\n        const result = await this.sendRawTransaction(signedTransaction);\n        return result;\n    }\n\n    /**\n     * Unfreeze TRX that has passed the minimum freeze duration.\n     * Unfreezing will remove bandwidth and TRON Power.\n     *\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async unfreezeBalance(\n        resource: Resource = 'BANDWIDTH',\n        options: AddressOptions = {},\n        receiverAddress: string\n    ): Promise<BroadcastReturn<SignedTransaction>> {\n        if (typeof options === 'string') options = { privateKey: options };\n\n        if (!['BANDWIDTH', 'ENERGY'].includes(resource)) {\n            throw new Error('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n        }\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey as string,\n            address: this.tronWeb.defaultAddress.hex as string,\n            ...options,\n        };\n\n        if (!options.privateKey && !options.address) {\n            throw new Error('Function requires either a private key or address to be set');\n        }\n\n        const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n        const unfreezeBalance = await this.tronWeb.transactionBuilder.unfreezeBalance(\n            resource,\n            address as Address,\n            receiverAddress\n        );\n        const signedTransaction = await this.sign(unfreezeBalance, options.privateKey);\n        const result = await this.sendRawTransaction(signedTransaction);\n        return result;\n    }\n\n    /**\n     * Modify account name\n     * Note: Username is allowed to edit only once.\n     *\n     * @param privateKey - Account private Key\n     * @param accountName - name of the account\n     * @param callback\n     *\n     * @return modified Transaction Object\n     */\n    async updateAccount(accountName: string, options: AddressOptions = {}): Promise<BroadcastReturn<SignedTransaction>> {\n        if (typeof options === 'string') options = { privateKey: options };\n\n        if (!utils.isString(accountName) || !accountName.length) {\n            throw new Error('Name must be a string');\n        }\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey as string,\n            address: this.tronWeb.defaultAddress.hex as string,\n            ...options,\n        };\n\n        if (!options.privateKey && !options.address) throw Error('Function requires either a private key or address to be set');\n\n        const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n        const updateAccount = await this.tronWeb.transactionBuilder.updateAccount(accountName, address as Address);\n        const signedTransaction = await this.sign(updateAccount, options.privateKey);\n        const result = await this.sendRawTransaction(signedTransaction);\n        return result;\n    }\n\n    /**\n     * Gets a network modification proposal by ID.\n     */\n    async getProposal(proposalID: number): Promise<Proposal> {\n        if (!utils.isInteger(proposalID) || proposalID < 0) {\n            throw new Error('Invalid proposalID provided');\n        }\n\n        return this.tronWeb.fullNode.request(\n            'wallet/getproposalbyid',\n            {\n                id: parseInt(proposalID),\n            },\n            'post'\n        );\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    async listProposals(): Promise<Proposal[]> {\n        const { proposals = [] } = await this.tronWeb.fullNode.request<{ proposals: Proposal[] }>(\n            'wallet/listproposals',\n            {},\n            'post'\n        );\n        return proposals;\n    }\n\n    /**\n     * Lists all parameters available for network modification proposals.\n     */\n    async getChainParameters(): Promise<ChainParameter[]> {\n        const { chainParameter = [] } = await this.tronWeb.fullNode.request<{ chainParameter: ChainParameter[] }>(\n            'wallet/getchainparameters',\n            {},\n            'post'\n        );\n        return chainParameter;\n    }\n\n    /**\n     * Get the account resources\n     */\n    async getAccountResources(address = this.tronWeb.defaultAddress.hex): Promise<AccountResourceMessage> {\n        if (!this.tronWeb.isAddress(address as Address)) {\n            throw new Error('Invalid address provided');\n        }\n\n        return this.tronWeb.fullNode.request(\n            'wallet/getaccountresource',\n            {\n                address: this.tronWeb.address.toHex(address as string),\n            },\n            'post'\n        );\n    }\n\n    /**\n     * Query the amount of resources of a specific resourceType delegated by fromAddress to toAddress\n     */\n    async getDelegatedResourceV2(\n        fromAddress = this.tronWeb.defaultAddress.hex,\n        toAddress = this.tronWeb.defaultAddress.hex,\n        options = { confirmed: true }\n    ): Promise<{\n        delegatedResource: {\n            from: string;\n            to: string;\n            frozen_balance_for_bandwidth: number;\n            frozen_balance_for_energy: number;\n            expire_time_for_bandwidth: number;\n            expire_time_for_energy: number;\n        };\n    }> {\n        if (!this.tronWeb.isAddress(fromAddress as Address)) {\n            throw new Error('Invalid address provided');\n        }\n\n        if (!this.tronWeb.isAddress(toAddress as Address)) {\n            throw new Error('Invalid address provided');\n        }\n\n        return this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(\n            `wallet${options.confirmed ? 'solidity' : ''}/getdelegatedresourcev2`,\n            {\n                fromAddress: toHex(fromAddress as string),\n                toAddress: toHex(toAddress as string),\n            },\n            'post'\n        );\n    }\n\n    /**\n     * Query the resource delegation index by an account\n     */\n    async getDelegatedResourceAccountIndexV2(\n        address = this.tronWeb.defaultAddress.hex,\n        options = { confirmed: true }\n    ): Promise<{\n        account: Address;\n        fromAccounts: Address[];\n        toAccounts: Address[];\n    }> {\n        if (!this.tronWeb.isAddress(address as Address)) {\n            throw new Error('Invalid address provided');\n        }\n\n        return this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(\n            `wallet${options.confirmed ? 'solidity' : ''}/getdelegatedresourceaccountindexv2`,\n            {\n                value: toHex(address as Address),\n            },\n            'post'\n        );\n    }\n\n    /**\n     * Query the amount of delegatable resources of the specified resource Type for target address, unit is sun.\n     */\n    async getCanDelegatedMaxSize(\n        address = this.tronWeb.defaultAddress.hex,\n        resource: Resource = 'BANDWIDTH',\n        options = { confirmed: true }\n    ): Promise<{\n        max_size: number;\n    }> {\n        if (!this.tronWeb.isAddress(address as Address)) {\n            throw new Error('Invalid address provided');\n        }\n\n        this.validator.notValid([\n            {\n                name: 'resource',\n                type: 'resource',\n                value: resource,\n                msg: 'Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"',\n            },\n        ]);\n\n        return this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(\n            `wallet${options.confirmed ? 'solidity' : ''}/getcandelegatedmaxsize`,\n            {\n                owner_address: toHex(address as Address),\n                type: resource === 'ENERGY' ? 1 : 0,\n            },\n            'post'\n        );\n    }\n\n    /**\n     * Remaining times of available unstaking API\n     */\n    async getAvailableUnfreezeCount(\n        address = this.tronWeb.defaultAddress.hex,\n        options = { confirmed: true }\n    ): Promise<{\n        count: number;\n    }> {\n        if (!this.tronWeb.isAddress(address as Address)) {\n            throw new Error('Invalid address provided');\n        }\n\n        return this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(\n            `wallet${options.confirmed ? 'solidity' : ''}/getavailableunfreezecount`,\n            {\n                owner_address: toHex(address as Address),\n            },\n            'post'\n        );\n    }\n\n    /**\n     * Query the withdrawable balance at the specified timestamp\n     */\n    async getCanWithdrawUnfreezeAmount(\n        address = this.tronWeb.defaultAddress.hex,\n        timestamp = Date.now(),\n        options = { confirmed: true }\n    ): Promise<{\n        amount: number;\n    }> {\n        if (!this.tronWeb.isAddress(address as Address)) {\n            throw new Error('Invalid address provided');\n        }\n\n        if (!utils.isInteger(timestamp) || timestamp < 0) {\n            throw new Error('Invalid timestamp provided');\n        }\n\n        return this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(\n            `wallet${options.confirmed ? 'solidity' : ''}/getcanwithdrawunfreezeamount`,\n            {\n                owner_address: toHex(address as Address),\n                timestamp: timestamp,\n            },\n            'post'\n        );\n    }\n\n    /**\n     * Get the exchange ID.\n     */\n    async getExchangeByID(exchangeID: number): Promise<Exchange> {\n        if (!utils.isInteger(exchangeID) || exchangeID < 0) {\n            throw new Error('Invalid exchangeID provided');\n        }\n\n        return this.tronWeb.fullNode.request(\n            'wallet/getexchangebyid',\n            {\n                id: exchangeID,\n            },\n            'post'\n        );\n    }\n\n    /**\n     * Lists the exchanges\n     */\n    async listExchanges() {\n        return this.tronWeb.fullNode\n            .request<{ exchanges: Exchange[] }>('wallet/listexchanges', {}, 'post')\n            .then(({ exchanges = [] }) => exchanges);\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    async listExchangesPaginated(limit = 10, offset = 0) {\n        return this.tronWeb.fullNode\n            .request<{ exchanges: Exchange[] }>(\n                'wallet/getpaginatedexchangelist',\n                {\n                    limit,\n                    offset,\n                },\n                'post'\n            )\n            .then(({ exchanges = [] }) => exchanges);\n    }\n\n    /**\n     * Get info about thre node\n     */\n    async getNodeInfo(): Promise<{\n        beginSyncNum: number;\n        block: string;\n        solidityBlock: string;\n        currentConnectCount: number;\n        activeConnectCount: number;\n        passiveConnectCount: number;\n        totalFlow: number;\n        peerInfoList: {\n            lastSyncBlock: string;\n            remainNum: number;\n            lastBlockUpdateTime: number;\n            syncFlag: boolean;\n            headBlockTimeWeBothHave: number;\n            needSyncFromPeer: boolean;\n            needSyncFromUs: boolean;\n            host: string;\n            port: number;\n            nodeId: string;\n            connectTime: number;\n            avgLatency: number;\n            syncToFetchSize: number;\n            syncToFetchSizePeekNum: number;\n            syncBlockRequestedSize: number;\n            unFetchSynNum: number;\n            blockInPorcSize: number;\n            headBlockWeBothHave: string;\n            isActive: boolean;\n            score: number;\n            nodeCount: number;\n            inFlow: number;\n            disconnectTimes: number;\n            localDisconnectReason: string;\n            remoteDisconnectReason: string;\n        };\n        configNodeInfo: {\n            codeVersion: string;\n            p2pVersion: string;\n            listenPort: number;\n            discoverEnable: boolean;\n            activeNodeSize: number;\n            passiveNodeSize: number;\n            sendNodeSize: number;\n            maxConnectCount: number;\n            sameIpMaxConnectCount: number;\n            backupListenPort: number;\n            backupMemberSize: number;\n            backupPriority: number;\n            dbVersion: number;\n            minParticipationRate: number;\n            supportConstant: boolean;\n            minTimeRatio: number;\n            maxTimeRatio: number;\n            allowCreationOfContracts: number;\n            allowAdaptiveEnergy: number;\n        };\n        machineInfo: {\n            threadCount: number;\n            deadLockThreadCount: number;\n            cpuCount: number;\n            totalMemory: number;\n            freeMemory: number;\n            cpuRate: number;\n            javaVersion: string;\n            osName: string;\n            jvmTotalMemory: number;\n            jvmFreeMemory: number;\n            processCpuRate: number;\n            memoryDescInfoList: {\n                name: string;\n                initSize: number;\n                useSize: number;\n                maxSize: number;\n                useRate: number;\n            };\n            deadLockThreadInfoList: {\n                name: string;\n                lockName: string;\n                lockOwner: string;\n                state: string;\n                blockTime: number;\n                waitTime: number;\n                stackTrace: string;\n            };\n        };\n        cheatWitnessInfoMap: Map<string, string>;\n    }> {\n        return this.tronWeb.fullNode.request('wallet/getnodeinfo', {}, 'post');\n    }\n\n    async getTokenListByName(tokenID: string | number): Promise<Token | Token[]> {\n        if (utils.isInteger(tokenID)) tokenID = tokenID.toString();\n\n        if (!utils.isString(tokenID) || !tokenID.length) {\n            throw new Error('Invalid token ID provided');\n        }\n\n        return this.tronWeb.fullNode\n            .request<({ assetIssue: Token[] } & { name: undefined }) | (Token & { assetIssue: undefined })>(\n                'wallet/getassetissuelistbyname',\n                {\n                    value: this.tronWeb.fromUtf8(tokenID),\n                },\n                'post'\n            )\n            .then((token) => {\n                if (Array.isArray(token.assetIssue)) {\n                    return token.assetIssue.map((t) => this._parseToken(t));\n                } else if (!token.name) {\n                    throw new Error('Token does not exist');\n                }\n\n                return this._parseToken(token);\n            });\n    }\n\n    getTokenByID(tokenID: number | string): Promise<Token> {\n        if (utils.isInteger(tokenID)) tokenID = tokenID.toString();\n\n        if (!utils.isString(tokenID) || !tokenID.length) {\n            throw new Error('Invalid token ID provided');\n        }\n\n        return this.tronWeb.fullNode\n            .request<Token>(\n                'wallet/getassetissuebyid',\n                {\n                    value: tokenID,\n                },\n                'post'\n            )\n            .then((token) => {\n                if (!token.name) {\n                    throw new Error('Token does not exist');\n                }\n\n                return this._parseToken(token);\n            });\n    }\n\n    async getReward(address: Address, options: { confirmed?: boolean } = {}) {\n        options.confirmed = true;\n        return this._getReward(address, options);\n    }\n\n    async getUnconfirmedReward(address: Address, options: { confirmed?: boolean } = {}) {\n        options.confirmed = false;\n        return this._getReward(address, options);\n    }\n\n    async getBrokerage(address: Address, options: { confirmed?: boolean } = {}) {\n        options.confirmed = true;\n        return this._getBrokerage(address, options);\n    }\n\n    async getUnconfirmedBrokerage(address: Address, options: { confirmed?: boolean } = {}) {\n        options.confirmed = false;\n        return this._getBrokerage(address, options);\n    }\n\n    async _getReward(address = this.tronWeb.defaultAddress.hex, options: { confirmed?: boolean }): Promise<number> {\n        this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address,\n            },\n        ]);\n\n        const data = {\n            address: toHex(address as Address),\n        };\n\n        return this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode']\n            .request<{ reward?: number }>(`wallet${options.confirmed ? 'solidity' : ''}/getReward`, data, 'post')\n            .then((result = { reward: undefined }) => {\n                if (typeof result.reward === 'undefined') {\n                    throw new Error('Not found.');\n                }\n\n                return result.reward;\n            });\n    }\n\n    private async _getBrokerage(address = this.tronWeb.defaultAddress.hex, options: { confirmed?: boolean }): Promise<number> {\n        this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address,\n            },\n        ]);\n\n        const data = {\n            address: toHex(address as Address),\n        };\n\n        return this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode']\n            .request<{ brokerage?: number }>(`wallet${options.confirmed ? 'solidity' : ''}/getBrokerage`, data, 'post')\n            .then((result = {}) => {\n                if (typeof result.brokerage === 'undefined') {\n                    throw new Error('Not found.');\n                }\n\n                return result.brokerage;\n            });\n    }\n\n    async getBandwidthPrices(): Promise<string> {\n        return this.tronWeb.fullNode.request<{ prices?: string }>('wallet/getbandwidthprices', {}, 'post')\n            .then((result = {}) => {\n                if (typeof result.prices === 'undefined') {\n                    throw new Error('Not found.');\n                }\n\n                return result.prices;\n            });\n    }\n\n    async getEnergyPrices(): Promise<string> {\n        return this.tronWeb.fullNode.request<{ prices?: string }>('wallet/getenergyprices', {}, 'post')\n            .then((result = {}) => {\n                if (typeof result.prices === 'undefined') {\n                    throw new Error('Not found.');\n                }\n\n                return result.prices;\n            });\n    }\n}\n","import { isAddress, toHex } from '../utils/address.js';\nimport { isNotNullOrUndefined, isInteger, isString, isObject, isValidURL, isHex, isBoolean } from '../utils/validations.js';\n\nexport type ValidatorParamType = {\n    value?: string | number | boolean | Record<string, unknown> | unknown[];\n    type: unknown;\n    name?: string;\n    msg?: string;\n    names?: string[];\n    gt?: number;\n    lt?: number;\n    gte?: number;\n    lte?: number;\n    se?: number;\n    optional?: boolean;\n};\n\nexport class Validator {\n    invalid(param: ValidatorParamType) {\n        return param.msg || `Invalid ${param.name}${param.type === 'address' ? ' address' : ''} provided`;\n    }\n\n    notPositive(param: ValidatorParamType) {\n        return `${param.name} must be a positive integer`;\n    }\n\n    notEqual(param: ValidatorParamType) {\n        return param.msg || `${param.names?.[0]} can not be equal to ${param.names?.[1]}`;\n    }\n\n    notValid(params: ValidatorParamType[]) {\n        const normalized: Record<string, unknown> = {};\n        let no = false;\n        for (const param of params) {\n            const { name, names, value, type, gt, lt, gte, lte, optional } = param;\n            if (optional && (!isNotNullOrUndefined(value) || (type !== 'boolean' && value === false))) continue;\n            normalized[name as string] = param.value;\n            switch (type) {\n                case 'address':\n                    if (!isAddress(value as string)) {\n                        no = true;\n                    } else {\n                        normalized[name as string] = toHex(value as string);\n                    }\n                    break;\n\n                case 'integer':\n                    if (\n                        !isInteger(value) ||\n                        (typeof gt === 'number' && value <= gt) ||\n                        (typeof lt === 'number' && value >= lt) ||\n                        (typeof gte === 'number' && value < gte) ||\n                        (typeof lte === 'number' && value > lte)\n                    ) {\n                        no = true;\n                    }\n                    break;\n\n                case 'positive-integer':\n                    if (!isInteger(value) || value <= 0) {\n                        throw new Error(this.notPositive(param));\n                    }\n                    break;\n\n                case 'tokenId':\n                    if (!isString(value) || !value.length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'notEmptyObject':\n                    if (!isObject(value) || !Object.keys(value).length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'notEqual':\n                    if (names && normalized[names[0]] === normalized[names[1]]) {\n                        throw new Error(this.notEqual(param));\n                    }\n                    break;\n\n                case 'resource':\n                    if (!['BANDWIDTH', 'ENERGY'].includes(value as string)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'url':\n                    if (!isValidURL(value as string)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'hex':\n                    if (!isHex(value as string)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'array':\n                    if (!Array.isArray(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'not-empty-string':\n                    if (!isString(value) || !value.length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'boolean':\n                    if (!isBoolean(value)) {\n                        no = true;\n                    }\n                    break;\n                case 'string':\n                    if (\n                        !isString(value) ||\n                        (typeof gt === 'number' && value.length <= gt) ||\n                        (typeof lt === 'number' && value.length >= lt) ||\n                        (typeof gte === 'number' && value.length < gte) ||\n                        (typeof lte === 'number' && value.length > lte)\n                    ) {\n                        no = true;\n                    }\n                    break;\n            }\n            if (no) {\n                throw new Error(this.invalid(param));\n            }\n        }\n        return false;\n    }\n}\n","import { HttpProvider, providers } from './lib/providers/index.js';\nimport type { Providers } from './lib/providers/index.js';\nimport utils from './utils/index.js';\nimport BigNumber from 'bignumber.js';\nimport EventEmitter from 'eventemitter3';\nimport semver from 'semver';\n\nimport { TransactionBuilder } from './lib/TransactionBuilder/TransactionBuilder.js';\nimport { Trx } from './lib/trx.js';\nimport { Contract } from './lib/contract/index.js';\nimport { Plugin } from './lib/plugin.js';\nimport { Event } from './lib/event.js';\nimport { keccak256 } from './utils/ethersUtils.js';\nimport { fromHex, fromPrivateKey, isAddress, toHex } from './utils/address.js';\nimport { HeadersType } from './lib/providers/HttpProvider.js';\nimport { isString } from './utils/validations.js';\nimport { DefaultAddress, NodeProvider, TronWebOptions } from './types/TronWeb.js';\nimport { ContractAbiInterface } from './types/ABI.js';\nimport { Address } from './types/Trx.js';\n\nconst DEFAULT_VERSION = '4.7.1';\n\nconst FEE_LIMIT = 150000000;\n\nconst version = '6.0.0-beta.3';\n\nfunction isValidOptions(options: unknown): options is TronWebOptions {\n    return (\n        !!options &&\n        typeof options === 'object' &&\n        (!!(options as TronWebOptions).fullNode || !!(options as TronWebOptions).fullHost)\n    );\n}\n\nexport class TronWeb extends EventEmitter {\n    providers: Providers;\n    BigNumber: typeof BigNumber;\n    transactionBuilder: TransactionBuilder;\n    trx: Trx;\n    plugin: Plugin;\n    event: Event;\n    version: typeof TronWeb.version;\n    static version = version;\n    utils: typeof utils;\n\n    defaultBlock: number | false | 'earliest' | 'latest';\n    defaultPrivateKey: string | false;\n    defaultAddress: DefaultAddress;\n    fullnodeVersion: string;\n    feeLimit: number;\n\n    fullNode!: HttpProvider;\n    solidityNode!: HttpProvider;\n    eventServer?: HttpProvider;\n\n    constructor(options: TronWebOptions);\n    constructor(fullNode: NodeProvider, solidityNode: NodeProvider, eventServer?: NodeProvider, privateKey?: string);\n    /* prettier-ignore */\n    constructor(fullNode: NodeProvider, solidityNode: NodeProvider, eventServer: NodeProvider, privateKey?: string);\n    constructor(\n        options: TronWebOptions | NodeProvider,\n        solidityNode: NodeProvider = '',\n        eventServer?: NodeProvider,\n        privateKey = ''\n    ) {\n        super();\n\n        let fullNode;\n        let headers: HeadersType | false = false;\n        let eventHeaders: HeadersType | false = false;\n\n        if (isValidOptions(options)) {\n            fullNode = options.fullNode || options.fullHost;\n            solidityNode = (options.solidityNode || options.fullHost)!;\n            eventServer = (options.eventServer || options.fullHost)!;\n            headers = options.headers || false;\n            eventHeaders = options.eventHeaders || headers;\n            privateKey = options.privateKey!;\n        } else {\n            fullNode = options;\n        }\n        if (utils.isString(fullNode)) fullNode = new providers.HttpProvider(fullNode);\n\n        if (utils.isString(solidityNode)) solidityNode = new providers.HttpProvider(solidityNode);\n\n        if (utils.isString(eventServer)) eventServer = new providers.HttpProvider(eventServer);\n\n        this.event = new Event(this);\n        this.transactionBuilder = new TransactionBuilder(this);\n        this.trx = new Trx(this);\n        this.plugin = new Plugin(this, {\n            disablePlugins: isValidOptions(options) ? options.disablePlugins : false,\n        });\n        this.utils = utils;\n\n        this.setFullNode(fullNode as HttpProvider);\n        this.setSolidityNode(solidityNode as HttpProvider);\n        this.setEventServer(eventServer!);\n\n        this.providers = providers;\n        this.BigNumber = BigNumber;\n\n        this.defaultBlock = false;\n        this.defaultPrivateKey = false;\n        this.defaultAddress = {\n            hex: false,\n            base58: false,\n        };\n\n        this.version = TronWeb.version;\n        this.sha3 = TronWeb.sha3;\n        this.fromUtf8 = TronWeb.fromUtf8;\n        this.address = TronWeb.address;\n        this.toAscii = TronWeb.toAscii;\n        this.toUtf8 = TronWeb.toUtf8;\n        this.isAddress = TronWeb.isAddress;\n        this.fromAscii = TronWeb.fromAscii;\n        this.toHex = TronWeb.toHex;\n        this.toBigNumber = TronWeb.toBigNumber;\n        this.toDecimal = TronWeb.toDecimal;\n        this.fromDecimal = TronWeb.fromDecimal;\n        this.toSun = TronWeb.toSun;\n        this.fromSun = TronWeb.fromSun;\n        this.createAccount = TronWeb.createAccount;\n        this.createRandom = TronWeb.createRandom;\n        this.fromMnemonic = TronWeb.fromMnemonic;\n\n        if (privateKey) this.setPrivateKey(privateKey);\n        this.fullnodeVersion = DEFAULT_VERSION;\n        this.feeLimit = FEE_LIMIT;\n\n        if (headers) {\n            this.setFullNodeHeader(headers);\n        }\n\n        if (eventHeaders) {\n            this.setEventHeader(eventHeaders);\n        }\n    }\n\n    async getFullnodeVersion() {\n        try {\n            const nodeInfo = await this.trx.getNodeInfo();\n            this.fullnodeVersion = nodeInfo.configNodeInfo.codeVersion;\n            if (this.fullnodeVersion.split('.').length === 2) {\n                this.fullnodeVersion += '.0';\n            }\n        } catch (err) {\n            this.fullnodeVersion = DEFAULT_VERSION;\n        }\n    }\n\n    setDefaultBlock(blockID: false | 'latest' | 'earliest' | number = false) {\n        if ([false, 'latest', 'earliest', 0].includes(blockID)) {\n            return (this.defaultBlock = blockID);\n        }\n\n        if (!utils.isInteger(blockID) || !blockID) throw new Error('Invalid block ID provided');\n\n        return (this.defaultBlock = Math.abs(blockID));\n    }\n\n    setPrivateKey(privateKey: string) {\n        try {\n            this.setAddress(TronWeb.address.fromPrivateKey(privateKey) as string);\n        } catch {\n            throw new Error('Invalid private key provided');\n        }\n\n        this.defaultPrivateKey = privateKey;\n        this.emit('privateKeyChanged', privateKey);\n    }\n\n    setAddress(address: string) {\n        if (!TronWeb.isAddress(address)) throw new Error('Invalid address provided');\n\n        const hex = TronWeb.address.toHex(address);\n        const base58 = TronWeb.address.fromHex(address);\n\n        if (this.defaultPrivateKey && TronWeb.address.fromPrivateKey(this.defaultPrivateKey) !== base58)\n            this.defaultPrivateKey = false;\n\n        this.defaultAddress = {\n            hex,\n            base58,\n        };\n\n        this.emit('addressChanged', { hex, base58 });\n    }\n\n    fullnodeSatisfies(version: string) {\n        return semver.satisfies(this.fullnodeVersion, version);\n    }\n\n    isValidProvider(provider: unknown) {\n        return Object.values(providers).some((knownProvider) => provider instanceof knownProvider);\n    }\n\n    setFullNode(fullNode: HttpProvider | string) {\n        if (isString(fullNode)) fullNode = new providers.HttpProvider(fullNode);\n\n        if (!this.isValidProvider(fullNode)) throw new Error('Invalid full node provided');\n\n        this.fullNode = fullNode;\n        this.fullNode.setStatusPage('wallet/getnowblock');\n    }\n\n    setSolidityNode(solidityNode: HttpProvider | string) {\n        if (utils.isString(solidityNode)) solidityNode = new providers.HttpProvider(solidityNode);\n\n        if (!this.isValidProvider(solidityNode)) throw new Error('Invalid solidity node provided');\n\n        this.solidityNode = solidityNode;\n        this.solidityNode.setStatusPage('walletsolidity/getnowblock');\n    }\n\n    setEventServer(eventServer: NodeProvider, healthcheck?: string) {\n        this.event.setServer(eventServer, healthcheck);\n    }\n\n    setHeader(headers = {}) {\n        const fullNode = new providers.HttpProvider(this.fullNode.host, 30000, '', '', headers);\n        const solidityNode = new providers.HttpProvider(this.solidityNode.host, 30000, '', '', headers);\n        const eventServer = new providers.HttpProvider(this.eventServer!.host, 30000, '', '', headers);\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n        this.setEventServer(eventServer);\n    }\n\n    setFullNodeHeader(headers = {}) {\n        const fullNode = new providers.HttpProvider(this.fullNode.host, 30000, '', '', headers);\n        const solidityNode = new providers.HttpProvider(this.solidityNode.host, 30000, '', '', headers);\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n    }\n\n    setEventHeader(headers = {}) {\n        const eventServer = new providers.HttpProvider(this.eventServer!.host, 30000, '', '', headers);\n        this.setEventServer(eventServer);\n    }\n\n    currentProviders() {\n        return {\n            fullNode: this.fullNode,\n            solidityNode: this.solidityNode,\n            eventServer: this.eventServer,\n        };\n    }\n\n    currentProvider() {\n        return this.currentProviders();\n    }\n\n    getEventResult(...params: Parameters<Event['getEventsByContractAddress']>): ReturnType<Event['getEventsByContractAddress']> {\n        return this.event.getEventsByContractAddress(...params);\n    }\n\n    getEventByTransactionID(\n        ...params: Parameters<Event['getEventsByTransactionID']>\n    ): ReturnType<Event['getEventsByTransactionID']> {\n        return this.event.getEventsByTransactionID(...params);\n    }\n\n    contract(abi: ContractAbiInterface = [], address?: Address) {\n        return new Contract(this, abi, address!);\n    }\n\n    address: typeof TronWeb.address;\n    static get address() {\n        return {\n            fromHex(address: string) {\n                return fromHex(address);\n            },\n            toHex(address: string) {\n                return toHex(address);\n            },\n            fromPrivateKey(privateKey: string, strict = false) {\n                return fromPrivateKey(privateKey, strict);\n            },\n        };\n    }\n\n    sha3: typeof TronWeb.sha3;\n    static sha3(string: string, prefix = true) {\n        return (prefix ? '0x' : '') + keccak256(Buffer.from(string, 'utf-8')).toString().substring(2);\n    }\n\n    toHex: typeof TronWeb.toHex;\n    static toHex(val: string | number | boolean | Record<string | number | symbol, unknown> | unknown[] | BigNumber) {\n        if (utils.isBoolean(val)) return TronWeb.fromDecimal(+val);\n\n        if (utils.isBigNumber(val)) return TronWeb.fromDecimal(val);\n\n        if (typeof val === 'object') return TronWeb.fromUtf8(JSON.stringify(val));\n\n        if (utils.isString(val)) {\n            if (/^(-|)0x/.test(val)) return val;\n\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            if (!isFinite(val) || /^\\s*$/.test(val)) return TronWeb.fromUtf8(val);\n        }\n\n        const result = TronWeb.fromDecimal(val as number);\n        if (result === '0xNaN') {\n            throw new Error('The passed value is not convertible to a hex string');\n        } else {\n            return result;\n        }\n    }\n\n    toUtf8: typeof TronWeb.toUtf8;\n    static toUtf8(hex: string) {\n        if (utils.isHex(hex)) {\n            hex = hex.replace(/^0x/, '');\n            return Buffer.from(hex, 'hex').toString('utf8');\n        } else {\n            throw new Error('The passed value is not a valid hex string');\n        }\n    }\n\n    fromUtf8: typeof TronWeb.fromUtf8;\n    static fromUtf8(string: string) {\n        if (!utils.isString(string)) {\n            throw new Error('The passed value is not a valid utf-8 string');\n        }\n        return '0x' + Buffer.from(string, 'utf8').toString('hex');\n    }\n\n    toAscii: typeof TronWeb.toAscii;\n    static toAscii(hex: string) {\n        if (utils.isHex(hex)) {\n            let str = '';\n            let i = 0;\n            const l = hex.length;\n            if (hex.substring(0, 2) === '0x') {\n                i = 2;\n            }\n            for (; i < l; i += 2) {\n                const code = parseInt(hex.substr(i, 2), 16);\n                str += String.fromCharCode(code);\n            }\n            return str;\n        } else {\n            throw new Error('The passed value is not a valid hex string');\n        }\n    }\n\n    fromAscii: typeof TronWeb.fromAscii;\n    static fromAscii(string: string, padding?: number) {\n        if (!utils.isString(string)) {\n            throw new Error('The passed value is not a valid utf-8 string');\n        }\n        return '0x' + Buffer.from(string, 'ascii').toString('hex').padEnd(padding!, '0');\n    }\n\n    toDecimal: typeof TronWeb.toDecimal;\n    static toDecimal(value: string | number | BigNumber) {\n        return TronWeb.toBigNumber(value).toNumber();\n    }\n\n    fromDecimal: typeof TronWeb.fromDecimal;\n    static fromDecimal(value: number | BigNumber) {\n        const number = TronWeb.toBigNumber(value);\n        const result = number.toString(16);\n\n        return number.isLessThan(0) ? '-0x' + result.substr(1) : '0x' + result;\n    }\n\n    fromSun: typeof TronWeb.fromSun;\n    static fromSun(sun: number) {\n        const trx = TronWeb.toBigNumber(sun).div(1_000_000);\n        return utils.isBigNumber(sun) ? trx : trx.toString(10);\n    }\n\n    toSun: typeof TronWeb.toSun;\n    static toSun(trx: number) {\n        const sun = TronWeb.toBigNumber(trx).times(1_000_000);\n        return utils.isBigNumber(trx) ? sun : sun.toString(10);\n    }\n\n    toBigNumber: typeof TronWeb.toBigNumber;\n    static toBigNumber(amount: string | number | BigNumber = 0) {\n        if (utils.isBigNumber(amount)) return amount;\n\n        if (utils.isString(amount) && /^(-|)0x/.test(amount)) return new BigNumber(amount.replace('0x', ''), 16);\n\n        return new BigNumber(amount.toString(10), 10);\n    }\n\n    isAddress: typeof TronWeb.isAddress;\n    static isAddress(address: unknown = ''): boolean {\n        return isAddress(address);\n    }\n\n    createAccount: typeof TronWeb.createAccount;\n    static async createAccount() {\n        const account = utils.accounts.generateAccount();\n\n        return account;\n    }\n\n    createRandom: typeof TronWeb.createRandom;\n    static createRandom(\n        ...params: Parameters<(typeof utils)['accounts']['generateRandom']>\n    ): ReturnType<(typeof utils)['accounts']['generateRandom']> {\n        const account = utils.accounts.generateRandom(...params);\n\n        return account;\n    }\n\n    fromMnemonic: typeof TronWeb.fromMnemonic;\n    static fromMnemonic(\n        ...params: Parameters<(typeof utils)['accounts']['generateAccountWithMnemonic']>\n    ): ReturnType<(typeof utils)['accounts']['generateAccountWithMnemonic']> {\n        const account = utils.accounts.generateAccountWithMnemonic(...params);\n\n        return account;\n    }\n\n    async isConnected(callback = false) {\n        return {\n            fullNode: await this.fullNode.isConnected(),\n            solidityNode: await this.solidityNode.isConnected(),\n            eventServer: this.eventServer && (await this.eventServer.isConnected()),\n        };\n    }\n}\nexport default TronWeb;\n","import { Resource } from '../types/TransactionBuilder';\nimport { ContractAbiInterface } from './ABI';\nexport enum ContractType {\n    AccountCreateContract = 'AccountCreateContract',\n    TransferContract = 'TransferContract',\n    TransferAssetContract = 'TransferAssetContract',\n    VoteAssetContract = 'VoteAssetContract',\n    VoteWitnessContract = 'VoteWitnessContract',\n    WitnessCreateContract = 'WitnessCreateContract',\n    AssetIssueContract = 'AssetIssueContract',\n    WitnessUpdateContract = 'WitnessUpdateContract',\n    ParticipateAssetIssueContract = 'ParticipateAssetIssueContract',\n    AccountUpdateContract = 'AccountUpdateContract',\n    FreezeBalanceContract = 'FreezeBalanceContract',\n    UnfreezeBalanceContract = 'UnfreezeBalanceContract',\n    CancelAllUnfreezeV2Contract = 'CancelAllUnfreezeV2Contract',\n    WithdrawBalanceContract = 'WithdrawBalanceContract',\n    UnfreezeAssetContract = 'UnfreezeAssetContract',\n    UpdateAssetContract = 'UpdateAssetContract',\n    ProposalCreateContract = 'ProposalCreateContract',\n    ProposalApproveContract = 'ProposalApproveContract',\n    ProposalDeleteContract = 'ProposalDeleteContract',\n    SetAccountIdContract = 'SetAccountIdContract',\n    CustomContract = 'CustomContract',\n    CreateSmartContract = 'CreateSmartContract',\n    TriggerSmartContract = 'TriggerSmartContract',\n    GetContract = 'GetContract',\n    UpdateSettingContract = 'UpdateSettingContract',\n    ExchangeCreateContract = 'ExchangeCreateContract',\n    ExchangeInjectContract = 'ExchangeInjectContract',\n    ExchangeWithdrawContract = 'ExchangeWithdrawContract',\n    ExchangeTransactionContract = 'ExchangeTransactionContract',\n    UpdateEnergyLimitContract = 'UpdateEnergyLimitContract',\n    AccountPermissionUpdateContract = 'AccountPermissionUpdateContract',\n    ClearABIContract = 'ClearABIContract',\n    UpdateBrokerageContract = 'UpdateBrokerageContract',\n    ShieldedTransferContract = 'ShieldedTransferContract',\n    MarketSellAssetContract = 'MarketSellAssetContract',\n    MarketCancelOrderContract = 'MarketCancelOrderContract',\n    FreezeBalanceV2Contract = 'FreezeBalanceV2Contract',\n    UnfreezeBalanceV2Contract = 'UnfreezeBalanceV2Contract',\n    WithdrawExpireUnfreezeContract = 'WithdrawExpireUnfreezeContract',\n    DelegateResourceContract = 'DelegateResourceContract',\n    UnDelegateResourceContract = 'UnDelegateResourceContract',\n    UNRECOGNIZED = 'UNRECOGNIZED',\n}\nexport enum Permission_PermissionType {\n    Owner = 0,\n    Witness = 1,\n    Active = 2,\n    UNRECOGNIZED = -1,\n}\n\nexport interface Key {\n    address: Uint8Array;\n    weight: number;\n}\n\nexport enum AccountType {\n    Normal = 0,\n    AssetIssue = 1,\n    Contract = 2,\n    UNRECOGNIZED = -1,\n}\n\nexport interface PermissionKey {\n    address: string;\n    weight: number;\n}\nexport interface Permission {\n    type: number;\n    /** Owner id=0, Witness id=1, Active id start by 2 */\n    id?: number;\n    permission_name: string;\n    threshold: number;\n    operations?: string;\n    keys: PermissionKey[];\n}\n\nexport interface TransferContract {\n    to_address: string;\n    owner_address: string;\n    amount: number;\n}\n\nexport interface TransferAssetContract {\n    to_address: string;\n    owner_address: string;\n    amount: string;\n    asset_name: string;\n}\n\nexport interface ParticipateAssetIssueContract {\n    to_address: string;\n    owner_address: string;\n    asset_name: string;\n    amount: number;\n}\n\nexport interface TriggerSmartContract {\n    owner_address: string;\n    contract_address: string;\n    parameter?: string;\n    function_selector?: string;\n    call_value?: number;\n    call_token_value?: number;\n    token_id?: number;\n    data?: string;\n\n    fee_limit?: number;\n    Permission_id?: number;\n}\n\nexport interface FreezeBalanceContract {\n    owner_address: string;\n    frozen_balance: number;\n    frozen_duration: number;\n    resource?: Resource;\n    receiver_address?: string;\n}\n\nexport interface UnfreezeBalanceContract {\n    owner_address: string;\n    resource: string;\n    receiver_address: string;\n}\n\nexport interface WithdrawBalanceContract {\n    owner_address: string;\n}\n\nexport interface FreezeBalanceV2Contract {\n    owner_address: string;\n    frozen_balance: number;\n    resource?: Resource;\n}\n\nexport interface CancelFreezeBalanceV2Contract {\n    owner_address: string;\n}\n\nexport interface UnfreezeBalanceV2Contract {\n    owner_address: string;\n    unfreeze_balance: number;\n    resource?: Resource;\n}\n\nexport interface DelegateResourceContract {\n    owner_address: string;\n    receiver_address: string;\n    balance: number;\n    resource?: Resource;\n    lock?: boolean;\n    lock_period?: number;\n}\n\nexport interface UnDelegateResourceContract {\n    owner_address: string;\n    receiver_address: string;\n    balance: number;\n    resource?: Resource;\n}\n\nexport interface WithdrawExpireUnfreezeContract {\n    owner_address: string;\n}\n\nexport interface CreateSmartContract {\n    owner_address: string;\n    call_token_value: number;\n    token_id: string;\n    new_contract: {\n        name: string;\n        origin_address: string;\n        contract_address: string;\n        abi: { entrys?: ContractAbiInterface };\n        bytecode: string;\n        call_value: number;\n        consume_user_resource_percent: number;\n        origin_energy_limit: number;\n    };\n}\n\nexport interface DeployConstantContract {\n    data: string;\n    owner_address: string;\n    call_value?: number;\n    token_id?: number | string;\n    call_token_value?: number | string;\n}\n\nexport interface ClearABIContract {\n    contract_address: string;\n    owner_address: string;\n}\n\nexport interface UpdateBrokerageContract {\n    brokerage: number;\n    owner_address: string;\n}\n\ninterface FrozenSupply {\n    frozen_amount: number;\n    frozen_days: number;\n}\nexport interface AssetIssueContract {\n    owner_address: string;\n    name: string;\n    abbr: string;\n    description: string;\n    url: string;\n    total_supply: number;\n    trx_num: number;\n    num: number;\n    start_time: number;\n    end_time: number;\n    precision: number;\n    free_asset_net_limit: number;\n    public_free_asset_net_limit: number;\n    public_free_asset_net_usage: number;\n    public_latest_free_net_time: number;\n    vote_score: number;\n    frozen_supply: FrozenSupply[];\n}\n\nexport interface AccountCreateContract {\n    account_address: string;\n    owner_address: string;\n}\n\nexport interface AccountUpdateContract {\n    account_name: string;\n    owner_address: string;\n}\n\nexport interface SetAccountIdContract {\n    account_id: string;\n    owner_address: string;\n}\n\nexport interface ProposalCreateContract {\n    owner_address: string;\n    parameters: Record<string, string | number>[];\n}\n\nexport interface ProposalDeleteContract {\n    owner_address: string;\n    proposal_id: string;\n}\n\nexport interface VoteProposalContract {\n    owner_address: string;\n    proposal_id: string;\n    is_add_approval: string;\n}\n\nexport interface ExchangeCreateContract {\n    owner_address: string;\n    first_token_id: string;\n    first_token_balance: string;\n    second_token_id: string;\n    second_token_balance: string;\n}\n\nexport interface ExchangeInjectContract {\n    owner_address: string;\n    exchange_id: string;\n    token_id: string;\n    quant: string;\n}\n\nexport interface ExchangeWithdrawContract {\n    owner_address: string;\n    exchange_id: string;\n    token_id: string;\n    quant: string;\n}\n\nexport interface ExchangeTransactionContract {\n    owner_address: string;\n    exchange_id: string;\n    token_id: string;\n    quant: string;\n    expected: string;\n}\n\nexport interface UpdateSettingContract {\n    owner_address: string;\n    contract_address: string;\n    consume_user_resource_percent: string;\n}\n\nexport interface UpdateEnergyLimitContract {\n    owner_address: string;\n    contract_address: string;\n    origin_energy_limit: string;\n}\n\nexport interface AccountPermissionUpdateContract {\n    owner_address: string;\n    owner?: Permission;\n    witness?: Permission;\n    actives?: Permission[];\n}\n\nexport interface UpdateAssetContract {\n    owner_address: string;\n    description: string;\n    url: string;\n    new_limit?: number;\n    new_public_limit?: number;\n}\n\nexport interface WitnessCreateContract {\n    owner_address: string;\n    url: string;\n}\n\nexport interface VoteWitnessContract {\n    owner_address: string;\n    votes: { vote_address: string; vote_count: number }[];\n}\n\nexport type ContractParamter =\n    | TransferContract\n    | TransferAssetContract\n    | ParticipateAssetIssueContract\n    | TriggerSmartContract\n    | FreezeBalanceContract\n    | UnfreezeBalanceContract\n    | WithdrawBalanceContract\n    | FreezeBalanceV2Contract\n    | CancelFreezeBalanceV2Contract\n    | UnfreezeBalanceV2Contract\n    | DelegateResourceContract\n    | UnDelegateResourceContract\n    | WithdrawExpireUnfreezeContract\n    | CreateSmartContract\n    | ClearABIContract\n    | UpdateBrokerageContract\n    | AssetIssueContract\n    | AccountCreateContract\n    | AccountUpdateContract\n    | SetAccountIdContract\n    | ProposalCreateContract\n    | ProposalDeleteContract\n    | VoteProposalContract\n    | ExchangeCreateContract\n    | ExchangeInjectContract\n    | ExchangeWithdrawContract\n    | ExchangeTransactionContract\n    | UpdateSettingContract\n    | UpdateEnergyLimitContract\n    | AccountPermissionUpdateContract\n    | UpdateAssetContract\n    | WitnessCreateContract\n    | VoteWitnessContract;\n","import { AbiCoder } from '@ethersproject/abi';\nimport { TronWeb } from '../tronweb.js';\nimport { ADDRESS_PREFIX, ADDRESS_PREFIX_REGEX } from './address.js';\nimport { FunctionFragment, AbiParamsCommon, AbiInputsType } from '../types/ABI.js';\n\nconst abiCoder = new AbiCoder();\n\nfunction _isArray(_array: any) {\n    return Array.isArray(_array);\n}\n\nfunction _addressToHex(value: string) {\n    return TronWeb.address.toHex(value).replace(ADDRESS_PREFIX_REGEX, '0x');\n}\n\nfunction deepCopy(target: any) {\n    if (\n        Object.prototype.toString.call(target) !== '[object Object]' &&\n        Object.prototype.toString.call(target) !== '[object Array]'\n    ) {\n        return target;\n    }\n    const newTarget = _isArray(target) ? [] : {};\n\n    Object.keys(target).forEach(\n        (key) =>\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            //@ts-ignore\n            (newTarget[key] = target[key] instanceof Object && !target[key]._isBigNumber ? deepCopy(target[key]) : target[key])\n    );\n\n    return newTarget;\n}\n\nexport function decodeParams(names: string[], types: string[], output: string, ignoreMethodHash = false) {\n    if (ignoreMethodHash && output.replace(/^0x/, '').length % 64 === 8) output = '0x' + output.replace(/^0x/, '').substring(8);\n\n    if (output.replace(/^0x/, '').length % 64) {\n        throw new Error('The encoded string is not valid. Its length must be a multiple of 64.');\n    }\n\n    // workaround for unsupported trcToken type\n    types = types.map((type) => {\n        if (/trcToken/.test(type)) {\n            type = type.replace(/trcToken/, 'uint256');\n        }\n        return type;\n    });\n\n    return abiCoder.decode(types, output).reduce(\n        (obj, arg, index) => {\n            if (types[index] == 'address') {\n                arg = ADDRESS_PREFIX + arg.substr(2).toLowerCase();\n            }\n\n            if (names.length) {\n                obj[names[index]] = arg;\n            } else {\n                obj.push(arg);\n            }\n\n            return obj;\n        },\n        names.length ? {} : []\n    );\n}\n\nexport function encodeParams(types: string[], values: any[]) {\n    for (let i = 0; i < types.length; i++) {\n        if (types[i] === 'address') {\n            values[i] = TronWeb.address.toHex(values[i]).replace(ADDRESS_PREFIX_REGEX, '0x');\n        }\n    }\n\n    return abiCoder.encode(types, values);\n}\n\nfunction extractSize(type: string) {\n    const size = type.match(/([a-zA-Z0-9])(\\[.*\\])/);\n    return size ? size[2] : '';\n}\n\nfunction extractArrayDim(type: string) {\n    const size = extractSize(type);\n    return (size.match(/\\]\\[/g) || []).length + 1;\n}\n\nexport function encodeParamsV2ByABI(funABI: FunctionFragment, args: any[]) {\n    const types: string[] = [];\n\n    const buildFullTypeDefinition = (typeDef: AbiParamsCommon): string => {\n        if (typeDef && typeDef.type.indexOf('tuple') === 0 && typeDef.components) {\n            const innerTypes = typeDef.components.map((innerType: AbiParamsCommon) => {\n                return buildFullTypeDefinition(innerType);\n            });\n            return `tuple(${innerTypes.join(',')})${extractSize(typeDef.type)}`;\n        }\n\n        if (/trcToken/.test(typeDef.type)) return typeDef.type.replace(/trcToken/, 'uint256');\n\n        return typeDef.type;\n    };\n\n    const convertTypes = (types: string[]) => {\n        for (let i = 0; i < types.length; i++) {\n            const type = types[i];\n            if (/trcToken/.test(type)) types[i] = type.replace(/trcToken/, 'uint256');\n        }\n    };\n\n    const convertAddresses = (addrArr: string | string[]) => {\n        if (Array.isArray(addrArr)) {\n            addrArr.forEach((addrs, i) => {\n                addrArr[i] = convertAddresses(addrs) as string;\n            });\n            return addrArr;\n        } else {\n            return _addressToHex(addrArr);\n        }\n    };\n\n    const mapTuple = (components: ReadonlyArray<FunctionFragment>, args: any[], dimension: number) => {\n        if (dimension > 1) {\n            if (args.length) {\n                args.forEach((arg) => {\n                    mapTuple(components, arg, dimension - 1);\n                });\n            }\n        } else {\n            if (args.length && dimension) {\n                args.forEach((arg) => {\n                    encodeArgs(components, arg);\n                });\n            }\n        }\n    };\n\n    const encodeArgs = (inputs: ReadonlyArray<AbiParamsCommon> = [], args: any[]) => {\n        if (inputs.length)\n            inputs.forEach((input: AbiParamsCommon, i: number) => {\n                const type = input.type;\n\n                if (args[i])\n                    if (type === 'address') args[i] = _addressToHex(args[i]);\n                    else if (type.match(/^([^\\x5b]*)(\\x5b|$)/)![0] === 'address[') convertAddresses(args[i]);\n                    else if (type.indexOf('tuple') === 0)\n                        if (extractSize(type)) {\n                            const dimension = extractArrayDim(type);\n                            mapTuple(input.components!, args[i], dimension);\n                        } else encodeArgs(input.components!, args[i]);\n            });\n    };\n\n    if (funABI.inputs && funABI.inputs.length) {\n        for (let i = 0; i < funABI.inputs.length; i++) {\n            const type = funABI.inputs[i].type;\n            // \"false\" will be converting to `false` and \"true\" will be working\n            // fine as abiCoder assume anything in quotes as `true`\n            if (type === 'bool' && args[i] === 'false') {\n                args[i] = false;\n            }\n            types.push(type.indexOf('tuple') === 0 ? buildFullTypeDefinition(funABI.inputs[i]) : type);\n            if (args.length < types.length) {\n                args.push('');\n            }\n        }\n    }\n\n    encodeArgs(funABI.inputs, args);\n    convertTypes(types);\n\n    return abiCoder.encode(types, args);\n}\n\nexport function decodeParamsV2ByABI(funABI: FunctionFragment | AbiInputsType, data: string | Uint8Array) {\n    const convertTypeNames = (types: string[]) => {\n        for (let i = 0; i < types.length; i++) {\n            const type = types[i];\n            if (/^trcToken/.test(type)) types[i] = type.replace(/^trcToken/, 'uint256');\n        }\n    };\n\n    const convertAddresses = (addrArr: string | string[]) => {\n        if (Array.isArray(addrArr)) {\n            addrArr.forEach((addrs, i) => {\n                addrArr[i] = convertAddresses(addrs) as string;\n            });\n            return addrArr;\n        } else {\n            return TronWeb.address.toHex(addrArr);\n        }\n    };\n\n    const mapTuple = (components: ReadonlyArray<AbiParamsCommon>, args: string[] | string[][], dimension: number) => {\n        if (dimension > 1) {\n            if (args.length) {\n                args.forEach((arg) => {\n                    mapTuple(components, arg as string[], dimension - 1);\n                });\n            }\n        } else {\n            if (args.length && dimension) {\n                args.forEach((arg) => {\n                    decodeResult(components, arg as string[]);\n                });\n            }\n        }\n    };\n\n    const buildFullTypeNameDefinition = (typeDef: AbiParamsCommon): string => {\n        const name = typeDef.name ? ` ${typeDef.name}` : '';\n        if (typeDef && typeDef.type.indexOf('tuple') === 0 && typeDef.components) {\n            const innerTypes = typeDef.components.map((innerType) => {\n                return buildFullTypeNameDefinition(innerType);\n            });\n            return `tuple(${innerTypes.join(',')})${extractSize(typeDef.type)}${name}`;\n        }\n        if (/trcToken/.test(typeDef.type)) return typeDef.type.replace(/trcToken/, 'uint256') + name;\n\n        return typeDef.type + name;\n    };\n\n    const decodeResult = (outputs: ReadonlyArray<AbiParamsCommon>, result: any[]) => {\n        if (outputs.length)\n            outputs.forEach((output, i) => {\n                const { type, name } = output;\n\n                if (result[i])\n                    if (type === 'address') {\n                        result[i] = TronWeb.address.toHex(result[i]);\n                        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                        //@ts-ignore\n                        if (name) result[name] = TronWeb.address.toHex(result[name]);\n                    } else if (type.match(/^([^\\x5b]*)(\\x5b|$)/)![0] === 'address[') {\n                        convertAddresses(result[i]);\n                        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                        //@ts-ignore\n                        if (name) convertAddresses(result[name]);\n                    } else if (type.indexOf('tuple') === 0) {\n                        if (extractSize(type)) {\n                            const dimension = extractArrayDim(type);\n                            mapTuple(output.components!, result[i], dimension);\n                        } else decodeResult(output.components!, result[i]);\n\n                        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                        //@ts-ignore\n                        if (name) result[name] = result[i];\n                    }\n            });\n    };\n\n    // Only decode if there supposed to be fields\n    if ('outputs' in funABI && funABI.outputs && funABI.outputs.length > 0) {\n        const outputTypes: any[] = [];\n        for (let i = 0; i < funABI.outputs.length; i++) {\n            const type = funABI.outputs[i].type;\n            const name = funABI.outputs[i].name ? ` ${funABI.outputs[i].name}` : '';\n            outputTypes.push(type.indexOf('tuple') === 0 ? buildFullTypeNameDefinition(funABI.outputs[i]) : type + name);\n        }\n        convertTypeNames(outputTypes);\n\n        if (!data || !data.length) data = new Uint8Array(32 * funABI.outputs.length); // ensuring the data is at least filled by 0 cause `AbiCoder` throws if there's not engouh data\n        // decode data\n        const decodeRes = abiCoder.decode(outputTypes, data);\n        const decodeResCopy = deepCopy(decodeRes);\n        decodeResult(funABI.outputs, decodeResCopy);\n\n        return decodeResCopy;\n    }\n    return [];\n}\n","import { byteArray2hexStr } from './bytes.js';\nimport { getBase58CheckAddress, genPriKey, getAddressFromPriKey, getPubKeyFromPriKey, pkToAddress } from './crypto.js';\nimport { ethersHDNodeWallet, Mnemonic, Wordlist } from './ethersUtils.js';\nimport { TRON_BIP39_PATH_INDEX_0 } from './address.js';\n\nconst INVALID_TRON_PATH_ERROR_MSG = 'Invalid tron path provided';\n\nexport function generateAccount() {\n    const priKeyBytes = genPriKey();\n    const pubKeyBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = getAddressFromPriKey(priKeyBytes);\n\n    const privateKey = byteArray2hexStr(priKeyBytes);\n    const publicKey = byteArray2hexStr(pubKeyBytes);\n\n    return {\n        privateKey,\n        publicKey,\n        address: {\n            base58: getBase58CheckAddress(addressBytes),\n            hex: byteArray2hexStr(addressBytes),\n        },\n    };\n}\n\nexport function generateRandom(password = '', path = TRON_BIP39_PATH_INDEX_0, wordlist?: Wordlist) {\n    const account = ethersHDNodeWallet.createRandom(password, path, wordlist);\n\n    const result = {\n        mnemonic: account.mnemonic,\n        privateKey: account.privateKey,\n        publicKey: account.signingKey.publicKey,\n        address: pkToAddress(account.privateKey.replace(/^0x/, '')),\n        path: account.path,\n    };\n\n    return result;\n}\n\nexport function generateAccountWithMnemonic(\n    mnemonic: string,\n    path: string = TRON_BIP39_PATH_INDEX_0,\n    password: string | null | undefined = '',\n    wordlist: Wordlist | null = null\n) {\n    // eslint-disable-next-line no-useless-escape\n    if (!String(path).match(/^m\\/44\\'\\/195\\'/)) {\n        throw new Error(INVALID_TRON_PATH_ERROR_MSG);\n    }\n    const account = ethersHDNodeWallet.fromMnemonic(Mnemonic.fromPhrase(mnemonic, password, wordlist), path);\n\n    const result = {\n        mnemonic: account.mnemonic,\n        privateKey: account.privateKey,\n        publicKey: account.signingKey.publicKey,\n        address: pkToAddress(account.privateKey.replace(/^0x/, '')),\n    };\n\n    return result;\n}\n","import { hexStr2byteArray, byteArray2hexStr } from './code.js';\nimport { decodeBase58Address, getBase58CheckAddress, isAddressValid, pkToAddress } from './crypto.js';\nimport { isHex, isString } from './validations.js';\n\nexport const ADDRESS_SIZE = 34;\nexport const ADDRESS_PREFIX = '41';\nexport const ADDRESS_PREFIX_BYTE = 0x41;\nexport const ADDRESS_PREFIX_REGEX = /^(41)/;\n\nexport const TRON_BIP39_PATH_PREFIX = \"m/44'/195'\";\nexport const TRON_BIP39_PATH_INDEX_0 = TRON_BIP39_PATH_PREFIX + \"/0'/0/0\";\n\nexport function fromHex(address: string) {\n    if (!isHex(address)) return address;\n\n    return getBase58CheckAddress(hexStr2byteArray(address.replace(/^0x/, ADDRESS_PREFIX)));\n}\n\nexport function toHex(address: string) {\n    if (isHex(address)) return address.toLowerCase().replace(/^0x/, ADDRESS_PREFIX);\n\n    return byteArray2hexStr(decodeBase58Address(address) as number[]).toLowerCase();\n}\n\nexport function fromPrivateKey(privateKey: string, strict = false) {\n    try {\n        return pkToAddress(privateKey, strict);\n    } catch {\n        return false;\n    }\n}\n\nexport function isAddress(address: unknown): boolean {\n    if (!address || !isString(address)) return false;\n\n    // Convert HEX to Base58\n    if (address.length === 42) {\n        try {\n            // it throws an error if the address starts with 0x\n            return isAddress(getBase58CheckAddress(hexStr2byteArray(address)));\n        } catch (err) {\n            return false;\n        }\n    }\n    try {\n        return isAddressValid(address);\n    } catch (err) {\n        return false;\n    }\n}\n","import type { BytesLike } from './bytes.js';\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nconst ALPHABET_MAP = {} as Record<string, number>;\n\nfor (let i = 0; i < ALPHABET.length; i++) ALPHABET_MAP[ALPHABET.charAt(i)] = i;\n\nconst BASE = 58;\n\nexport function encode58(buffer: BytesLike | string) {\n    if (buffer.length === 0) return '';\n\n    let i: number;\n    let j: number;\n\n    const digits = [0];\n\n    for (i = 0; i < buffer.length; i++) {\n        for (j = 0; j < digits.length; j++) digits[j] <<= 8;\n\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        digits[0] += buffer[i];\n        let carry = 0;\n\n        for (j = 0; j < digits.length; ++j) {\n            digits[j] += carry;\n            carry = (digits[j] / BASE) | 0;\n            digits[j] %= BASE;\n        }\n\n        while (carry) {\n            digits.push(carry % BASE);\n            carry = (carry / BASE) | 0;\n        }\n    }\n\n    for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++) digits.push(0);\n\n    return digits\n        .reverse()\n        .map((digit) => ALPHABET[digit])\n        .join('');\n}\n\nexport function decode58(string: string) {\n    if (string.length === 0) return [];\n\n    let i;\n    let j;\n\n    const bytes = [0];\n\n    for (i = 0; i < string.length; i++) {\n        const c: string = string[i];\n\n        if (!(c in ALPHABET_MAP)) throw new Error('Non-base58 character');\n\n        for (j = 0; j < bytes.length; j++) bytes[j] *= BASE;\n\n        bytes[0] += ALPHABET_MAP[c];\n        let carry = 0;\n\n        for (j = 0; j < bytes.length; ++j) {\n            bytes[j] += carry;\n            carry = bytes[j] >> 8;\n            bytes[j] &= 0xff;\n        }\n\n        while (carry) {\n            bytes.push(carry & 0xff);\n            carry >>= 8;\n        }\n    }\n\n    for (i = 0; string[i] === '1' && i < string.length - 1; i++) bytes.push(0);\n\n    return bytes.reverse();\n}\n","import { BytesLike } from './bytes.js';\n\nconst _keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\nexport class Base64 {\n    encode(input: string) {\n        let output = '';\n        let chr1: number;\n        let chr2: number;\n        let chr3: number;\n        let enc1: number;\n        let enc2: number;\n        let enc3: number;\n        let enc4: number;\n        let i = 0;\n\n        while (i < input.length) {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2)) enc3 = enc4 = 64;\n            else if (isNaN(chr3)) enc4 = 64;\n\n            output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    encodeIgnoreUtf8(inputBytes: BytesLike) {\n        let output = '';\n        let chr1: number;\n        let chr2: number;\n        let chr3: number;\n        let enc1: number;\n        let enc2: number;\n        let enc3: number;\n        let enc4: number;\n        let i = 0;\n\n        while (i < inputBytes.length) {\n            chr1 = inputBytes[i++];\n            chr2 = inputBytes[i++];\n            chr3 = inputBytes[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2)) enc3 = enc4 = 64;\n            else if (isNaN(chr3)) enc4 = 64;\n\n            output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    decode(input: string) {\n        let output = '';\n        let chr1: number;\n        let chr2: number;\n        let chr3: number;\n        let enc1: number;\n        let enc2: number;\n        let enc3: number;\n        let enc4: number;\n        let i = 0;\n\n        // eslint-disable-next-line no-useless-escape\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n        while (i < input.length) {\n            enc1 = _keyStr.indexOf(input.charAt(i++));\n            enc2 = _keyStr.indexOf(input.charAt(i++));\n            enc3 = _keyStr.indexOf(input.charAt(i++));\n            enc4 = _keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64) output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64) output = output + String.fromCharCode(chr3);\n        }\n\n        return this._utf8_decode(output);\n    }\n\n    decodeToByteArray(input: string) {\n        let output = '';\n        let chr1: number;\n        let chr2: number;\n        let chr3: number;\n        let enc1: number;\n        let enc2: number;\n        let enc3: number;\n        let enc4: number;\n        let i = 0;\n\n        // eslint-disable-next-line no-useless-escape\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n        while (i < input.length) {\n            enc1 = _keyStr.indexOf(input.charAt(i++));\n            enc2 = _keyStr.indexOf(input.charAt(i++));\n            enc3 = _keyStr.indexOf(input.charAt(i++));\n            enc4 = _keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64) output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64) output = output + String.fromCharCode(chr3);\n        }\n\n        return this._out2ByteArray(output);\n    }\n\n    _out2ByteArray(utftext: string) {\n        const byteArray: BytesLike = new Array(utftext.length);\n\n        let i = 0;\n        let c = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n            byteArray[i] = c;\n            i++;\n        }\n\n        return byteArray;\n    }\n\n    _utf8_encode(string: string) {\n        string = string.replace(/\\r\\n/g, '\\n');\n        let utftext = '';\n\n        for (let n = 0; n < string.length; n++) {\n            const c = string.charCodeAt(n);\n\n            if (c < 128) {\n                utftext += String.fromCharCode(c);\n            } else if (c > 127 && c < 2048) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            } else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n        }\n\n        return utftext;\n    }\n\n    _utf8_decode(utftext: string) {\n        let string = '';\n        let i = 0;\n        let c = 0;\n        let c2 = 0;\n        let c3 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n\n            if (c < 128) {\n                string += String.fromCharCode(c);\n                i++;\n            } else if (c > 191 && c < 224) {\n                c2 = utftext.charCodeAt(i + 1);\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                i += 2;\n            } else {\n                c2 = utftext.charCodeAt(i + 1);\n                c3 = utftext.charCodeAt(i + 2);\n\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\n                i += 3;\n            }\n        }\n\n        return string;\n    }\n}\n","import { Base64 } from './base64.js';\n\nexport type BytesLike = number[] | Uint8Array;\n\nexport function byte2hexStr(byte: number) {\n    if (byte < 0 || byte > 255) throw new Error('Input must be a byte');\n\n    const hexByteMap = '0123456789ABCDEF';\n\n    let str = '';\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function bytesToString(arr: BytesLike) {\n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length === 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++) store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else {\n            str += String.fromCharCode(arr[i]);\n        }\n    }\n\n    return str;\n}\n\nexport function hextoString(hex: string) {\n    const arr = hex.replace(/^0x/, '').split('');\n    let out = '';\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        const tmp = `0x${arr[i * 2]}${arr[i * 2 + 1]}`;\n        out += String.fromCharCode(parseInt(tmp));\n    }\n\n    return out;\n}\n\nexport function byteArray2hexStr(byteArray: BytesLike) {\n    let str = '';\n\n    for (let i = 0; i < byteArray.length; i++) str += byte2hexStr(byteArray[i]);\n\n    return str;\n}\n\nexport function base64DecodeFromString(string64: string) {\n    return new Base64().decodeToByteArray(string64);\n}\n\nexport function base64EncodeToString(bytes: BytesLike) {\n    const b = new Base64();\n    const string64 = b.encodeIgnoreUtf8(bytes);\n\n    return string64;\n}\n","import {\n    byte2hexStr,\n    bytesToString,\n    hextoString,\n    byteArray2hexStr,\n    base64DecodeFromString,\n    base64EncodeToString,\n} from './bytes.js';\nimport type { BytesLike } from './bytes.js';\n\nexport function bin2String(array: BytesLike) {\n    return bytesToString(array);\n}\n\nexport function arrayEquals(array1: any[], array2: any[], strict = false) {\n    if (array1.length != array2.length) return false;\n\n    for (let i = 0; i < array1.length; i++) {\n        if (strict) {\n            if (array1[i] != array2[i]) return false;\n        } else if (JSON.stringify(array1[i]) != JSON.stringify(array2[i])) return false;\n    }\n\n    return true;\n}\n\nexport function stringToBytes(str: string) {\n    const bytes = [];\n    const len: number = str.length;\n    let c: number;\n\n    for (let i = 0; i < len; i++) {\n        c = str.charCodeAt(i);\n\n        if (c >= 0x010000 && c <= 0x10ffff) {\n            bytes.push(((c >> 18) & 0x07) | 0xf0);\n            bytes.push(((c >> 12) & 0x3f) | 0x80);\n            bytes.push(((c >> 6) & 0x3f) | 0x80);\n            bytes.push((c & 0x3f) | 0x80);\n        } else if (c >= 0x000800 && c <= 0x00ffff) {\n            bytes.push(((c >> 12) & 0x0f) | 0xe0);\n            bytes.push(((c >> 6) & 0x3f) | 0x80);\n            bytes.push((c & 0x3f) | 0x80);\n        } else if (c >= 0x000080 && c <= 0x0007ff) {\n            bytes.push(((c >> 6) & 0x1f) | 0xc0);\n            bytes.push((c & 0x3f) | 0x80);\n        } else bytes.push(c & 0xff);\n    }\n\n    return bytes;\n}\n\nexport { byte2hexStr, bytesToString, hextoString, byteArray2hexStr, base64DecodeFromString, base64EncodeToString };\n\nexport function hexChar2byte(c: string) {\n    let d: number | undefined;\n\n    if (c >= 'A' && c <= 'F') d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    else if (c >= 'a' && c <= 'f') d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10;\n    else if (c >= '0' && c <= '9') d = c.charCodeAt(0) - '0'.charCodeAt(0);\n\n    if (typeof d === 'number') return d;\n    else throw new Error('The passed hex char is not a valid hex char');\n}\n\nexport function isHexChar(c: string) {\n    if ((c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f') || (c >= '0' && c <= '9')) {\n        return 1;\n    }\n\n    return 0;\n}\n\n// set strict as true: if the length of str is odd, add 0 before the str to make its length as even\nexport function hexStr2byteArray(str: string, strict = false) {\n    let len = str.length;\n\n    if (strict) {\n        if (len % 2) {\n            str = `0${str}`;\n            len++;\n        }\n    }\n    const byteArray: number[] = [];\n    let d = 0;\n    let j = 0;\n    let k = 0;\n\n    for (let i = 0; i < len; i++) {\n        const c = str.charAt(i);\n\n        if (isHexChar(c)) {\n            d <<= 4;\n            d += hexChar2byte(c);\n            j++;\n\n            if (0 === j % 2) {\n                byteArray[k++] = d;\n                d = 0;\n            }\n        } else throw new Error('The passed hex char is not a valid hex string');\n    }\n\n    return byteArray;\n}\n\n//yyyy-MM-DD HH-mm-ss\nexport function strToDate(str: string) {\n    if (!/^\\d{4}-\\d{2}-\\d{2}( \\d{2}-\\d{2}-\\d{2}|)/.test(str)) throw new Error('The passed date string is not valid');\n\n    const tempStrs = str.split(' ');\n    const dateStrs = tempStrs[0].split('-');\n    const year = parseInt(dateStrs[0], 10);\n    const month = parseInt(dateStrs[1], 10) - 1;\n    const day = parseInt(dateStrs[2], 10);\n\n    if (tempStrs.length > 1) {\n        const timeStrs = tempStrs[1].split('-');\n        const hour = parseInt(timeStrs[0], 10);\n        const minute = parseInt(timeStrs[1], 10);\n        const second = parseInt(timeStrs[2], 10);\n\n        return new Date(year, month, day, hour, minute, second);\n    }\n\n    return new Date(year, month, day);\n}\n\nexport function isNumber(c: string) {\n    if (c >= '0' && c <= '9') return 1;\n\n    return 0;\n}\n\n//return 1: address  --- 20Bytes HexString\n//return 2: blockNumber ------ Decimal number\n//return 3: assetName ------ String\n//return other: error\nexport function getStringType(str: string) {\n    if (null == str) return -1;\n\n    if (str.length == 0 || str == '') return -1;\n\n    let i = 0;\n\n    if (str.length == 40) {\n        for (; i < 40; i++) {\n            const c = str.charAt(i);\n\n            if (!isHexChar(c)) break;\n        }\n    }\n\n    if (i == 40) return 1; //40 Hex, Address\n\n    for (i = 0; i < str.length; i++) {\n        const c = str.charAt(i);\n\n        if (!isNumber(c)) break;\n    }\n\n    if (i == str.length) return 2; // All Decimal number, BlockNumber\n\n    for (i = 0; i < str.length; i++) {\n        const c = str.charAt(i);\n\n        if (c > ' ') return 3; // At least one visible character\n    }\n\n    return -1;\n}\n","import { ADDRESS_PREFIX, ADDRESS_PREFIX_BYTE, ADDRESS_SIZE } from './address.js';\nimport { base64EncodeToString, base64DecodeFromString, hexStr2byteArray } from './code.js';\nimport { encode58, decode58 } from './base58.js';\nimport { BytesLike, byte2hexStr, byteArray2hexStr } from './bytes.js';\nimport { keccak256, sha256, SigningKey, recoverAddress, arrayify, Signature } from './ethersUtils.js';\nimport { TypedDataEncoder } from './typedData.js';\nimport { secp256k1 as secp } from 'ethereum-cryptography/secp256k1';\nimport type { TypedDataDomain, TypedDataField } from 'ethers';\nimport { SignedTransaction } from '../types/Transaction.js';\n\nfunction normalizePrivateKeyBytes(priKeyBytes: BytesLike) {\n    return hexStr2byteArray(byteArray2hexStr(priKeyBytes).padStart(64, '0'));\n}\n\nexport function getBase58CheckAddress(addressBytes: number[]) {\n    const hash0 = SHA256(addressBytes);\n    const hash1 = SHA256(hash0);\n\n    let checkSum = hash1.slice(0, 4);\n    checkSum = addressBytes.concat(checkSum);\n\n    return encode58(checkSum);\n}\n\nexport function decodeBase58Address(base58Sting: string) {\n    if (typeof base58Sting != 'string') return false;\n\n    if (base58Sting.length <= 4) return false;\n\n    let address = decode58(base58Sting);\n\n    if (base58Sting.length <= 4) return false;\n\n    const len = address.length;\n    const offset = len - 4;\n    const checkSum = address.slice(offset);\n\n    address = address.slice(0, offset);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (\n        checkSum[0] == checkSum1[0] &&\n        checkSum[1] == checkSum1[1] &&\n        checkSum[2] == checkSum1[2] &&\n        checkSum[3] == checkSum1[3]\n    ) {\n        return address;\n    }\n\n    throw new Error('Invalid address provided');\n}\n\n// @TODO transaction type should be determined.\nexport function signTransaction(priKeyBytes: string | BytesLike, transaction: any): SignedTransaction {\n    if (typeof priKeyBytes === 'string') priKeyBytes = hexStr2byteArray(priKeyBytes);\n\n    const txID = transaction.txID;\n    const signature = ECKeySign(hexStr2byteArray(txID), priKeyBytes);\n\n    if (Array.isArray(transaction.signature)) {\n        if (!transaction.signature.includes(signature)) transaction.signature.push(signature);\n    } else transaction.signature = [signature];\n    return transaction;\n}\n\nexport function ecRecover(signedData: string, signature: string) {\n    signedData = '0x' + signedData.replace(/^0x/, '');\n    signature = '0x' + signature.replace(/^0x/, '');\n\n    const recovered = recoverAddress(arrayify(signedData), Signature.from(signature));\n    const tronAddress = ADDRESS_PREFIX + recovered.substring(2);\n    return tronAddress;\n}\n\nexport function arrayToBase64String(a: number[]) {\n    return btoa(String.fromCharCode(...a));\n}\n\nexport function signBytes(privateKey: string | BytesLike, contents: BytesLike) {\n    if (typeof privateKey === 'string') privateKey = hexStr2byteArray(privateKey);\n\n    const hashBytes = SHA256(contents);\n    const signBytes = ECKeySign(hashBytes, privateKey);\n\n    return signBytes;\n}\n\nexport function _signTypedData(\n    domain: TypedDataDomain,\n    types: Record<string, Array<TypedDataField>>,\n    value: Record<string, any>,\n    privateKey: string\n) {\n    const key = `0x${privateKey.replace(/^0x/, '')}`;\n    const signingKey = new SigningKey(key);\n\n    const messageDigest = TypedDataEncoder.hash(domain, types, value);\n    const signature = signingKey.sign(messageDigest);\n    const signatureHex = ['0x', signature.r.substring(2), signature.s.substring(2), Number(signature.v).toString(16)].join('');\n    return signatureHex;\n}\n\nexport function getRowBytesFromTransactionBase64(base64Data: string): Uint8Array {\n    const bytesDecode = base64DecodeFromString(base64Data);\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const transaction = globalThis.proto.protocol.Transaction.deserializeBinary(bytesDecode);\n    const raw = transaction.getRawData();\n\n    return raw.serializeBinary();\n}\n\nexport function genPriKey() {\n    const priKey = secp.utils.randomPrivateKey();\n    let priKeyHex = byteArray2hexStr(priKey);\n\n    priKeyHex = priKeyHex.padStart(64, '0');\n\n    return hexStr2byteArray(priKeyHex);\n}\n\nexport function computeAddress(pubBytes: BytesLike) {\n    if (pubBytes.length === 65) pubBytes = pubBytes.slice(1);\n\n    const hash = keccak256(new Uint8Array(pubBytes)).toString().substring(2);\n    const addressHex = ADDRESS_PREFIX + hash.substring(24);\n\n    return hexStr2byteArray(addressHex);\n}\n\nexport function getAddressFromPriKey(priKeyBytes: BytesLike) {\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    return computeAddress(pubBytes);\n}\n\nexport function decode58Check(addressStr: string) {\n    const decodeCheck = decode58(addressStr);\n\n    if (decodeCheck.length <= 4) return false;\n\n    const decodeData = decodeCheck.slice(0, decodeCheck.length - 4);\n    const hash0 = SHA256(decodeData);\n    const hash1 = SHA256(hash0);\n\n    if (\n        hash1[0] === decodeCheck[decodeData.length] &&\n        hash1[1] === decodeCheck[decodeData.length + 1] &&\n        hash1[2] === decodeCheck[decodeData.length + 2] &&\n        hash1[3] === decodeCheck[decodeData.length + 3]\n    ) {\n        return decodeData;\n    }\n\n    return false;\n}\n\nexport function isAddressValid(base58Str: string) {\n    if (typeof base58Str !== 'string') return false;\n\n    if (base58Str.length !== ADDRESS_SIZE) return false;\n\n    let address = decode58(base58Str);\n\n    if (address.length !== 25) return false;\n\n    if (address[0] !== ADDRESS_PREFIX_BYTE) return false;\n\n    const checkSum = address.slice(21);\n    address = address.slice(0, 21);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (\n        checkSum[0] == checkSum1[0] &&\n        checkSum[1] == checkSum1[1] &&\n        checkSum[2] == checkSum1[2] &&\n        checkSum[3] == checkSum1[3]\n    ) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getBase58CheckAddressFromPriKeyBase64String(priKeyBase64String: string) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n\n    return getBase58CheckAddress(addressBytes);\n}\n\nexport function getHexStrAddressFromPriKeyBase64String(priKeyBase64String: string) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressHex = byteArray2hexStr(addressBytes);\n\n    return addressHex;\n}\n\nexport function getAddressFromPriKeyBase64String(priKeyBase64String: string) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressBase64 = base64EncodeToString(addressBytes);\n\n    return addressBase64;\n}\n\nexport function getPubKeyFromPriKey(priKeyBytes: BytesLike) {\n    const pubkey = secp.ProjectivePoint.fromPrivateKey(new Uint8Array(normalizePrivateKeyBytes(priKeyBytes)));\n    const x = pubkey.x;\n    const y = pubkey.y;\n\n    const xHex = x.toString(16).padStart(64, '0');\n    const yHex = y.toString(16).padStart(64, '0');\n\n    const pubkeyHex = `04${xHex}${yHex}`;\n    const pubkeyBytes = hexStr2byteArray(pubkeyHex);\n\n    return pubkeyBytes;\n}\n\nexport function ECKeySign(hashBytes: BytesLike, priKeyBytes: BytesLike) {\n    const signature = secp.sign(byteArray2hexStr(hashBytes), byteArray2hexStr(priKeyBytes));\n\n    const r = signature.r.toString(16);\n    const s = signature.s.toString(16);\n    const v = signature.recovery! + 27;\n\n    return r.padStart(64, '0') + s.padStart(64, '0') + byte2hexStr(v);\n}\n\nexport function SHA256(msgBytes: BytesLike) {\n    const msgHex = byteArray2hexStr(msgBytes);\n    const hashHex = sha256('0x' + msgHex).replace(/^0x/, '');\n    return hexStr2byteArray(hashHex);\n}\n\nexport function passwordToAddress(password: string) {\n    const com_priKeyBytes = base64DecodeFromString(password);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n\nexport function pkToAddress(privateKey: string, strict = false) {\n    const com_priKeyBytes = hexStr2byteArray(privateKey, strict);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n\nexport function sha3(string: string, prefix = true) {\n    return (prefix ? '0x' : '') + keccak256(Buffer.from(string, 'utf-8')).toString().substring(2);\n}\n","import {\n    keccak256,\n    sha256,\n    toUtf8Bytes,\n    toUtf8String,\n    recoverAddress,\n    SigningKey,\n    AbiCoder,\n    Signature,\n    concat,\n    id,\n    Mnemonic,\n    Wordlist,\n    wordlists,\n    HDNodeWallet as ethersHDNodeWallet,\n    getBytes,\n    computeHmac,\n} from 'ethers';\n\nimport type { BytesLike, SignatureLike } from 'ethers';\n\nimport { Interface } from './interface.js';\n\nconst splitSignature = (sigBytes: SignatureLike) => Signature.from(sigBytes);\nconst joinSignature = (splitSig: SignatureLike) => Signature.from(splitSig).serialized;\nconst arrayify = (value: BytesLike) => getBytes(value);\nconst FormatTypes = {\n    sighash: 'sighash',\n    minimal: 'minimal',\n    full: 'full',\n    json: 'json',\n};\nconst isValidMnemonic = Mnemonic.isValidMnemonic;\n\ncomputeHmac.register((algorithm, key, data) => {\n    return computeHmac._(algorithm, Buffer.from(key), Buffer.from(data));\n});\n\nexport {\n    keccak256,\n    sha256,\n    toUtf8Bytes,\n    toUtf8String,\n    recoverAddress,\n    Signature,\n    SigningKey,\n    AbiCoder,\n    Interface,\n    FormatTypes,\n    splitSignature,\n    joinSignature,\n    arrayify,\n    ethersHDNodeWallet,\n    concat,\n    id,\n    Mnemonic,\n    Wordlist,\n    wordlists,\n    isValidMnemonic,\n};\n","/**\n *  A fragment is a single item from an ABI, which may represent any of:\n *\n *  - [Functions](FunctionFragment)\n *  - [Events](EventFragment)\n *  - [Constructors](ConstructorFragment)\n *  - Custom [Errors](ErrorFragment)\n *  - [Fallback or Receive](FallbackFragment) functions\n *\n *  @_subsection api/abi/abi-coder:Fragments  [about-fragments]\n */\n\nimport { defineProperties, getBigInt, getNumber, assert, assertPrivate, assertArgument } from 'ethers';\nimport { id } from 'ethers';\n\n/**\n *  A Type description in a [JSON ABI format](link-solc-jsonabi).\n */\nexport interface JsonFragmentType {\n    /**\n     *  The parameter name.\n     */\n    readonly name?: string;\n\n    /**\n     *  If the parameter is indexed.\n     */\n    readonly indexed?: boolean;\n\n    /**\n     *  The type of the parameter.\n     */\n    readonly type?: string;\n\n    /**\n     *  The internal Solidity type.\n     */\n    readonly internalType?: string;\n\n    /**\n     *  The components for a tuple.\n     */\n    readonly components?: ReadonlyArray<JsonFragmentType>;\n}\n\n/**\n *  A fragment for a method, event or error in a [JSON ABI format](link-solc-jsonabi).\n */\nexport interface JsonFragment {\n    /**\n     *  The name of the error, event, function, etc.\n     */\n    readonly name?: string;\n\n    /**\n     *  The type of the fragment (e.g. ``event``, ``\"function\"``, etc.)\n     */\n    readonly type?: string;\n\n    /**\n     *  If the event is anonymous.\n     */\n    readonly anonymous?: boolean;\n\n    /**\n     *  If the function is payable.\n     */\n    readonly payable?: boolean;\n\n    /**\n     *  If the function is constant.\n     */\n    readonly constant?: boolean;\n\n    /**\n     *  The mutability state of the function.\n     */\n    readonly stateMutability?: string;\n\n    /**\n     *  The input parameters.\n     */\n    readonly inputs?: ReadonlyArray<JsonFragmentType>;\n\n    /**\n     *  The output parameters.\n     */\n    readonly outputs?: ReadonlyArray<JsonFragmentType>;\n\n    /**\n     *  The gas limit to use when sending a transaction for this function.\n     */\n    readonly gas?: string;\n}\n\n/**\n *  The format to serialize the output as.\n *\n *  **``\"sighash\"``** - the bare formatting, used to compute the selector\n *  or topic hash; this format cannot be reversed (as it discards ``indexed``)\n *  so cannot by used to export an [[Interface]].\n *\n *  **``\"minimal\"``** - Human-Readable ABI with minimal spacing and without\n *  names, so it is compact, but will result in Result objects that cannot\n *  be accessed by name.\n *\n *  **``\"full\"``** - Full Human-Readable ABI, with readable spacing and names\n *  intact; this is generally the recommended format.\n *\n *  **``\"json\"``** - The [JSON ABI format](link-solc-jsonabi).\n */\nexport type FormatType = 'sighash' | 'minimal' | 'full' | 'json';\n\n// [ \"a\", \"b\" ] => { \"a\": 1, \"b\": 1 }\nfunction setify(items: Array<string>): ReadonlySet<string> {\n    const result: Set<string> = new Set();\n    items.forEach((k) => result.add(k));\n    return Object.freeze(result);\n}\n\n// Visibility Keywords\nconst _kwVisib = 'constant external internal payable private public pure view';\nconst KwVisib = setify(_kwVisib.split(' '));\n\nconst _kwTypes = 'constructor error event fallback function receive struct';\nconst KwTypes = setify(_kwTypes.split(' '));\n\nconst _kwModifiers = 'calldata memory storage payable indexed';\nconst KwModifiers = setify(_kwModifiers.split(' '));\n\nconst _kwOther = 'tuple returns';\n\n// All Keywords\nconst _keywords = [_kwTypes, _kwModifiers, _kwOther, _kwVisib].join(' ');\nconst Keywords = setify(_keywords.split(' '));\n\n// Single character tokens\nconst SimpleTokens: Record<string, string> = {\n    '(': 'OPEN_PAREN',\n    ')': 'CLOSE_PAREN',\n    '[': 'OPEN_BRACKET',\n    ']': 'CLOSE_BRACKET',\n    ',': 'COMMA',\n    '@': 'AT',\n};\n\n// Parser regexes to consume the next token\nconst regexWhitespacePrefix = new RegExp('^(\\\\s*)');\nconst regexNumberPrefix = new RegExp('^([0-9]+)');\nconst regexIdPrefix = new RegExp('^([a-zA-Z$_][a-zA-Z0-9$_]*)');\n\n// Parser regexs to check validity\nconst regexId = new RegExp('^([a-zA-Z$_][a-zA-Z0-9$_]*)$');\nconst regexType = new RegExp('^(trcToken|address|bool|bytes([0-9]*)|string|u?int([0-9]*))$');\n\n/**\n *  @ignore:\n */\ntype Token = Readonly<{\n    // Type of token (e.g. TYPE, KEYWORD, NUMBER, etc)\n    type: string;\n\n    // Offset into the original source code\n    offset: number;\n\n    // Actual text content of the token\n    text: string;\n\n    // The parenthesis depth\n    depth: number;\n\n    // If a parenthesis, the offset (in tokens) that balances it\n    match: number;\n\n    // For parenthesis and commas, the offset (in tokens) to the\n    // previous/next parenthesis or comma in the list\n    linkBack: number;\n    linkNext: number;\n\n    // If a BRACKET, the value inside\n    value: number;\n}>;\n\nclass TokenString {\n    #offset: number;\n    #tokens: ReadonlyArray<Token>;\n\n    get offset(): number {\n        return this.#offset;\n    }\n    get length(): number {\n        return this.#tokens.length - this.#offset;\n    }\n\n    constructor(tokens: ReadonlyArray<Token>) {\n        this.#offset = 0;\n        this.#tokens = tokens.slice();\n    }\n\n    clone(): TokenString {\n        return new TokenString(this.#tokens);\n    }\n    reset(): void {\n        this.#offset = 0;\n    }\n\n    #subTokenString(from = 0, to = 0): TokenString {\n        return new TokenString(\n            this.#tokens.slice(from, to).map((t) => {\n                return Object.freeze(\n                    Object.assign({}, t, {\n                        match: t.match - from,\n                        linkBack: t.linkBack - from,\n                        linkNext: t.linkNext - from,\n                    })\n                );\n            })\n        );\n    }\n\n    // Pops and returns the value of the next token, if it is a keyword in allowed; throws if out of tokens\n    popKeyword(allowed: ReadonlySet<string>): string {\n        const top = this.peek();\n        if (top.type !== 'KEYWORD' || !allowed.has(top.text)) {\n            throw new Error(`expected keyword ${top.text}`);\n        }\n        return this.pop().text;\n    }\n\n    // Pops and returns the value of the next token if it is `type`; throws if out of tokens\n    popType(type: string): string {\n        if (this.peek().type !== type) {\n            throw new Error(`expected ${type}; got ${JSON.stringify(this.peek())}`);\n        }\n        return this.pop().text;\n    }\n\n    // Pops and returns a \"(\" TOKENS \")\"\n    popParen(): TokenString {\n        const top = this.peek();\n        if (top.type !== 'OPEN_PAREN') {\n            throw new Error('bad start');\n        }\n        const result = this.#subTokenString(this.#offset + 1, top.match + 1);\n        this.#offset = top.match + 1;\n        return result;\n    }\n\n    // Pops and returns the items within \"(\" ITEM1 \",\" ITEM2 \",\" ... \")\"\n    popParams(): Array<TokenString> {\n        const top = this.peek();\n\n        if (top.type !== 'OPEN_PAREN') {\n            throw new Error('bad start');\n        }\n\n        const result: Array<TokenString> = [];\n\n        while (this.#offset < top.match - 1) {\n            const link = this.peek().linkNext;\n            result.push(this.#subTokenString(this.#offset + 1, link));\n            this.#offset = link;\n        }\n\n        this.#offset = top.match + 1;\n\n        return result;\n    }\n\n    // Returns the top Token, throwing if out of tokens\n    peek(): Token {\n        if (this.#offset >= this.#tokens.length) {\n            throw new Error('out-of-bounds');\n        }\n        return this.#tokens[this.#offset];\n    }\n\n    // Returns the next value, if it is a keyword in `allowed`\n    peekKeyword(allowed: ReadonlySet<string>): null | string {\n        const top = this.peekType('KEYWORD');\n        return top != null && allowed.has(top) ? top : null;\n    }\n\n    // Returns the value of the next token if it is `type`\n    peekType(type: string): null | string {\n        if (this.length === 0) {\n            return null;\n        }\n        const top = this.peek();\n        return top.type === type ? top.text : null;\n    }\n\n    // Returns the next token; throws if out of tokens\n    pop(): Token {\n        const result = this.peek();\n        this.#offset++;\n        return result;\n    }\n\n    toString(): string {\n        const tokens: Array<string> = [];\n        for (let i = this.#offset; i < this.#tokens.length; i++) {\n            const token = this.#tokens[i];\n            tokens.push(`${token.type}:${token.text}`);\n        }\n        return `<TokenString ${tokens.join(' ')}>`;\n    }\n}\n\ntype Writeable<T> = { -readonly [P in keyof T]: T[P] };\n\nfunction lex(text: string): TokenString {\n    const tokens: Array<Token> = [];\n\n    const throwError = (message: string) => {\n        const token = offset < text.length ? JSON.stringify(text[offset]) : '$EOI';\n        throw new Error(`invalid token ${token} at ${offset}: ${message}`);\n    };\n\n    const brackets: Array<number> = [];\n    const commas: Array<number> = [];\n\n    let offset = 0;\n    while (offset < text.length) {\n        // Strip off any leading whitespace\n        let cur = text.substring(offset);\n        let match = cur.match(regexWhitespacePrefix);\n        if (match) {\n            offset += match[1].length;\n            cur = text.substring(offset);\n        }\n\n        const token = {\n            depth: brackets.length,\n            linkBack: -1,\n            linkNext: -1,\n            match: -1,\n            type: '',\n            text: '',\n            offset,\n            value: -1,\n        };\n        tokens.push(token);\n\n        const type = SimpleTokens[cur[0]] || '';\n        if (type) {\n            token.type = type;\n            token.text = cur[0];\n            offset++;\n\n            if (type === 'OPEN_PAREN') {\n                brackets.push(tokens.length - 1);\n                commas.push(tokens.length - 1);\n            } else if (type == 'CLOSE_PAREN') {\n                if (brackets.length === 0) {\n                    throwError('no matching open bracket');\n                }\n\n                token.match = brackets.pop() as number;\n                (<Writeable<Token>>tokens[token.match]).match = tokens.length - 1;\n                token.depth--;\n\n                token.linkBack = commas.pop() as number;\n                (<Writeable<Token>>tokens[token.linkBack]).linkNext = tokens.length - 1;\n            } else if (type === 'COMMA') {\n                token.linkBack = commas.pop() as number;\n                (<Writeable<Token>>tokens[token.linkBack]).linkNext = tokens.length - 1;\n                commas.push(tokens.length - 1);\n            } else if (type === 'OPEN_BRACKET') {\n                token.type = 'BRACKET';\n            } else if (type === 'CLOSE_BRACKET') {\n                // Remove the CLOSE_BRACKET\n                let suffix = (tokens.pop() as Token).text;\n                if (tokens.length > 0 && tokens[tokens.length - 1].type === 'NUMBER') {\n                    const value = (tokens.pop() as Token).text;\n                    suffix = value + suffix;\n                    (<Writeable<Token>>tokens[tokens.length - 1]).value = getNumber(value);\n                }\n                if (tokens.length === 0 || tokens[tokens.length - 1].type !== 'BRACKET') {\n                    throw new Error('missing opening bracket');\n                }\n                (<Writeable<Token>>tokens[tokens.length - 1]).text += suffix;\n            }\n\n            continue;\n        }\n\n        match = cur.match(regexIdPrefix);\n        if (match) {\n            token.text = match[1];\n            offset += token.text.length;\n\n            if (Keywords.has(token.text)) {\n                token.type = 'KEYWORD';\n                continue;\n            }\n\n            if (token.text.match(regexType)) {\n                token.type = 'TYPE';\n                continue;\n            }\n\n            token.type = 'ID';\n            continue;\n        }\n\n        match = cur.match(regexNumberPrefix);\n        if (match) {\n            token.text = match[1];\n            token.type = 'NUMBER';\n            offset += token.text.length;\n            continue;\n        }\n\n        throw new Error(`unexpected token ${JSON.stringify(cur[0])} at position ${offset}`);\n    }\n\n    return new TokenString(tokens.map((t) => Object.freeze(t)));\n}\n\n// Check only one of `allowed` is in `set`\nfunction allowSingle(set: ReadonlySet<string>, allowed: ReadonlySet<string>): void {\n    const included: Array<string> = [];\n    for (const key in allowed.keys()) {\n        if (set.has(key)) {\n            included.push(key);\n        }\n    }\n    if (included.length > 1) {\n        throw new Error(`conflicting types: ${included.join(', ')}`);\n    }\n}\n\n// Functions to process a Solidity Signature TokenString from left-to-right for...\n\n// ...the name with an optional type, returning the name\nfunction consumeName(type: string, tokens: TokenString): string {\n    if (tokens.peekKeyword(KwTypes)) {\n        const keyword = tokens.pop().text;\n        if (keyword !== type) {\n            throw new Error(`expected ${type}, got ${keyword}`);\n        }\n    }\n\n    return tokens.popType('ID');\n}\n\n// ...all keywords matching allowed, returning the keywords\nfunction consumeKeywords(tokens: TokenString, allowed?: ReadonlySet<string>): ReadonlySet<string> {\n    const keywords: Set<string> = new Set();\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        const keyword = tokens.peekType('KEYWORD');\n\n        if (keyword == null || (allowed && !allowed.has(keyword))) {\n            break;\n        }\n        tokens.pop();\n\n        if (keywords.has(keyword)) {\n            throw new Error(`duplicate keywords: ${JSON.stringify(keyword)}`);\n        }\n        keywords.add(keyword);\n    }\n\n    return Object.freeze(keywords);\n}\n\n// ...all visibility keywords, returning the coalesced mutability\nfunction consumeMutability(tokens: TokenString): 'payable' | 'nonpayable' | 'view' | 'pure' {\n    const modifiers = consumeKeywords(tokens, KwVisib);\n\n    // Detect conflicting modifiers\n    allowSingle(modifiers, setify('constant payable nonpayable'.split(' ')));\n    allowSingle(modifiers, setify('pure view payable nonpayable'.split(' ')));\n\n    // Process mutability states\n    if (modifiers.has('view')) {\n        return 'view';\n    }\n    if (modifiers.has('pure')) {\n        return 'pure';\n    }\n    if (modifiers.has('payable')) {\n        return 'payable';\n    }\n    if (modifiers.has('nonpayable')) {\n        return 'nonpayable';\n    }\n\n    // Process legacy `constant` last\n    if (modifiers.has('constant')) {\n        return 'view';\n    }\n\n    return 'nonpayable';\n}\n\n// ...a parameter list, returning the ParamType list\nfunction consumeParams(tokens: TokenString, allowIndexed?: boolean): Array<ParamType> {\n    return tokens.popParams().map((t) => ParamType.from(t, allowIndexed));\n}\n\n// ...a gas limit, returning a BigNumber or null if none\nfunction consumeGas(tokens: TokenString): null | bigint {\n    if (tokens.peekType('AT')) {\n        tokens.pop();\n        if (tokens.peekType('NUMBER')) {\n            return getBigInt(tokens.pop().text);\n        }\n        throw new Error('invalid gas');\n    }\n    return null;\n}\n\nfunction consumeEoi(tokens: TokenString): void {\n    if (tokens.length) {\n        throw new Error(`unexpected tokens: ${tokens.toString()}`);\n    }\n}\n\nconst regexArrayType = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\n\nfunction verifyBasicType(type: string): string {\n    const match = type.match(regexType);\n    assertArgument(match, 'invalid type', 'type', type);\n    if (type === 'uint') {\n        return 'uint256';\n    }\n    if (type === 'int') {\n        return 'int256';\n    }\n\n    if (match[2]) {\n        // bytesXX\n        const length = parseInt(match[2]);\n        assertArgument(length !== 0 && length <= 32, 'invalid bytes length', 'type', type);\n    } else if (match[3]) {\n        // intXX or uintXX\n        const size = parseInt(match[3] as string);\n        assertArgument(size !== 0 && size <= 256 && size % 8 === 0, 'invalid numeric width', 'type', type);\n    }\n\n    return type;\n}\n\n// Make the Fragment constructors effectively private\nconst _guard = {};\n\n/**\n *  When [walking](ParamType-walk) a [[ParamType]], this is called\n *  on each component.\n */\nexport type ParamTypeWalkFunc = (type: string, value: any) => any;\n\n/**\n *  When [walking asynchronously](ParamType-walkAsync) a [[ParamType]],\n *  this is called on each component.\n */\nexport type ParamTypeWalkAsyncFunc = (type: string, value: any) => any | Promise<any>;\n\nconst internal = Symbol.for('_ethers_internal');\n\nconst ParamTypeInternal = '_ParamTypeInternal';\nconst ErrorFragmentInternal = '_ErrorInternal';\nconst EventFragmentInternal = '_EventInternal';\nconst ConstructorFragmentInternal = '_ConstructorInternal';\nconst FallbackFragmentInternal = '_FallbackInternal';\nconst FunctionFragmentInternal = '_FunctionInternal';\nconst StructFragmentInternal = '_StructInternal';\n\n/**\n *  Each input and output of a [[Fragment]] is an Array of **ParamType**.\n */\nexport class ParamType {\n    /**\n     *  The local name of the parameter (or ``\"\"`` if unbound)\n     */\n    readonly name!: string;\n\n    /**\n     *  The fully qualified type (e.g. ``\"address\"``, ``\"tuple(address)\"``,\n     *  ``\"uint256[3][]\"``)\n     */\n    readonly type!: string;\n\n    /**\n     *  The base type (e.g. ``\"address\"``, ``\"tuple\"``, ``\"array\"``)\n     */\n    readonly baseType!: string;\n\n    /**\n     *  True if the parameters is indexed.\n     *\n     *  For non-indexable types this is ``null``.\n     */\n    readonly indexed!: null | boolean;\n\n    /**\n     *  The components for the tuple.\n     *\n     *  For non-tuple types this is ``null``.\n     */\n    readonly components!: null | ReadonlyArray<ParamType>;\n\n    /**\n     *  The array length, or ``-1`` for dynamic-lengthed arrays.\n     *\n     *  For non-array types this is ``null``.\n     */\n    readonly arrayLength!: null | number;\n\n    /**\n     *  The type of each child in the array.\n     *\n     *  For non-array types this is ``null``.\n     */\n    readonly arrayChildren!: null | ParamType;\n\n    /**\n     *  @private\n     */\n    constructor(\n        guard: any,\n        name: string,\n        type: string,\n        baseType: string,\n        indexed: null | boolean,\n        components: null | ReadonlyArray<ParamType>,\n        arrayLength: null | number,\n        arrayChildren: null | ParamType\n    ) {\n        assertPrivate(guard, _guard, 'ParamType');\n        Object.defineProperty(this, internal, { value: ParamTypeInternal });\n\n        if (components) {\n            components = Object.freeze(components.slice());\n        }\n\n        if (baseType === 'array') {\n            if (arrayLength == null || arrayChildren == null) {\n                throw new Error('');\n            }\n        } else if (arrayLength != null || arrayChildren != null) {\n            throw new Error('');\n        }\n\n        if (baseType === 'tuple') {\n            if (components == null) {\n                throw new Error('');\n            }\n        } else if (components != null) {\n            throw new Error('');\n        }\n\n        defineProperties<ParamType>(this, {\n            name,\n            type,\n            baseType,\n            indexed,\n            components,\n            arrayLength,\n            arrayChildren,\n        });\n    }\n\n    /**\n     *  Return a string representation of this type.\n     *\n     *  For example,\n     *\n     *  ``sighash\" => \"(uint256,address)\"``\n     *\n     *  ``\"minimal\" => \"tuple(uint256,address) indexed\"``\n     *\n     *  ``\"full\" => \"tuple(uint256 foo, address bar) indexed baz\"``\n     */\n    format(format?: FormatType): string {\n        if (format == null) {\n            format = 'sighash';\n        }\n        if (format === 'json') {\n            const result: any = {\n                type: this.baseType === 'tuple' ? 'tuple' : this.type,\n                name: this.name || undefined,\n            };\n            if (typeof this.indexed === 'boolean') {\n                result.indexed = this.indexed;\n            }\n            if (this.isTuple()) {\n                result.components = this.components.map((c) => JSON.parse(c.format(format)));\n            }\n            return JSON.stringify(result);\n        }\n\n        let result = '';\n\n        // Array\n        if (this.isArray()) {\n            result += this.arrayChildren.format(format);\n            result += `[${this.arrayLength < 0 ? '' : String(this.arrayLength)}]`;\n        } else {\n            if (this.isTuple()) {\n                if (format !== 'sighash') {\n                    result += this.type;\n                }\n                result += '(' + this.components.map((comp) => comp.format(format)).join(format === 'full' ? ', ' : ',') + ')';\n            } else {\n                result += this.type;\n            }\n        }\n\n        if (format !== 'sighash') {\n            if (this.indexed === true) {\n                result += ' indexed';\n            }\n            if (format === 'full' && this.name) {\n                result += ' ' + this.name;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     *  Returns true if %%this%% is an Array type.\n     *\n     *  This provides a type gaurd ensuring that [[arrayChildren]]\n     *  and [[arrayLength]] are non-null.\n     */\n    isArray(): this is ParamType & {\n        arrayChildren: ParamType;\n        arrayLength: number;\n    } {\n        return this.baseType === 'array';\n    }\n\n    /**\n     *  Returns true if %%this%% is a Tuple type.\n     *\n     *  This provides a type gaurd ensuring that [[components]]\n     *  is non-null.\n     */\n    isTuple(): this is ParamType & { components: ReadonlyArray<ParamType> } {\n        return this.baseType === 'tuple';\n    }\n\n    /**\n     *  Returns true if %%this%% is an Indexable type.\n     *\n     *  This provides a type gaurd ensuring that [[indexed]]\n     *  is non-null.\n     */\n    isIndexable(): this is ParamType & { indexed: boolean } {\n        return this.indexed != null;\n    }\n\n    /**\n     *  Walks the **ParamType** with %%value%%, calling %%process%%\n     *  on each type, destructing the %%value%% recursively.\n     */\n    walk(value: any, process: ParamTypeWalkFunc): any {\n        if (this.isArray()) {\n            if (!Array.isArray(value)) {\n                throw new Error('invalid array value');\n            }\n            if (this.arrayLength !== -1 && value.length !== this.arrayLength) {\n                throw new Error('array is wrong length');\n            }\n            return value.map((v) => this.arrayChildren?.walk(v, process));\n        }\n\n        if (this.isTuple()) {\n            if (!Array.isArray(value)) {\n                throw new Error('invalid tuple value');\n            }\n            if (value.length !== this.components.length) {\n                throw new Error('array is wrong length');\n            }\n            return value.map((v, i) => this.components?.[i].walk(v, process));\n        }\n\n        return process(this.type, value);\n    }\n\n    #walkAsync(\n        promises: Array<Promise<void>>,\n        value: any,\n        process: ParamTypeWalkAsyncFunc,\n        setValue: (value: any) => void\n    ): void {\n        if (this.isArray()) {\n            if (!Array.isArray(value)) {\n                throw new Error('invalid array value');\n            }\n            if (this.arrayLength !== -1 && value.length !== this.arrayLength) {\n                throw new Error('array is wrong length');\n            }\n            const childType = this.arrayChildren;\n\n            const result = value.slice();\n            result.forEach((value, index) => {\n                childType.#walkAsync(promises, value, process, (value: any) => {\n                    result[index] = value;\n                });\n            });\n            setValue(result);\n            return;\n        }\n\n        if (this.isTuple()) {\n            const components = this.components;\n\n            // Convert the object into an array\n            let result: Array<any>;\n            if (Array.isArray(value)) {\n                result = value.slice();\n            } else {\n                if (value == null || typeof value !== 'object') {\n                    throw new Error('invalid tuple value');\n                }\n\n                result = components.map((param) => {\n                    if (!param.name) {\n                        throw new Error('cannot use object value with unnamed components');\n                    }\n                    if (!(param.name in value)) {\n                        throw new Error(`missing value for component ${param.name}`);\n                    }\n                    return value[param.name];\n                });\n            }\n\n            if (result.length !== this.components.length) {\n                throw new Error('array is wrong length');\n            }\n\n            result.forEach((value, index) => {\n                components[index].#walkAsync(promises, value, process, (value: any) => {\n                    result[index] = value;\n                });\n            });\n            setValue(result);\n            return;\n        }\n\n        const result = process(this.type, value);\n        if (result.then) {\n            promises.push(\n                (async function () {\n                    setValue(await result);\n                })()\n            );\n        } else {\n            setValue(result);\n        }\n    }\n\n    /**\n     *  Walks the **ParamType** with %%value%%, asynchronously calling\n     *  %%process%% on each type, destructing the %%value%% recursively.\n     *\n     *  This can be used to resolve ENS naes by walking and resolving each\n     *  ``\"address\"`` type.\n     */\n    async walkAsync(value: any, process: ParamTypeWalkAsyncFunc): Promise<any> {\n        const promises: Array<Promise<void>> = [];\n        const result: [any] = [value];\n        this.#walkAsync(promises, value, process, (value: any) => {\n            result[0] = value;\n        });\n        if (promises.length) {\n            await Promise.all(promises);\n        }\n        return result[0];\n    }\n\n    /**\n     *  Creates a new **ParamType** for %%obj%%.\n     *\n     *  If %%allowIndexed%% then the ``indexed`` keyword is permitted,\n     *  otherwise the ``indexed`` keyword will throw an error.\n     */\n    static from(obj: any, allowIndexed?: boolean): ParamType {\n        if (ParamType.isParamType(obj)) {\n            return obj;\n        }\n\n        if (typeof obj === 'string') {\n            return ParamType.from(lex(obj), allowIndexed);\n        } else if (obj instanceof TokenString) {\n            let type = '',\n                baseType = '';\n            let comps: null | Array<ParamType> = null;\n\n            if (consumeKeywords(obj, setify(['tuple'])).has('tuple') || obj.peekType('OPEN_PAREN')) {\n                // Tuple\n                baseType = 'tuple';\n                comps = obj.popParams().map((t) => ParamType.from(t));\n                type = `tuple(${comps.map((c) => c.format()).join(',')})`;\n            } else {\n                // Normal\n                type = verifyBasicType(obj.popType('TYPE'));\n                baseType = type;\n            }\n\n            // Check for Array\n            let arrayChildren: null | ParamType = null;\n            let arrayLength: null | number = null;\n\n            while (obj.length && obj.peekType('BRACKET')) {\n                const bracket = obj.pop(); //arrays[i];\n                arrayChildren = new ParamType(_guard, '', type, baseType, null, comps, arrayLength, arrayChildren);\n                arrayLength = bracket.value;\n                type += bracket.text;\n                baseType = 'array';\n                comps = null;\n            }\n\n            let indexed: boolean | null = null;\n            const keywords = consumeKeywords(obj, KwModifiers);\n            if (keywords.has('indexed')) {\n                if (!allowIndexed) {\n                    throw new Error('');\n                }\n                indexed = true;\n            }\n\n            const name = obj.peekType('ID') ? obj.pop().text : '';\n\n            if (obj.length) {\n                throw new Error('leftover tokens');\n            }\n\n            return new ParamType(_guard, name, type, baseType, indexed, comps, arrayLength, arrayChildren);\n        }\n\n        const name = obj.name;\n        assertArgument(!name || (typeof name === 'string' && name.match(regexId)), 'invalid name', 'obj.name', name);\n\n        let indexed = obj.indexed;\n        if (indexed != null) {\n            assertArgument(allowIndexed, 'parameter cannot be indexed', 'obj.indexed', obj.indexed);\n            indexed = !!indexed;\n        }\n\n        let type = obj.type;\n\n        const arrayMatch = type.match(regexArrayType);\n        if (arrayMatch) {\n            const arrayLength = parseInt(arrayMatch[2] || '-1');\n            const arrayChildren = ParamType.from({\n                type: arrayMatch[1],\n                components: obj.components,\n            });\n\n            return new ParamType(_guard, name || '', type, 'array', indexed, null, arrayLength, arrayChildren);\n        }\n\n        if (type === 'tuple' || type.startsWith('tuple(' /* fix: ) */) || type.startsWith('(' /* fix: ) */)) {\n            const comps = obj.components != null ? obj.components.map((c: any) => ParamType.from(c)) : null;\n            const tuple = new ParamType(_guard, name || '', type, 'tuple', indexed, comps, null, null);\n            // @TODO: use lexer to validate and normalize type\n            return tuple;\n        }\n\n        type = verifyBasicType(obj.type);\n\n        return new ParamType(_guard, name || '', type, type, indexed, null, null, null);\n    }\n\n    /**\n     *  Returns true if %%value%% is a **ParamType**.\n     */\n    static isParamType(value: any): value is ParamType {\n        return value && value[internal] === ParamTypeInternal;\n    }\n}\n\n/**\n *  The type of a [[Fragment]].\n */\nexport type FragmentType = 'constructor' | 'error' | 'event' | 'fallback' | 'function' | 'struct';\n\n/**\n *  An abstract class to represent An individual fragment from a parse ABI.\n */\nexport abstract class Fragment {\n    /**\n     *  The type of the fragment.\n     */\n    readonly type!: FragmentType;\n\n    /**\n     *  The inputs for the fragment.\n     */\n    readonly inputs!: ReadonlyArray<ParamType>;\n\n    /**\n     *  @private\n     */\n    constructor(guard: any, type: FragmentType, inputs: ReadonlyArray<ParamType>) {\n        assertPrivate(guard, _guard, 'Fragment');\n        inputs = Object.freeze(inputs.slice());\n        defineProperties<Fragment>(this, { type, inputs });\n    }\n\n    /**\n     *  Returns a string representation of this fragment as %%format%%.\n     */\n    abstract format(format?: FormatType): string;\n\n    /**\n     *  Creates a new **Fragment** for %%obj%%, wich can be any supported\n     *  ABI frgament type.\n     */\n    static from(obj: any): Fragment {\n        if (typeof obj === 'string') {\n            // Try parsing JSON...\n            try {\n                Fragment.from(JSON.parse(obj));\n            } catch (e) {\n                //\n            }\n\n            // ...otherwise, use the human-readable lexer\n            return Fragment.from(lex(obj));\n        }\n\n        if (obj instanceof TokenString) {\n            // Human-readable ABI (already lexed)\n\n            const type = obj.peekKeyword(KwTypes);\n\n            switch (type) {\n                case 'constructor':\n                    return ConstructorFragment.from(obj);\n                case 'error':\n                    return ErrorFragment.from(obj);\n                case 'event':\n                    return EventFragment.from(obj);\n                case 'fallback':\n                case 'receive':\n                    return FallbackFragment.from(obj);\n                case 'function':\n                    return FunctionFragment.from(obj);\n                case 'struct':\n                    return StructFragment.from(obj);\n            }\n        } else if (typeof obj === 'object') {\n            // JSON ABI\n\n            switch (obj.type) {\n                case 'constructor':\n                    return ConstructorFragment.from(obj);\n                case 'error':\n                    return ErrorFragment.from(obj);\n                case 'event':\n                    return EventFragment.from(obj);\n                case 'fallback':\n                case 'receive':\n                    return FallbackFragment.from(obj);\n                case 'function':\n                    return FunctionFragment.from(obj);\n                case 'struct':\n                    return StructFragment.from(obj);\n            }\n\n            assert(false, `unsupported type: ${obj.type}`, 'UNSUPPORTED_OPERATION', {\n                operation: 'Fragment.from',\n            });\n        }\n\n        assertArgument(false, 'unsupported frgament object', 'obj', obj);\n    }\n\n    /**\n     *  Returns true if %%value%% is a [[ConstructorFragment]].\n     */\n    static isConstructor(value: any): value is ConstructorFragment {\n        return ConstructorFragment.isFragment(value);\n    }\n\n    /**\n     *  Returns true if %%value%% is an [[ErrorFragment]].\n     */\n    static isError(value: any): value is ErrorFragment {\n        return ErrorFragment.isFragment(value);\n    }\n\n    /**\n     *  Returns true if %%value%% is an [[EventFragment]].\n     */\n    static isEvent(value: any): value is EventFragment {\n        return EventFragment.isFragment(value);\n    }\n\n    /**\n     *  Returns true if %%value%% is a [[FunctionFragment]].\n     */\n    static isFunction(value: any): value is FunctionFragment {\n        return FunctionFragment.isFragment(value);\n    }\n\n    /**\n     *  Returns true if %%value%% is a [[StructFragment]].\n     */\n    static isStruct(value: any): value is StructFragment {\n        return StructFragment.isFragment(value);\n    }\n}\n\n/**\n *  An abstract class to represent An individual fragment\n *  which has a name from a parse ABI.\n */\nexport abstract class NamedFragment extends Fragment {\n    /**\n     *  The name of the fragment.\n     */\n    readonly name!: string;\n\n    /**\n     *  @private\n     */\n    constructor(guard: any, type: FragmentType, name: string, inputs: ReadonlyArray<ParamType>) {\n        super(guard, type, inputs);\n        assertArgument(typeof name === 'string' && name.match(regexId), 'invalid identifier', 'name', name);\n        inputs = Object.freeze(inputs.slice());\n        defineProperties<NamedFragment>(this, { name });\n    }\n}\n\nfunction joinParams(format: FormatType, params: ReadonlyArray<ParamType>): string {\n    return '(' + params.map((p) => p.format(format)).join(format === 'full' ? ', ' : ',') + ')';\n}\n\n/**\n *  A Fragment which represents a //Custom Error//.\n */\nexport class ErrorFragment extends NamedFragment {\n    /**\n     *  @private\n     */\n    constructor(guard: any, name: string, inputs: ReadonlyArray<ParamType>) {\n        super(guard, 'error', name, inputs);\n        Object.defineProperty(this, internal, { value: ErrorFragmentInternal });\n    }\n\n    /**\n     *  The Custom Error selector.\n     */\n    get selector(): string {\n        return id(this.format('sighash')).substring(0, 10);\n    }\n\n    /**\n     *  Returns a string representation of this fragment as %%format%%.\n     */\n    format(format?: FormatType): string {\n        if (format == null) {\n            format = 'sighash';\n        }\n        if (format === 'json') {\n            return JSON.stringify({\n                type: 'error',\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n            });\n        }\n\n        const result: string[] = [];\n        if (format !== 'sighash') {\n            result.push('error');\n        }\n        result.push(this.name + joinParams(format, this.inputs));\n        return result.join(' ');\n    }\n\n    /**\n     *  Returns a new **ErrorFragment** for %%obj%%.\n     */\n    static from(obj: any): ErrorFragment {\n        if (ErrorFragment.isFragment(obj)) {\n            return obj;\n        }\n\n        if (typeof obj === 'string') {\n            return ErrorFragment.from(lex(obj));\n        } else if (obj instanceof TokenString) {\n            const name = consumeName('error', obj);\n            const inputs = consumeParams(obj);\n            consumeEoi(obj);\n\n            return new ErrorFragment(_guard, name, inputs);\n        }\n\n        return new ErrorFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);\n    }\n\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is an\n     *  **ErrorFragment**.\n     */\n    static isFragment(value: any): value is ErrorFragment {\n        return value && value[internal] === ErrorFragmentInternal;\n    }\n}\n\n/**\n *  A Fragment which represents an Event.\n */\nexport class EventFragment extends NamedFragment {\n    /**\n     *  Whether this event is anonymous.\n     */\n    readonly anonymous!: boolean;\n\n    /**\n     *  @private\n     */\n    constructor(guard: any, name: string, inputs: ReadonlyArray<ParamType>, anonymous: boolean) {\n        super(guard, 'event', name, inputs);\n        Object.defineProperty(this, internal, { value: EventFragmentInternal });\n        defineProperties<EventFragment>(this, { anonymous });\n    }\n\n    /**\n     *  The Event topic hash.\n     */\n    get topicHash(): string {\n        return id(this.format('sighash'));\n    }\n\n    /**\n     *  Returns a string representation of this event as %%format%%.\n     */\n    format(format?: FormatType): string {\n        if (format == null) {\n            format = 'sighash';\n        }\n        if (format === 'json') {\n            return JSON.stringify({\n                type: 'event',\n                anonymous: this.anonymous,\n                name: this.name,\n                inputs: this.inputs.map((i) => JSON.parse(i.format(format))),\n            });\n        }\n\n        const result: string[] = [];\n        if (format !== 'sighash') {\n            result.push('event');\n        }\n        result.push(this.name + joinParams(format, this.inputs));\n        if (format !== 'sighash' && this.anonymous) {\n            result.push('anonymous');\n        }\n        return result.join(' ');\n    }\n\n    /**\n     *  Return the topic hash for an event with %%name%% and %%params%%.\n     */\n    static getTopicHash(name: string, params?: Array<any>): string {\n        params = (params || []).map((p) => ParamType.from(p));\n        const fragment = new EventFragment(_guard, name, params, false);\n        return fragment.topicHash;\n    }\n\n    /**\n     *  Returns a new **EventFragment** for %%obj%%.\n     */\n    static from(obj: any): EventFragment {\n        if (EventFragment.isFragment(obj)) {\n            return obj;\n        }\n\n        if (typeof obj === 'string') {\n            return EventFragment.from(lex(obj));\n        } else if (obj instanceof TokenString) {\n            const name = consumeName('event', obj);\n            const inputs = consumeParams(obj, true);\n            const anonymous = !!consumeKeywords(obj, setify(['anonymous'])).has('anonymous');\n            consumeEoi(obj);\n\n            return new EventFragment(_guard, name, inputs, anonymous);\n        }\n\n        return new EventFragment(\n            _guard,\n            obj.name,\n            obj.inputs ? obj.inputs.map((p: any) => ParamType.from(p, true)) : [],\n            !!obj.anonymous\n        );\n    }\n\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is an\n     *  **EventFragment**.\n     */\n    static isFragment(value: any): value is EventFragment {\n        return value && value[internal] === EventFragmentInternal;\n    }\n}\n\n/**\n *  A Fragment which represents a constructor.\n */\nexport class ConstructorFragment extends Fragment {\n    /**\n     *  Whether the constructor can receive an endowment.\n     */\n    readonly payable!: boolean;\n\n    /**\n     *  The recommended gas limit for deployment or ``null``.\n     */\n    readonly gas!: null | bigint;\n\n    /**\n     *  @private\n     */\n    constructor(guard: any, type: FragmentType, inputs: ReadonlyArray<ParamType>, payable: boolean, gas: null | bigint) {\n        super(guard, type, inputs);\n        Object.defineProperty(this, internal, {\n            value: ConstructorFragmentInternal,\n        });\n        defineProperties<ConstructorFragment>(this, { payable, gas });\n    }\n\n    /**\n     *  Returns a string representation of this constructor as %%format%%.\n     */\n    format(format?: FormatType): string {\n        assert(format != null && format !== 'sighash', 'cannot format a constructor for sighash', 'UNSUPPORTED_OPERATION', {\n            operation: 'format(sighash)',\n        });\n\n        if (format === 'json') {\n            return JSON.stringify({\n                type: 'constructor',\n                stateMutability: this.payable ? 'payable' : 'undefined',\n                payable: this.payable,\n                gas: this.gas != null ? this.gas : undefined,\n                inputs: this.inputs.map((i) => JSON.parse(i.format(format))),\n            });\n        }\n\n        const result = [`constructor${joinParams(format, this.inputs)}`];\n        result.push(this.payable ? 'payable' : 'nonpayable');\n        if (this.gas != null) {\n            result.push(`@${this.gas.toString()}`);\n        }\n        return result.join(' ');\n    }\n\n    /**\n     *  Returns a new **ConstructorFragment** for %%obj%%.\n     */\n    static from(obj: any): ConstructorFragment {\n        if (ConstructorFragment.isFragment(obj)) {\n            return obj;\n        }\n\n        if (typeof obj === 'string') {\n            return ConstructorFragment.from(lex(obj));\n        } else if (obj instanceof TokenString) {\n            consumeKeywords(obj, setify(['constructor']));\n            const inputs = consumeParams(obj);\n            const payable = !!consumeKeywords(obj, setify(['payable'])).has('payable');\n            const gas = consumeGas(obj);\n            consumeEoi(obj);\n\n            return new ConstructorFragment(_guard, 'constructor', inputs, payable, gas);\n        }\n\n        return new ConstructorFragment(\n            _guard,\n            'constructor',\n            obj.inputs ? obj.inputs.map(ParamType.from) : [],\n            !!obj.payable,\n            obj.gas != null ? obj.gas : null\n        );\n    }\n\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **ConstructorFragment**.\n     */\n    static isFragment(value: any): value is ConstructorFragment {\n        return value && value[internal] === ConstructorFragmentInternal;\n    }\n}\n\n/**\n *  A Fragment which represents a method.\n */\nexport class FallbackFragment extends Fragment {\n    /**\n     *  If the function can be sent value during invocation.\n     */\n    readonly payable!: boolean;\n\n    constructor(guard: any, inputs: ReadonlyArray<ParamType>, payable: boolean) {\n        super(guard, 'fallback', inputs);\n        Object.defineProperty(this, internal, { value: FallbackFragmentInternal });\n        defineProperties<FallbackFragment>(this, { payable });\n    }\n\n    /**\n     *  Returns a string representation of this fallback as %%format%%.\n     */\n    format(format?: FormatType): string {\n        const type = this.inputs.length === 0 ? 'receive' : 'fallback';\n\n        if (format === 'json') {\n            const stateMutability = this.payable ? 'payable' : 'nonpayable';\n            return JSON.stringify({ type, stateMutability });\n        }\n\n        return `${type}()${this.payable ? ' payable' : ''}`;\n    }\n\n    /**\n     *  Returns a new **FallbackFragment** for %%obj%%.\n     */\n    static from(obj: any): FallbackFragment {\n        if (FallbackFragment.isFragment(obj)) {\n            return obj;\n        }\n\n        if (typeof obj === 'string') {\n            return FallbackFragment.from(lex(obj));\n        } else if (obj instanceof TokenString) {\n            const errorObj = obj.toString();\n\n            const topIsValid = obj.peekKeyword(setify(['fallback', 'receive']));\n            assertArgument(topIsValid, 'type must be fallback or receive', 'obj', errorObj);\n\n            const type = obj.popKeyword(setify(['fallback', 'receive']));\n\n            // receive()\n            if (type === 'receive') {\n                const inputs = consumeParams(obj);\n                assertArgument(inputs.length === 0, `receive cannot have arguments`, 'obj.inputs', inputs);\n                consumeKeywords(obj, setify(['payable']));\n                consumeEoi(obj);\n                return new FallbackFragment(_guard, [], true);\n            }\n\n            // fallback() [payable]\n            // fallback(bytes) [payable] returns (bytes)\n            let inputs = consumeParams(obj);\n            if (inputs.length) {\n                assertArgument(\n                    inputs.length === 1 && inputs[0].type === 'bytes',\n                    'invalid fallback inputs',\n                    'obj.inputs',\n                    inputs.map((i) => i.format('minimal')).join(', ')\n                );\n            } else {\n                inputs = [ParamType.from('bytes')];\n            }\n\n            const mutability = consumeMutability(obj);\n            assertArgument(\n                mutability === 'nonpayable' || mutability === 'payable',\n                'fallback cannot be constants',\n                'obj.stateMutability',\n                mutability\n            );\n\n            if (consumeKeywords(obj, setify(['returns'])).has('returns')) {\n                const outputs = consumeParams(obj);\n                assertArgument(\n                    outputs.length === 1 && outputs[0].type === 'bytes',\n                    'invalid fallback outputs',\n                    'obj.outputs',\n                    outputs.map((i) => i.format('minimal')).join(', ')\n                );\n            }\n\n            consumeEoi(obj);\n\n            return new FallbackFragment(_guard, inputs, mutability === 'payable');\n        }\n\n        if (obj.type === 'receive') {\n            return new FallbackFragment(_guard, [], true);\n        }\n\n        if (obj.type === 'fallback') {\n            const inputs = [ParamType.from('bytes')];\n            const payable = obj.stateMutability === 'payable';\n            return new FallbackFragment(_guard, inputs, payable);\n        }\n\n        assertArgument(false, 'invalid fallback description', 'obj', obj);\n    }\n\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **FallbackFragment**.\n     */\n    static isFragment(value: any): value is FallbackFragment {\n        return value && value[internal] === FallbackFragmentInternal;\n    }\n}\n\n/**\n *  A Fragment which represents a method.\n */\nexport class FunctionFragment extends NamedFragment {\n    /**\n     *  If the function is constant (e.g. ``pure`` or ``view`` functions).\n     */\n    readonly constant!: boolean;\n\n    /**\n     *  The returned types for the result of calling this function.\n     */\n    readonly outputs!: ReadonlyArray<ParamType>;\n\n    /**\n     *  The state mutability (e.g. ``payable``, ``nonpayable``, ``view``\n     *  or ``pure``)\n     */\n    readonly stateMutability!: 'payable' | 'nonpayable' | 'view' | 'pure';\n\n    /**\n     *  If the function can be sent value during invocation.\n     */\n    readonly payable!: boolean;\n\n    /**\n     *  The recommended gas limit to send when calling this function.\n     */\n    readonly gas!: null | bigint;\n\n    /**\n     *  @private\n     */\n    constructor(\n        guard: any,\n        name: string,\n        stateMutability: 'payable' | 'nonpayable' | 'view' | 'pure',\n        inputs: ReadonlyArray<ParamType>,\n        outputs: ReadonlyArray<ParamType>,\n        gas: null | bigint\n    ) {\n        super(guard, 'function', name, inputs);\n        Object.defineProperty(this, internal, { value: FunctionFragmentInternal });\n        outputs = Object.freeze(outputs.slice());\n        const constant = stateMutability === 'view' || stateMutability === 'pure';\n        const payable = stateMutability === 'payable';\n        defineProperties<FunctionFragment>(this, {\n            constant,\n            gas,\n            outputs,\n            payable,\n            stateMutability,\n        });\n    }\n\n    /**\n     *  The Function selector.\n     */\n    get selector(): string {\n        return id(this.format('sighash')).substring(0, 10);\n    }\n\n    /**\n     *  Returns a string representation of this function as %%format%%.\n     */\n    format(format?: FormatType): string {\n        if (format == null) {\n            format = 'sighash';\n        }\n        if (format === 'json') {\n            return JSON.stringify({\n                type: 'function',\n                name: this.name,\n                constant: this.constant,\n                stateMutability: this.stateMutability !== 'nonpayable' ? this.stateMutability : undefined,\n                payable: this.payable,\n                gas: this.gas != null ? this.gas : undefined,\n                inputs: this.inputs.map((i) => JSON.parse(i.format(format))),\n                outputs: this.outputs.map((o) => JSON.parse(o.format(format))),\n            });\n        }\n\n        const result: string[] = [];\n\n        if (format !== 'sighash') {\n            result.push('function');\n        }\n\n        result.push(this.name + joinParams(format, this.inputs));\n\n        if (format !== 'sighash') {\n            if (this.stateMutability !== 'nonpayable') {\n                result.push(this.stateMutability);\n            }\n\n            if (this.outputs && this.outputs.length) {\n                result.push('returns');\n                result.push(joinParams(format, this.outputs));\n            }\n\n            if (this.gas != null) {\n                result.push(`@${this.gas.toString()}`);\n            }\n        }\n        return result.join(' ');\n    }\n\n    /**\n     *  Return the selector for a function with %%name%% and %%params%%.\n     */\n    static getSelector(name: string, params?: Array<any>): string {\n        params = (params || []).map((p) => ParamType.from(p));\n        const fragment = new FunctionFragment(_guard, name, 'view', params, [], null);\n        return fragment.selector;\n    }\n\n    /**\n     *  Returns a new **FunctionFragment** for %%obj%%.\n     */\n    static from(obj: any): FunctionFragment {\n        if (FunctionFragment.isFragment(obj)) {\n            return obj;\n        }\n\n        if (typeof obj === 'string') {\n            return FunctionFragment.from(lex(obj));\n        } else if (obj instanceof TokenString) {\n            const name = consumeName('function', obj);\n            const inputs = consumeParams(obj);\n            const mutability = consumeMutability(obj);\n\n            let outputs: Array<ParamType> = [];\n            if (consumeKeywords(obj, setify(['returns'])).has('returns')) {\n                outputs = consumeParams(obj);\n            }\n\n            const gas = consumeGas(obj);\n\n            consumeEoi(obj);\n\n            return new FunctionFragment(_guard, name, mutability, inputs, outputs, gas);\n        }\n\n        let stateMutability = obj.stateMutability;\n\n        // Use legacy Solidity ABI logic if stateMutability is missing\n        if (stateMutability == null) {\n            stateMutability = 'payable';\n\n            if (typeof obj.constant === 'boolean') {\n                stateMutability = 'view';\n                if (!obj.constant) {\n                    stateMutability = 'payable';\n                    if (typeof obj.payable === 'boolean' && !obj.payable) {\n                        stateMutability = 'nonpayable';\n                    }\n                }\n            } else if (typeof obj.payable === 'boolean' && !obj.payable) {\n                stateMutability = 'nonpayable';\n            }\n        }\n\n        // @TODO: verifyState for stateMutability (e.g. throw if\n        //        payable: false but stateMutability is \"nonpayable\")\n\n        return new FunctionFragment(\n            _guard,\n            obj.name,\n            stateMutability,\n            obj.inputs ? obj.inputs.map(ParamType.from) : [],\n            obj.outputs ? obj.outputs.map(ParamType.from) : [],\n            obj.gas != null ? obj.gas : null\n        );\n    }\n\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **FunctionFragment**.\n     */\n    static isFragment(value: any): value is FunctionFragment {\n        return value && value[internal] === FunctionFragmentInternal;\n    }\n}\n\n/**\n *  A Fragment which represents a structure.\n */\nexport class StructFragment extends NamedFragment {\n    /**\n     *  @private\n     */\n    constructor(guard: any, name: string, inputs: ReadonlyArray<ParamType>) {\n        super(guard, 'struct', name, inputs);\n        Object.defineProperty(this, internal, { value: StructFragmentInternal });\n    }\n\n    /**\n     *  Returns a string representation of this struct as %%format%%.\n     */\n    format(): string {\n        throw new Error('@TODO');\n    }\n\n    /**\n     *  Returns a new **StructFragment** for %%obj%%.\n     */\n    static from(obj: any): StructFragment {\n        if (typeof obj === 'string') {\n            return StructFragment.from(lex(obj));\n        } else if (obj instanceof TokenString) {\n            const name = consumeName('struct', obj);\n            const inputs = consumeParams(obj);\n            consumeEoi(obj);\n            return new StructFragment(_guard, name, inputs);\n        }\n\n        return new StructFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);\n    }\n\n    // @TODO: fix this return type\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **StructFragment**.\n     */\n    static isFragment(value: any): value is FunctionFragment {\n        return value && value[internal] === StructFragmentInternal;\n    }\n}\n","import * as accounts from './accounts.js';\nimport * as address from './address.js';\nimport * as base58 from './base58.js';\nimport * as bytes from './bytes.js';\nimport * as crypto from './crypto.js';\nimport * as code from './code.js';\nimport * as abi from './abi.js';\nimport * as message from './message.js';\nimport * as ethersUtils from './ethersUtils.js';\nimport { TypedDataEncoder as _TypedDataEncoder } from './typedData.js';\nimport * as transaction from './transaction.js';\n\nimport * as validations from './validations.js';\n\nconst utils = {\n    ...validations,\n    address,\n    code,\n    accounts,\n    base58,\n    bytes,\n    crypto,\n    abi,\n    message,\n    _TypedDataEncoder,\n    transaction,\n    ethersUtils,\n};\nexport default utils;\nexport * from './accounts.js';\nexport * from './address.js';\nexport * from './base58.js';\nexport * from './bytes.js';\nexport * from './crypto.js';\nexport * from './code.js';\nexport * from './abi.js';\nexport * from './message.js';\nexport * from './ethersUtils.js';\nexport * from './typedData.js';\nexport * from './transaction.js';\n\nexport * from './validations.js';\n","/**\n *  The Interface class is a low-level class that accepts an\n *  ABI and provides all the necessary functionality to encode\n *  and decode paramaters to and results from methods, events\n *  and errors.\n *\n *  It also provides several convenience methods to automatically\n *  search and find matching transactions and events to parse them.\n *\n *  @_subsection api/abi:Interfaces  [interfaces]\n */\n\nimport { keccak256 } from 'ethers';\nimport { id } from 'ethers';\nimport {\n    concat,\n    dataSlice,\n    getBigInt,\n    getBytes,\n    getBytesCopy,\n    hexlify,\n    zeroPadValue,\n    isHexString,\n    defineProperties,\n    assertArgument,\n    toBeHex,\n    assert,\n} from 'ethers';\n\nimport { AbiCoder } from 'ethers';\nimport { checkResultErrors, Result } from 'ethers';\nimport {\n    ConstructorFragment,\n    ErrorFragment,\n    EventFragment,\n    FallbackFragment,\n    Fragment,\n    FunctionFragment,\n    ParamType,\n} from './fragments.js';\nimport { Typed } from 'ethers';\n\nimport type { BigNumberish, BytesLike, CallExceptionError, CallExceptionTransaction } from 'ethers';\n\nimport type { JsonFragment } from 'ethers';\n\nexport { checkResultErrors, Result };\n\n/**\n *  When using the [[Interface-parseLog]] to automatically match a Log to its event\n *  for parsing, a **LogDescription** is returned.\n */\nexport class LogDescription {\n    /**\n     *  The matching fragment for the ``topic0``.\n     */\n    readonly fragment!: EventFragment;\n\n    /**\n     *  The name of the Event.\n     */\n    readonly name!: string;\n\n    /**\n     *  The full Event signature.\n     */\n    readonly signature!: string;\n\n    /**\n     *  The topic hash for the Event.\n     */\n    readonly topic!: string;\n\n    /**\n     *  The arguments passed into the Event with ``emit``.\n     */\n    readonly args!: Result;\n\n    /**\n     *  @_ignore:\n     */\n    constructor(fragment: EventFragment, topic: string, args: Result) {\n        const name = fragment.name,\n            signature = fragment.format();\n        defineProperties<LogDescription>(this, {\n            fragment,\n            name,\n            signature,\n            topic,\n            args,\n        });\n    }\n}\n\n/**\n *  When using the [[Interface-parseTransaction]] to automatically match\n *  a transaction data to its function for parsing,\n *  a **TransactionDescription** is returned.\n */\nexport class TransactionDescription {\n    /**\n     *  The matching fragment from the transaction ``data``.\n     */\n    readonly fragment!: FunctionFragment;\n\n    /**\n     *  The name of the Function from the transaction ``data``.\n     */\n    readonly name!: string;\n\n    /**\n     *  The arguments passed to the Function from the transaction ``data``.\n     */\n    readonly args!: Result;\n\n    /**\n     *  The full Function signature from the transaction ``data``.\n     */\n    readonly signature!: string;\n\n    /**\n     *  The selector for the Function from the transaction ``data``.\n     */\n    readonly selector!: string;\n\n    /**\n     *  The ``value`` (in wei) from the transaction.\n     */\n    readonly value!: bigint;\n\n    /**\n     *  @_ignore:\n     */\n    constructor(fragment: FunctionFragment, selector: string, args: Result, value: bigint) {\n        const name = fragment.name,\n            signature = fragment.format();\n        defineProperties<TransactionDescription>(this, {\n            fragment,\n            name,\n            args,\n            signature,\n            selector,\n            value,\n        });\n    }\n}\n\n/**\n *  When using the [[Interface-parseError]] to automatically match an\n *  error for a call result for parsing, an **ErrorDescription** is returned.\n */\nexport class ErrorDescription {\n    /**\n     *  The matching fragment.\n     */\n    readonly fragment!: ErrorFragment;\n\n    /**\n     *  The name of the Error.\n     */\n    readonly name!: string;\n\n    /**\n     *  The arguments passed to the Error with ``revert``.\n     */\n    readonly args!: Result;\n\n    /**\n     *  The full Error signature.\n     */\n    readonly signature!: string;\n\n    /**\n     *  The selector for the Error.\n     */\n    readonly selector!: string;\n\n    /**\n     *  @_ignore:\n     */\n    constructor(fragment: ErrorFragment, selector: string, args: Result) {\n        const name = fragment.name,\n            signature = fragment.format();\n        defineProperties<ErrorDescription>(this, {\n            fragment,\n            name,\n            args,\n            signature,\n            selector,\n        });\n    }\n}\n\n/**\n *  An **Indexed** is used as a value when a value that does not\n *  fit within a topic (i.e. not a fixed-length, 32-byte type). It\n *  is the ``keccak256`` of the value, and used for types such as\n *  arrays, tuples, bytes and strings.\n */\nexport class Indexed {\n    /**\n     *  The ``keccak256`` of the value logged.\n     */\n    readonly hash!: null | string;\n\n    /**\n     *  @_ignore:\n     */\n    readonly _isIndexed!: boolean;\n\n    /**\n     *  Returns ``true`` if %%value%% is an **Indexed**.\n     *\n     *  This provides a Type Guard for property access.\n     */\n    static isIndexed(value: any): value is Indexed {\n        return !!(value && value._isIndexed);\n    }\n\n    /**\n     *  @_ignore:\n     */\n    constructor(hash: null | string) {\n        defineProperties<Indexed>(this, { hash, _isIndexed: true });\n    }\n}\n\ntype ErrorInfo = {\n    signature: string;\n    inputs: Array<string>;\n    name: string;\n    reason: (...args: Array<any>) => string;\n};\n\n// https://docs.soliditylang.org/en/v0.8.13/control-structures.html?highlight=panic#panic-via-assert-and-error-via-require\nconst PanicReasons: Record<string, string> = {\n    '0': 'generic panic',\n    '1': 'assert(false)',\n    '17': 'arithmetic overflow',\n    '18': 'division or modulo by zero',\n    '33': 'enum overflow',\n    '34': 'invalid encoded storage byte array accessed',\n    '49': 'out-of-bounds array access; popping on an empty array',\n    '50': 'out-of-bounds access of an array or bytesN',\n    '65': 'out of memory',\n    '81': 'uninitialized function',\n};\n\nconst BuiltinErrors: Record<string, ErrorInfo> = {\n    '0x08c379a0': {\n        signature: 'Error(string)',\n        name: 'Error',\n        inputs: ['string'],\n        reason: (message: string) => {\n            return `reverted with reason string ${JSON.stringify(message)}`;\n        },\n    },\n    '0x4e487b71': {\n        signature: 'Panic(uint256)',\n        name: 'Panic',\n        inputs: ['uint256'],\n        reason: (code: bigint) => {\n            let reason = 'unknown panic code';\n            if (code >= 0 && code <= 0xff && PanicReasons[code.toString()]) {\n                reason = PanicReasons[code.toString()];\n            }\n            return `reverted with panic code 0x${code.toString(16)} (${reason})`;\n        },\n    },\n};\n\n/*\nfunction wrapAccessError(property: string, error: Error): Error {\n    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${ property }`);\n    (<any>wrap).error = error;\n    return wrap;\n}\n*/\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\n\n/**\n *  An **InterfaceAbi** may be any supported ABI format.\n *\n *  A string is expected to be a JSON string, which will be parsed\n *  using ``JSON.parse``. This means that the value **must** be a valid\n *  JSON string, with no stray commas, etc.\n *\n *  An array may contain any combination of:\n *  - Human-Readable fragments\n *  - Parsed JSON fragment\n *  - [[Fragment]] instances\n *\n *  A **Human-Readable Fragment** is a string which resembles a Solidity\n *  signature and is introduced in [this blog entry](link-ricmoo-humanreadableabi).\n *  For example, ``function balanceOf(address) view returns (uint)``.\n *\n *  A **Parsed JSON Fragment** is a JavaScript Object desribed in the\n *  [Solidity documentation](link-solc-jsonabi).\n */\nexport type InterfaceAbi = string | ReadonlyArray<Fragment | JsonFragment | string>;\n\n/**\n *  An Interface abstracts many of the low-level details for\n *  encoding and decoding the data on the blockchain.\n *\n *  An ABI provides information on how to encode data to send to\n *  a Contract, how to decode the results and events and how to\n *  interpret revert errors.\n *\n *  The ABI can be specified by [any supported format](InterfaceAbi).\n */\nexport class Interface {\n    /**\n     *  All the Contract ABI members (i.e. methods, events, errors, etc).\n     */\n    readonly fragments!: ReadonlyArray<Fragment>;\n\n    /**\n     *  The Contract constructor.\n     */\n    readonly deploy!: ConstructorFragment;\n\n    /**\n     *  The Fallback method, if any.\n     */\n    readonly fallback!: null | FallbackFragment;\n\n    /**\n     *  If receiving ether is supported.\n     */\n    readonly receive!: boolean;\n\n    #errors: Map<string, ErrorFragment>;\n    #events: Map<string, EventFragment>;\n    #functions: Map<string, FunctionFragment>;\n    //    #structs: Map<string, StructFragment>;\n\n    #abiCoder: AbiCoder;\n\n    /**\n     *  Create a new Interface for the %%fragments%%.\n     */\n    constructor(fragments: InterfaceAbi) {\n        let abi: ReadonlyArray<Fragment | JsonFragment | string> = [];\n        if (typeof fragments === 'string') {\n            abi = JSON.parse(fragments);\n        } else {\n            abi = fragments;\n        }\n\n        this.#functions = new Map();\n        this.#errors = new Map();\n        this.#events = new Map();\n        //        this.#structs = new Map();\n\n        const frags: Array<Fragment> = [];\n        for (const a of abi) {\n            try {\n                frags.push(Fragment.from(a));\n            } catch (error) {\n                console.log('EE', error);\n            }\n        }\n\n        defineProperties<Interface>(this, {\n            fragments: Object.freeze(frags),\n        });\n\n        let fallback: null | FallbackFragment = null;\n        let receive = false;\n\n        this.#abiCoder = this.getAbiCoder();\n\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment, index) => {\n            let bucket: Map<string, Fragment>;\n            switch (fragment.type) {\n                case 'constructor':\n                    if (this.deploy) {\n                        console.log('duplicate definition - constructor');\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    defineProperties<Interface>(this, {\n                        deploy: <ConstructorFragment>fragment,\n                    });\n                    return;\n\n                case 'fallback':\n                    if (fragment.inputs.length === 0) {\n                        receive = true;\n                    } else {\n                        assertArgument(\n                            !fallback || (<FallbackFragment>fragment).payable !== fallback.payable,\n                            'conflicting fallback fragments',\n                            `fragments[${index}]`,\n                            fragment\n                        );\n                        fallback = <FallbackFragment>fragment;\n                        receive = fallback.payable;\n                    }\n                    return;\n\n                case 'function':\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = this.#functions;\n                    break;\n\n                case 'event':\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.#events;\n                    break;\n\n                case 'error':\n                    bucket = this.#errors;\n                    break;\n\n                default:\n                    return;\n            }\n\n            // Two identical entries; ignore it\n            const signature = fragment.format();\n            if (bucket.has(signature)) {\n                return;\n            }\n\n            bucket.set(signature, fragment);\n        });\n\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            defineProperties<Interface>(this, {\n                deploy: ConstructorFragment.from('constructor()'),\n            });\n        }\n\n        defineProperties<Interface>(this, { fallback, receive });\n    }\n\n    /**\n     *  Returns the entire Human-Readable ABI, as an array of\n     *  signatures, optionally as %%minimal%% strings, which\n     *  removes parameter names and unneceesary spaces.\n     */\n    format(minimal?: boolean): Array<string> {\n        const format = minimal ? 'minimal' : 'full';\n        const abi = this.fragments.map((f) => f.format(format));\n        return abi;\n    }\n\n    /**\n     *  Return the JSON-encoded ABI. This is the format Solidiy\n     *  returns.\n     */\n    formatJson(): string {\n        const abi = this.fragments.map((f) => f.format('json'));\n\n        // We need to re-bundle the JSON fragments a bit\n        return JSON.stringify(abi.map((j) => JSON.parse(j)));\n    }\n\n    /**\n     *  The ABI coder that will be used to encode and decode binary\n     *  data.\n     */\n    getAbiCoder(): AbiCoder {\n        return AbiCoder.defaultAbiCoder();\n    }\n\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    #getFunction(key: string, values: null | Array<any | Typed>, forceUnique: boolean): null | FunctionFragment {\n        // Selector\n        if (isHexString(key)) {\n            const selector = key.toLowerCase();\n            for (const fragment of this.#functions.values()) {\n                if (selector === fragment.selector) {\n                    return fragment;\n                }\n            }\n            return null;\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (key.indexOf('(') === -1) {\n            const matching: Array<FunctionFragment> = [];\n            for (const [name, fragment] of this.#functions) {\n                if (name.split('(' /* fix:) */)[0] === key) {\n                    matching.push(fragment);\n                }\n            }\n\n            if (values) {\n                const lastValue = values.length > 0 ? values[values.length - 1] : null;\n\n                let valueLength = values.length;\n                let allowOptions = true;\n                if (Typed.isTyped(lastValue) && lastValue.type === 'overrides') {\n                    allowOptions = false;\n                    valueLength--;\n                }\n\n                // Remove all matches that don't have a compatible length. The args\n                // may contain an overrides, so the match may have n or n - 1 parameters\n                for (let i = matching.length - 1; i >= 0; i--) {\n                    const inputs = matching[i].inputs.length;\n                    if (inputs !== valueLength && (!allowOptions || inputs !== valueLength - 1)) {\n                        matching.splice(i, 1);\n                    }\n                }\n\n                // Remove all matches that don't match the Typed signature\n                for (let i = matching.length - 1; i >= 0; i--) {\n                    const inputs = matching[i].inputs;\n                    for (let j = 0; j < values.length; j++) {\n                        // Not a typed value\n                        if (!Typed.isTyped(values[j])) {\n                            continue;\n                        }\n\n                        // We are past the inputs\n                        if (j >= inputs.length) {\n                            if (values[j].type === 'overrides') {\n                                continue;\n                            }\n                            matching.splice(i, 1);\n                            break;\n                        }\n\n                        // Make sure the value type matches the input type\n                        if (values[j].type !== inputs[j].baseType) {\n                            matching.splice(i, 1);\n                            break;\n                        }\n                    }\n                }\n            }\n\n            // We found a single matching signature with an overrides, but the\n            // last value is something that cannot possibly be an options\n            if (matching.length === 1 && values && values.length !== matching[0].inputs.length) {\n                const lastArg = values[values.length - 1];\n                if (lastArg == null || Array.isArray(lastArg) || typeof lastArg !== 'object') {\n                    matching.splice(0, 1);\n                }\n            }\n\n            if (matching.length === 0) {\n                return null;\n            }\n\n            if (matching.length > 1 && forceUnique) {\n                const matchStr = matching.map((m) => JSON.stringify(m.format())).join(', ');\n                assertArgument(false, `ambiguous function description (i.e. matches ${matchStr})`, 'key', key);\n            }\n\n            return matching[0];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.#functions.get(FunctionFragment.from(key).format());\n        if (result) {\n            return result;\n        }\n\n        return null;\n    }\n\n    /**\n     *  Get the function name for %%key%%, which may be a function selector,\n     *  function name or function signature that belongs to the ABI.\n     */\n    getFunctionName(key: string): string {\n        const fragment = this.#getFunction(key, null, false);\n        assertArgument(fragment, 'no matching function', 'key', key);\n        return fragment.name;\n    }\n\n    /**\n     *  Returns true if %%key%% (a function selector, function name or\n     *  function signature) is present in the ABI.\n     *\n     *  In the case of a function name, the name may be ambiguous, so\n     *  accessing the [[FunctionFragment]] may require refinement.\n     */\n    hasFunction(key: string): boolean {\n        return !!this.#getFunction(key, null, false);\n    }\n\n    /**\n     *  Get the [[FunctionFragment]] for %%key%%, which may be a function\n     *  selector, function name or function signature that belongs to the ABI.\n     *\n     *  If %%values%% is provided, it will use the Typed API to handle\n     *  ambiguous cases where multiple functions match by name.\n     *\n     *  If the %%key%% and %%values%% do not refine to a single function in\n     *  the ABI, this will throw.\n     */\n    getFunction(key: string, values?: Array<any | Typed>): null | FunctionFragment {\n        return this.#getFunction(key, values || null, true);\n    }\n\n    /**\n     *  Iterate over all functions, calling %%callback%%, sorted by their name.\n     */\n    forEachFunction(callback: (func: FunctionFragment, index: number) => void): void {\n        const names = Array.from(this.#functions.keys());\n        names.sort((a, b) => a.localeCompare(b));\n        for (let i = 0; i < names.length; i++) {\n            const name = names[i];\n            callback(<FunctionFragment>this.#functions.get(name), i);\n        }\n    }\n\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    #getEvent(key: string, values: null | Array<null | any | Typed>, forceUnique: boolean): null | EventFragment {\n        // EventTopic\n        if (isHexString(key)) {\n            const eventTopic = key.toLowerCase();\n            for (const fragment of this.#events.values()) {\n                if (eventTopic === fragment.topicHash) {\n                    return fragment;\n                }\n            }\n            return null;\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (key.indexOf('(') === -1) {\n            const matching: EventFragment[] = [];\n            for (const [name, fragment] of this.#events) {\n                if (name.split('(' /* fix:) */)[0] === key) {\n                    matching.push(fragment);\n                }\n            }\n\n            if (values) {\n                // Remove all matches that don't have a compatible length.\n                for (let i = matching.length - 1; i >= 0; i--) {\n                    if (matching[i].inputs.length < values.length) {\n                        matching.splice(i, 1);\n                    }\n                }\n\n                // Remove all matches that don't match the Typed signature\n                for (let i = matching.length - 1; i >= 0; i--) {\n                    const inputs = matching[i].inputs;\n                    for (let j = 0; j < values.length; j++) {\n                        // Not a typed value\n                        if (!Typed.isTyped(values[j])) {\n                            continue;\n                        }\n\n                        // Make sure the value type matches the input type\n                        if (values[j].type !== inputs[j].baseType) {\n                            matching.splice(i, 1);\n                            break;\n                        }\n                    }\n                }\n            }\n\n            if (matching.length === 0) {\n                return null;\n            }\n\n            if (matching.length > 1 && forceUnique) {\n                const matchStr = matching.map((m) => JSON.stringify(m.format())).join(', ');\n                assertArgument(false, `ambiguous event description (i.e. matches ${matchStr})`, 'key', key);\n            }\n\n            return matching[0];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.#events.get(EventFragment.from(key).format());\n        if (result) {\n            return result;\n        }\n\n        return null;\n    }\n\n    /**\n     *  Get the event name for %%key%%, which may be a topic hash,\n     *  event name or event signature that belongs to the ABI.\n     */\n    getEventName(key: string): string {\n        const fragment = this.#getEvent(key, null, false);\n        assertArgument(fragment, 'no matching event', 'key', key);\n\n        return fragment.name;\n    }\n\n    /**\n     *  Returns true if %%key%% (an event topic hash, event name or\n     *  event signature) is present in the ABI.\n     *\n     *  In the case of an event name, the name may be ambiguous, so\n     *  accessing the [[EventFragment]] may require refinement.\n     */\n    hasEvent(key: string): boolean {\n        return !!this.#getEvent(key, null, false);\n    }\n\n    /**\n     *  Get the [[EventFragment]] for %%key%%, which may be a topic hash,\n     *  event name or event signature that belongs to the ABI.\n     *\n     *  If %%values%% is provided, it will use the Typed API to handle\n     *  ambiguous cases where multiple events match by name.\n     *\n     *  If the %%key%% and %%values%% do not refine to a single event in\n     *  the ABI, this will throw.\n     */\n    getEvent(key: string, values?: Array<any | Typed>): null | EventFragment {\n        return this.#getEvent(key, values || null, true);\n    }\n\n    /**\n     *  Iterate over all events, calling %%callback%%, sorted by their name.\n     */\n    forEachEvent(callback: (func: EventFragment, index: number) => void): void {\n        const names = Array.from(this.#events.keys());\n        names.sort((a, b) => a.localeCompare(b));\n        for (let i = 0; i < names.length; i++) {\n            const name = names[i];\n            callback(<EventFragment>this.#events.get(name), i);\n        }\n    }\n\n    /**\n     *  Get the [[ErrorFragment]] for %%key%%, which may be an error\n     *  selector, error name or error signature that belongs to the ABI.\n     *\n     *  If %%values%% is provided, it will use the Typed API to handle\n     *  ambiguous cases where multiple errors match by name.\n     *\n     *  If the %%key%% and %%values%% do not refine to a single error in\n     *  the ABI, this will throw.\n     */\n    getError(key: string, values?: Array<any | Typed>): null | ErrorFragment {\n        if (isHexString(key)) {\n            const selector = key.toLowerCase();\n\n            if (BuiltinErrors[selector]) {\n                return ErrorFragment.from(BuiltinErrors[selector].signature);\n            }\n\n            for (const fragment of this.#errors.values()) {\n                if (selector === fragment.selector) {\n                    return fragment;\n                }\n            }\n\n            return null;\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (key.indexOf('(') === -1) {\n            const matching: ErrorFragment[] = [];\n            for (const [name, fragment] of this.#errors) {\n                if (name.split('(' /* fix:) */)[0] === key) {\n                    matching.push(fragment);\n                }\n            }\n\n            if (matching.length === 0) {\n                if (key === 'Error') {\n                    return ErrorFragment.from('error Error(string)');\n                }\n                if (key === 'Panic') {\n                    return ErrorFragment.from('error Panic(uint256)');\n                }\n                return null;\n            } else if (matching.length > 1) {\n                const matchStr = matching.map((m) => JSON.stringify(m.format())).join(', ');\n                assertArgument(false, `ambiguous error description (i.e. ${matchStr})`, 'name', key);\n            }\n\n            return matching[0];\n        }\n\n        // Normalize the signature and lookup the function\n        key = ErrorFragment.from(key).format();\n        if (key === 'Error(string)') {\n            return ErrorFragment.from('error Error(string)');\n        }\n        if (key === 'Panic(uint256)') {\n            return ErrorFragment.from('error Panic(uint256)');\n        }\n\n        const result = this.#errors.get(key);\n        if (result) {\n            return result;\n        }\n\n        return null;\n    }\n\n    /**\n     *  Iterate over all errors, calling %%callback%%, sorted by their name.\n     */\n    forEachError(callback: (func: ErrorFragment, index: number) => void): void {\n        const names = Array.from(this.#errors.keys());\n        names.sort((a, b) => a.localeCompare(b));\n        for (let i = 0; i < names.length; i++) {\n            const name = names[i];\n            callback(<ErrorFragment>this.#errors.get(name), i);\n        }\n    }\n\n    // Get the 4-byte selector used by Solidity to identify a function\n    /*\n    getSelector(fragment: ErrorFragment | FunctionFragment): string {\n        if (typeof(fragment) === \"string\") {\n            const matches: Array<Fragment> = [ ];\n\n            try { matches.push(this.getFunction(fragment)); } catch (error) { }\n            try { matches.push(this.getError(<string>fragment)); } catch (_) { }\n\n            if (matches.length === 0) {\n                logger.throwArgumentError(\"unknown fragment\", \"key\", fragment);\n            } else if (matches.length > 1) {\n                logger.throwArgumentError(\"ambiguous fragment matches function and error\", \"key\", fragment);\n            }\n\n            fragment = matches[0];\n        }\n\n        return dataSlice(id(fragment.format()), 0, 4);\n    }\n        */\n\n    // Get the 32-byte topic hash used by Solidity to identify an event\n    /*\n    getEventTopic(fragment: EventFragment): string {\n        //if (typeof(fragment) === \"string\") { fragment = this.getEvent(eventFragment); }\n        return id(fragment.format());\n    }\n    */\n\n    _decodeParams(params: ReadonlyArray<ParamType | string>, data: BytesLike): Result {\n        return this.#abiCoder.decode(params as any, data);\n    }\n\n    _encodeParams(params: ReadonlyArray<ParamType>, values: ReadonlyArray<any>): string {\n        return this.#abiCoder.encode(params as any, values);\n    }\n\n    /**\n     *  Encodes a ``tx.data`` object for deploying the Contract with\n     *  the %%values%% as the constructor arguments.\n     */\n    encodeDeploy(values?: ReadonlyArray<any>): string {\n        return this._encodeParams(this.deploy.inputs, values || []);\n    }\n\n    /**\n     *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the\n     *  specified error (see [[getError]] for valid values for\n     *  %%key%%).\n     *\n     *  Most developers should prefer the [[parseCallResult]] method instead,\n     *  which will automatically detect a ``CALL_EXCEPTION`` and throw the\n     *  corresponding error.\n     */\n    decodeErrorResult(fragment: ErrorFragment | string, data: BytesLike): Result {\n        if (typeof fragment === 'string') {\n            const f = this.getError(fragment);\n            assertArgument(f, 'unknown error', 'fragment', fragment);\n            fragment = f;\n        }\n\n        assertArgument(\n            dataSlice(data, 0, 4) === fragment.selector,\n            `data signature does not match error ${fragment.name}.`,\n            'data',\n            data\n        );\n\n        return this._decodeParams(fragment.inputs, dataSlice(data, 4));\n    }\n\n    /**\n     *  Encodes the transaction revert data for a call result that\n     *  reverted from the the Contract with the sepcified %%error%%\n     *  (see [[getError]] for valid values for %%fragment%%) with the %%values%%.\n     *\n     *  This is generally not used by most developers, unless trying to mock\n     *  a result from a Contract.\n     */\n    encodeErrorResult(fragment: ErrorFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof fragment === 'string') {\n            const f = this.getError(fragment);\n            assertArgument(f, 'unknown error', 'fragment', fragment);\n            fragment = f;\n        }\n\n        return concat([fragment.selector, this._encodeParams(fragment.inputs, values || [])]);\n    }\n\n    /**\n     *  Decodes the %%data%% from a transaction ``tx.data`` for\n     *  the function specified (see [[getFunction]] for valid values\n     *  for %%fragment%%).\n     *\n     *  Most developers should prefer the [[parseTransaction]] method\n     *  instead, which will automatically detect the fragment.\n     */\n    decodeFunctionData(fragment: FunctionFragment | string, data: BytesLike): Result {\n        if (typeof fragment === 'string') {\n            const f = this.getFunction(fragment);\n            assertArgument(f, 'unknown function', 'fragment', fragment);\n            fragment = f;\n        }\n\n        assertArgument(\n            dataSlice(data, 0, 4) === fragment.selector,\n            `data signature does not match function ${fragment.name}.`,\n            'data',\n            data\n        );\n\n        return this._decodeParams(fragment.inputs, dataSlice(data, 4));\n    }\n\n    /**\n     *  Encodes the ``tx.data`` for a transaction that calls the function\n     *  specified (see [[getFunction]] for valid values for %%fragment%%) with\n     *  the %%values%%.\n     */\n    encodeFunctionData(fragment: FunctionFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof fragment === 'string') {\n            const f = this.getFunction(fragment);\n            assertArgument(f, 'unknown function', 'fragment', fragment);\n            fragment = f;\n        }\n\n        return concat([fragment.selector, this._encodeParams(fragment.inputs, values || [])]);\n    }\n\n    /**\n     *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the\n     *  specified function (see [[getFunction]] for valid values for\n     *  %%key%%).\n     *\n     *  Most developers should prefer the [[parseCallResult]] method instead,\n     *  which will automatically detect a ``CALL_EXCEPTION`` and throw the\n     *  corresponding error.\n     */\n    decodeFunctionResult(fragment: FunctionFragment | string, data: BytesLike): Result {\n        if (typeof fragment === 'string') {\n            const f = this.getFunction(fragment);\n            assertArgument(f, 'unknown function', 'fragment', fragment);\n            fragment = f;\n        }\n\n        let message = 'invalid length for result data';\n\n        const bytes = getBytesCopy(data);\n        if (bytes.length % 32 === 0) {\n            try {\n                return this.#abiCoder.decode(fragment.outputs as any, bytes);\n            } catch (error) {\n                message = 'could not decode result data';\n            }\n        }\n\n        // Call returned data with no error, but the data is junk\n        assert(false, message, 'BAD_DATA', {\n            value: hexlify(bytes),\n            info: { method: fragment.name, signature: fragment.format() },\n        });\n    }\n\n    makeError(_data: BytesLike, tx: CallExceptionTransaction): CallExceptionError {\n        const data = getBytes(_data, 'data');\n\n        const error = AbiCoder.getBuiltinCallException('call', tx, data);\n\n        // Not a built-in error; try finding a custom error\n        const customPrefix = 'execution reverted (unknown custom error)';\n        if (error.message.startsWith(customPrefix)) {\n            const selector = hexlify(data.slice(0, 4));\n\n            const ef = this.getError(selector);\n            if (ef) {\n                try {\n                    const args = this.#abiCoder.decode(ef.inputs as any, data.slice(4));\n                    error.revert = {\n                        name: ef.name,\n                        signature: ef.format(),\n                        args,\n                    };\n                    error.reason = error.revert.signature;\n                    error.message = `execution reverted: ${error.reason}`;\n                } catch (e) {\n                    error.message = `execution reverted (coult not decode custom error)`;\n                }\n            }\n        }\n\n        // Add the invocation, if available\n        const parsed = this.parseTransaction(tx);\n        if (parsed) {\n            error.invocation = {\n                method: parsed.name,\n                signature: parsed.signature,\n                args: parsed.args,\n            };\n        }\n\n        return error;\n    }\n\n    /**\n     *  Encodes the result data (e.g. from an ``eth_call``) for the\n     *  specified function (see [[getFunction]] for valid values\n     *  for %%fragment%%) with %%values%%.\n     *\n     *  This is generally not used by most developers, unless trying to mock\n     *  a result from a Contract.\n     */\n    encodeFunctionResult(fragment: FunctionFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof fragment === 'string') {\n            const f = this.getFunction(fragment);\n            assertArgument(f, 'unknown function', 'fragment', fragment);\n            fragment = f;\n        }\n        return hexlify(this.#abiCoder.encode(fragment.outputs as any, values || []));\n    }\n    /*\n    spelunk(inputs: Array<ParamType>, values: ReadonlyArray<any>, processfunc: (type: string, value: any) => Promise<any>): Promise<Array<any>> {\n        const promises: Array<Promise<>> = [ ];\n        const process = function(type: ParamType, value: any): any {\n            if (type.baseType === \"array\") {\n                return descend(type.child\n            }\n            if (type. === \"address\") {\n            }\n        };\n\n        const descend = function (inputs: Array<ParamType>, values: ReadonlyArray<any>) {\n            if (inputs.length !== values.length) { throw new Error(\"length mismatch\"); }\n            \n        };\n\n        const result: Array<any> = [ ];\n        values.forEach((value, index) => {\n            if (value == null) {\n                topics.push(null);\n            } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            } else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            } else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n    }\n*/\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(fragment: EventFragment | string, values: ReadonlyArray<any>): Array<null | string | Array<string>> {\n        if (typeof fragment === 'string') {\n            const f = this.getEvent(fragment);\n            assertArgument(f, 'unknown event', 'eventFragment', fragment);\n            fragment = f;\n        }\n\n        assert(values.length <= fragment.inputs.length, `too many arguments for ${fragment.format()}`, 'UNEXPECTED_ARGUMENT', {\n            count: values.length,\n            expectedCount: fragment.inputs.length,\n        });\n\n        const topics: Array<null | string | Array<string>> = [];\n        if (!fragment.anonymous) {\n            topics.push(fragment.topicHash);\n        }\n\n        // @TODO: Use the coders for this; to properly support tuples, etc.\n        const encodeTopic = (param: ParamType, value: any): string => {\n            if (param.type === 'string') {\n                return id(value);\n            } else if (param.type === 'bytes') {\n                return keccak256(hexlify(value));\n            }\n\n            if (param.type === 'bool' && typeof value === 'boolean') {\n                value = value ? '0x01' : '0x00';\n            }\n\n            if (param.type.match(/^u?int/)) {\n                value = toBeHex(value);\n            }\n\n            // Check addresses are valid\n            if (param.type === 'address') {\n                this.#abiCoder.encode(['address'], [value]);\n            }\n            return zeroPadValue(hexlify(value), 32);\n            //@TOOD should probably be return toHex(value, 32)\n        };\n\n        values.forEach((value, index) => {\n            const param = (<EventFragment>fragment).inputs[index];\n\n            if (!param.indexed) {\n                assertArgument(\n                    value == null,\n                    'cannot filter non-indexed parameters; must be null',\n                    'contract.' + param.name,\n                    value\n                );\n                return;\n            }\n\n            if (value == null) {\n                topics.push(null);\n            } else if (param.baseType === 'array' || param.baseType === 'tuple') {\n                assertArgument(false, 'filtering with tuples or arrays not supported', 'contract.' + param.name, value);\n            } else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            } else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n\n        return topics;\n    }\n\n    encodeEventLog(fragment: EventFragment | string, values: ReadonlyArray<any>): { data: string; topics: Array<string> } {\n        if (typeof fragment === 'string') {\n            const f = this.getEvent(fragment);\n            assertArgument(f, 'unknown event', 'eventFragment', fragment);\n            fragment = f;\n        }\n\n        const topics: Array<string> = [];\n\n        const dataTypes: Array<ParamType> = [];\n        const dataValues: Array<string> = [];\n\n        if (!fragment.anonymous) {\n            topics.push(fragment.topicHash);\n        }\n\n        assertArgument(values.length === fragment.inputs.length, 'event arguments/values mismatch', 'values', values);\n\n        fragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === 'string') {\n                    topics.push(id(value));\n                } else if (param.type === 'bytes') {\n                    topics.push(keccak256(value));\n                } else if (param.baseType === 'tuple' || param.baseType === 'array') {\n                    // @TODO\n                    throw new Error('not implemented');\n                } else {\n                    topics.push(this.#abiCoder.encode([param.type], [value]));\n                }\n            } else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n\n        return {\n            data: this.#abiCoder.encode(dataTypes as any, dataValues),\n            topics: topics,\n        };\n    }\n\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(fragment: EventFragment | string, data: BytesLike, topics?: ReadonlyArray<string>): Result {\n        if (typeof fragment === 'string') {\n            const f = this.getEvent(fragment);\n            assertArgument(f, 'unknown event', 'eventFragment', fragment);\n            fragment = f;\n        }\n\n        if (topics != null && !fragment.anonymous) {\n            const eventTopic = fragment.topicHash;\n            assertArgument(\n                isHexString(topics[0], 32) && topics[0].toLowerCase() === eventTopic,\n                'fragment/topic mismatch',\n                'topics[0]',\n                topics[0]\n            );\n            topics = topics.slice(1);\n        }\n\n        const indexed: Array<ParamType> = [];\n        const nonIndexed: Array<ParamType> = [];\n        const dynamic: Array<boolean> = [];\n\n        fragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (\n                    param.type === 'string' ||\n                    param.type === 'bytes' ||\n                    param.baseType === 'tuple' ||\n                    param.baseType === 'array'\n                ) {\n                    indexed.push(ParamType.from({ type: 'bytes32', name: param.name }));\n                    dynamic.push(true);\n                } else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            } else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n\n        const resultIndexed = topics != null ? this.#abiCoder.decode(indexed as any, concat(topics)) : null;\n        const resultNonIndexed = this.#abiCoder.decode(nonIndexed as any, data, true);\n\n        //const result: (Array<any> & { [ key: string ]: any }) = [ ];\n        const values: Array<any> = [];\n        const keys: Array<null | string> = [];\n        let nonIndexedIndex = 0,\n            indexedIndex = 0;\n        fragment.inputs.forEach((param, index) => {\n            let value: Indexed | null | unknown = null;\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    value = new Indexed(null);\n                } else if (dynamic[index]) {\n                    value = new Indexed(resultIndexed[indexedIndex++]);\n                } else {\n                    try {\n                        value = resultIndexed[indexedIndex++];\n                    } catch (error) {\n                        value = error;\n                    }\n                }\n            } else {\n                try {\n                    value = resultNonIndexed[nonIndexedIndex++];\n                } catch (error) {\n                    value = error;\n                }\n            }\n\n            values.push(value);\n            keys.push(param.name || null);\n        });\n\n        return Result.fromItems(values, keys);\n    }\n\n    /**\n     *  Parses a transaction, finding the matching function and extracts\n     *  the parameter values along with other useful function details.\n     *\n     *  If the matching function cannot be found, return null.\n     */\n    parseTransaction(tx: { data: string; value?: BigNumberish }): null | TransactionDescription {\n        const data = getBytes(tx.data, 'tx.data');\n        const value = getBigInt(tx.value != null ? tx.value : 0, 'tx.value');\n\n        const fragment = this.getFunction(hexlify(data.slice(0, 4)));\n\n        if (!fragment) {\n            return null;\n        }\n\n        const args = this.#abiCoder.decode(fragment.inputs as any, data.slice(4));\n        return new TransactionDescription(fragment, fragment.selector, args, value);\n    }\n\n    parseCallResult(data: BytesLike): Result {\n        throw new Error('@TODO');\n    }\n\n    /**\n     *  Parses a receipt log, finding the matching event and extracts\n     *  the parameter values along with other useful event details.\n     *\n     *  If the matching event cannot be found, returns null.\n     */\n    parseLog(log: { topics: Array<string>; data: string }): null | LogDescription {\n        const fragment = this.getEvent(log.topics[0]);\n\n        if (!fragment || fragment.anonymous) {\n            return null;\n        }\n\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe just a fragment?\n\n        return new LogDescription(fragment, fragment.topicHash, this.decodeEventLog(fragment, log.data, log.topics));\n    }\n\n    /**\n     *  Parses a revert data, finding the matching error and extracts\n     *  the parameter values along with other useful error details.\n     *\n     *  If the matching event cannot be found, returns null.\n     */\n    parseError(data: BytesLike): null | ErrorDescription {\n        const hexData = hexlify(data);\n\n        const fragment = this.getError(dataSlice(hexData, 0, 4));\n\n        if (!fragment) {\n            return null;\n        }\n\n        const args = this.#abiCoder.decode(fragment.inputs as any, dataSlice(hexData, 4));\n        return new ErrorDescription(fragment, fragment.selector, args);\n    }\n\n    /**\n     *  Creates a new [[Interface]] from the ABI %%value%%.\n     *\n     *  The %%value%% may be provided as an existing [[Interface]] object,\n     *  a JSON-encoded ABI or any Human-Readable ABI format.\n     */\n    static from(value: InterfaceAbi | Interface): Interface {\n        // Already an Interface, which is immutable\n        if (value instanceof Interface) {\n            return value;\n        }\n\n        // JSON\n        if (typeof value === 'string') {\n            return new Interface(JSON.parse(value));\n        }\n\n        // Maybe an interface from an older version, or from a symlinked copy\n        if (typeof (<any>value).format === 'function') {\n            return new Interface((<any>value).format('json'));\n        }\n\n        // Array of fragments\n        return new Interface(value);\n    }\n}\n","import { keccak256, toUtf8Bytes, concat, recoverAddress, SigningKey, joinSignature } from './ethersUtils.js';\nimport { ADDRESS_PREFIX } from './address.js';\nimport { getBase58CheckAddress } from './crypto.js';\nimport { hexStr2byteArray } from './code.js';\n\nexport const TRON_MESSAGE_PREFIX = '\\x19TRON Signed Message:\\n';\n\nexport function hashMessage(message: string | Uint8Array | Array<number>) {\n    if (typeof message === 'string') {\n        message = toUtf8Bytes(message);\n    } else if (Array.isArray(message)) {\n        message = new Uint8Array(message);\n    }\n\n    return keccak256(concat([toUtf8Bytes(TRON_MESSAGE_PREFIX), toUtf8Bytes(String(message.length)), message]));\n}\n\nexport function signMessage(message: string | Uint8Array | Array<number>, privateKey: string) {\n    if (!privateKey.match(/^0x/)) {\n        privateKey = '0x' + privateKey;\n    }\n\n    const signingKey = new SigningKey(privateKey);\n    const messageDigest = hashMessage(message);\n    const signature = signingKey.sign(messageDigest);\n\n    return joinSignature(signature);\n}\n\nexport function verifyMessage(message: string | Uint8Array | Array<number>, signature: string) {\n    if (!signature.match(/^0x/)) {\n        signature = '0x' + signature;\n    }\n    const recovered = recoverAddress(hashMessage(message), signature);\n    const base58Address = getBase58CheckAddress(hexStr2byteArray(recovered.replace(/^0x/, ADDRESS_PREFIX)));\n\n    return base58Address;\n}\n","// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nimport google_protobuf_any_pb from '@tronweb3/google-protobuf/google/protobuf/any_pb.js';\n\nimport '../protocol/core/Tron_pb.cjs';\nconst { Transaction, Permission, Key } = globalThis.TronWebProto;\n\nimport '../protocol/core/contract/balance_contract_pb.cjs';\nconst {\n    TransferContract,\n    FreezeBalanceContract,\n    UnfreezeBalanceContract,\n    WithdrawBalanceContract,\n    FreezeBalanceV2Contract,\n    UnfreezeBalanceV2Contract,\n    WithdrawExpireUnfreezeContract,\n    DelegateResourceContract,\n    UnDelegateResourceContract,\n} = globalThis.TronWebProto;\n\nimport '../protocol/core/contract/asset_issue_contract_pb.cjs';\nconst { TransferAssetContract, ParticipateAssetIssueContract, AssetIssueContract, UpdateAssetContract } = globalThis.TronWebProto;\n\nimport '../protocol/core/contract/smart_contract_pb.cjs';\nconst {\n    TriggerSmartContract,\n    ClearABIContract,\n    UpdateEnergyLimitContract,\n    UpdateSettingContract,\n    CreateSmartContract,\n    SmartContract,\n} = globalThis.TronWebProto;\n\nimport '../protocol/core/contract/common_pb.cjs';\nconst { ResourceCode } = globalThis.TronWebProto;\n\nimport '../protocol/core/contract/witness_contract_pb.cjs';\nconst { WitnessCreateContract, VoteWitnessContract } = globalThis.TronWebProto;\n\nimport '../protocol/core/contract/storage_contract_pb.cjs';\nconst { UpdateBrokerageContract } = globalThis.TronWebProto;\n\nimport '../protocol/core/contract/account_contract_pb.cjs';\nconst { AccountCreateContract, AccountUpdateContract, SetAccountIdContract, AccountPermissionUpdateContract } =\n    globalThis.TronWebProto;\n\nimport '../protocol/core/contract/proposal_contract_pb.cjs';\nconst { ProposalCreateContract, ProposalDeleteContract, ProposalApproveContract } = globalThis.TronWebProto;\n\nimport '../protocol/core/contract/exchange_contract_pb.cjs';\nconst { ExchangeCreateContract, ExchangeInjectContract, ExchangeWithdrawContract, ExchangeTransactionContract } =\n    globalThis.TronWebProto;\n\nimport { byteArray2hexStr } from './bytes.js';\nimport { sha256, keccak256 } from './ethersUtils.js';\nimport TronWeb from '../tronweb.js';\n\nconst fromHexString = (hexString: string) => {\n    if (!hexString || hexString.length === 0) return new Uint8Array([]);\n    return new Uint8Array(\n        TronWeb.address\n            .toHex(hexString)\n            .match(/.{1,2}/g)\n            .map((byte: string) => parseInt(byte, 16))\n    );\n};\n\nconst sha3 = (string: string, prefix = true) => {\n    return (prefix ? '0x' : '') + keccak256(Buffer.from(string, 'utf-8')).toString().substring(2);\n};\n\nconst buildCommonTransaction = (message, contractType, typeName, permissionId) => {\n    const anyValue = new google_protobuf_any_pb.Any();\n    anyValue.pack(message.serializeBinary(), 'protocol.' + typeName);\n    const contract = new Transaction.Contract();\n    contract.setType(contractType);\n    contract.setParameter(anyValue);\n    if (permissionId) {\n        contract.setPermissionId(permissionId);\n    }\n    const raw = new Transaction.raw();\n    raw.addContract(contract);\n    const transaction = new Transaction();\n    transaction.setRawData(raw);\n    return transaction;\n};\n\n// wallet/createtransaction for sendTrx\nconst buildTransferContract = (value, options) => {\n    const { to_address, owner_address, amount } = value;\n    const transferContract = new TransferContract();\n    transferContract.setToAddress(fromHexString(to_address));\n    transferContract.setOwnerAddress(fromHexString(owner_address));\n    transferContract.setAmount(amount);\n    return buildCommonTransaction(\n        transferContract,\n        Transaction.Contract.ContractType.TRANSFERCONTRACT,\n        'TransferContract',\n        options.Permission_id\n    );\n};\n\n// wallet/transferasset for sendToken\nconst buildTransferAssetContract = (value, options) => {\n    const { to_address, owner_address, amount, asset_name } = value;\n    const transferContract = new TransferAssetContract();\n    transferContract.setToAddress(fromHexString(to_address));\n    transferContract.setOwnerAddress(fromHexString(owner_address));\n    transferContract.setAssetName(fromHexString(asset_name.replace(/^0x/, '')));\n    transferContract.setAmount(amount);\n    return buildCommonTransaction(\n        transferContract,\n        Transaction.Contract.ContractType.TRANSFERASSETCONTRACT,\n        'TransferAssetContract',\n        options.Permission_id\n    );\n};\n\n// wallet/participateassetissue for purchaseToken\nconst buildParticipateAssetIssueContract = (value, options) => {\n    const pbObj = new ParticipateAssetIssueContract();\n    pbObj.setToAddress(fromHexString(value.to_address));\n    pbObj.setOwnerAddress(fromHexString(value.owner_address));\n    pbObj.setAssetName(fromHexString(value.asset_name.replace(/^0x/, '')));\n    pbObj.setAmount(value.amount);\n\n    return buildCommonTransaction(\n        pbObj,\n        Transaction.Contract.ContractType.PARTICIPATEASSETISSUECONTRACT,\n        'ParticipateAssetIssueContract',\n        options.Permission_id\n    );\n};\n\nconst buildTriggerSmartContract = (value, options) => {\n    const triggerSmartContract = new TriggerSmartContract();\n    const {\n        owner_address,\n        contract_address,\n        parameter = '',\n        function_selector,\n        call_value,\n        call_token_value,\n        token_id,\n        data,\n    } = value;\n    triggerSmartContract.setOwnerAddress(fromHexString(owner_address));\n    triggerSmartContract.setContractAddress(fromHexString(contract_address));\n    triggerSmartContract.setCallValue(call_value);\n    if (data) {\n        triggerSmartContract.setData(fromHexString(data));\n    } else if (function_selector) {\n        const contractData = sha3(function_selector).substring(2, 10) + parameter;\n        triggerSmartContract.setData(fromHexString(contractData));\n    }\n\n    if (token_id) {\n        triggerSmartContract.setTokenId(token_id);\n    }\n    if (call_token_value) {\n        triggerSmartContract.setCallTokenValue(call_token_value);\n    }\n\n    return buildCommonTransaction(\n        triggerSmartContract,\n        Transaction.Contract.ContractType.TRIGGERSMARTCONTRACT,\n        'TriggerSmartContract',\n        options.Permission_id\n    );\n};\n\nconst buildFreezeBalanceContract = (value, options) => {\n    const freezeBalanceContract = new FreezeBalanceContract();\n    const { owner_address, frozen_balance, frozen_duration, resource, receiver_address } = value;\n    freezeBalanceContract.setOwnerAddress(fromHexString(owner_address));\n    freezeBalanceContract.setFrozenBalance(frozen_balance);\n    freezeBalanceContract.setFrozenDuration(frozen_duration);\n    if (resource) {\n        freezeBalanceContract.setResource(ResourceCode[resource]);\n    }\n    if (receiver_address) {\n        freezeBalanceContract.setReceiverAddress(fromHexString(receiver_address));\n    }\n\n    return buildCommonTransaction(\n        freezeBalanceContract,\n        Transaction.Contract.ContractType.FREEZEBALANCECONTRACT,\n        'FreezeBalanceContract',\n        options.Permission_id\n    );\n};\n\nconst buildUnfreezeBalanceContract = (value, options) => {\n    const unfreezeBalanceContract = new UnfreezeBalanceContract();\n    const { owner_address, resource, receiver_address } = value;\n    unfreezeBalanceContract.setOwnerAddress(fromHexString(owner_address));\n    if (resource) {\n        unfreezeBalanceContract.setResource(ResourceCode[resource]);\n    }\n    if (receiver_address) {\n        unfreezeBalanceContract.setReceiverAddress(fromHexString(receiver_address));\n    }\n\n    return buildCommonTransaction(\n        unfreezeBalanceContract,\n        Transaction.Contract.ContractType.UNFREEZEBALANCECONTRACT,\n        'UnfreezeBalanceContract',\n        options.Permission_id\n    );\n};\n\nconst buildWithdrawBalanceContract = (value, options) => {\n    const withdrawbalanceContract = new WithdrawBalanceContract();\n    const { owner_address } = value;\n    withdrawbalanceContract.setOwnerAddress(fromHexString(owner_address));\n\n    return buildCommonTransaction(\n        withdrawbalanceContract,\n        Transaction.Contract.ContractType.WITHDRAWBALANCECONTRACT,\n        'WithdrawBalanceContract',\n        options.Permission_id\n    );\n};\n\nconst buildFreezeBalanceV2Contract = (value, options) => {\n    const freezeBalanceV2Contract = new FreezeBalanceV2Contract();\n    const { owner_address, frozen_balance, resource } = value;\n    freezeBalanceV2Contract.setOwnerAddress(fromHexString(owner_address));\n    freezeBalanceV2Contract.setFrozenBalance(frozen_balance);\n    freezeBalanceV2Contract.setResource(ResourceCode[resource]);\n\n    return buildCommonTransaction(\n        freezeBalanceV2Contract,\n        Transaction.Contract.ContractType.FREEZEBALANCEV2CONTRACT,\n        'FreezeBalanceV2Contract',\n        options.Permission_id\n    );\n};\n\nconst buildCancelFreezeBalanceV2Contract = (value, options) => {\n    const withdrawExpireUnfreeze = new WithdrawExpireUnfreezeContract();\n    const { owner_address } = value;\n    withdrawExpireUnfreeze.setOwnerAddress(fromHexString(owner_address));\n\n    return buildCommonTransaction(\n        withdrawExpireUnfreeze,\n        Transaction.Contract.ContractType.CANCELALLUNFREEZEV2CONTRACT,\n        'CancelAllUnfreezeV2Contract',\n        options.Permission_id\n    );\n};\n\nconst buildUnfreezeBalanceV2Contract = (value, options) => {\n    const unfreezeBalanceV2Contract = new UnfreezeBalanceV2Contract();\n    const { owner_address, unfreeze_balance, resource } = value;\n    unfreezeBalanceV2Contract.setOwnerAddress(fromHexString(owner_address));\n    unfreezeBalanceV2Contract.setUnfreezeBalance(unfreeze_balance);\n    unfreezeBalanceV2Contract.setResource(ResourceCode[resource]);\n\n    return buildCommonTransaction(\n        unfreezeBalanceV2Contract,\n        Transaction.Contract.ContractType.UNFREEZEBALANCEV2CONTRACT,\n        'UnfreezeBalanceV2Contract',\n        options.Permission_id\n    );\n};\n\nconst buildDelegateResourceContract = (value, options) => {\n    const delegateResourceContract = new DelegateResourceContract();\n    const { owner_address, receiver_address, balance, resource, lock = false, lock_period } = value;\n    delegateResourceContract.setOwnerAddress(fromHexString(owner_address));\n    delegateResourceContract.setBalance(balance);\n    delegateResourceContract.setResource(ResourceCode[resource]);\n    delegateResourceContract.setLock(lock);\n    delegateResourceContract.setLockPeriod(lock_period);\n    delegateResourceContract.setReceiverAddress(fromHexString(receiver_address));\n\n    return buildCommonTransaction(\n        delegateResourceContract,\n        Transaction.Contract.ContractType.DELEGATERESOURCECONTRACT,\n        'DelegateResourceContract',\n        options.Permission_id\n    );\n};\n\nconst buildUnDelegateResourceContract = (value, options) => {\n    const unDelegateResourceContract = new UnDelegateResourceContract();\n    const { owner_address, receiver_address, balance, resource } = value;\n    unDelegateResourceContract.setOwnerAddress(fromHexString(owner_address));\n    unDelegateResourceContract.setBalance(balance);\n    unDelegateResourceContract.setResource(ResourceCode[resource]);\n    unDelegateResourceContract.setReceiverAddress(fromHexString(receiver_address));\n\n    return buildCommonTransaction(\n        unDelegateResourceContract,\n        Transaction.Contract.ContractType.UNDELEGATERESOURCECONTRACT,\n        'UnDelegateResourceContract',\n        options.Permission_id\n    );\n};\n\nconst buildWithdrawExpireUnfreezeContract = (value, options) => {\n    const withdrawExpireUnfreeze = new WithdrawExpireUnfreezeContract();\n    const { owner_address } = value;\n    withdrawExpireUnfreeze.setOwnerAddress(fromHexString(owner_address));\n\n    return buildCommonTransaction(\n        withdrawExpireUnfreeze,\n        Transaction.Contract.ContractType.WITHDRAWEXPIREUNFREEZECONTRACT,\n        'WithdrawExpireUnfreezeContract',\n        options.Permission_id\n    );\n};\n\n// applyForSR\nconst buildCreateWitness = (value, options) => {\n    const createWitnessContract = new WitnessCreateContract();\n    const { owner_address, url } = value;\n    createWitnessContract.setOwnerAddress(fromHexString(owner_address));\n    createWitnessContract.setUrl(fromHexString(url.replace(/^0x/, '')));\n    return buildCommonTransaction(\n        createWitnessContract,\n        Transaction.Contract.ContractType.WITNESSCREATECONTRACT,\n        'WitnessCreateContract',\n        options.Permission_id\n    );\n};\n\n// vote\nconst buildVoteWitnessAccount = (value, options) => {\n    const voteWitnessContract = new VoteWitnessContract();\n    const { owner_address, votes } = value;\n    voteWitnessContract.setOwnerAddress(fromHexString(owner_address));\n\n    votes.forEach((voteItem) => {\n        const vote = new VoteWitnessContract.Vote();\n        const { vote_address, vote_count } = voteItem;\n        vote.setVoteAddress(fromHexString(vote_address));\n        const numberOfVotes = parseInt(vote_count);\n        vote.setVoteCount(numberOfVotes);\n        voteWitnessContract.addVotes(vote);\n    });\n\n    return buildCommonTransaction(\n        voteWitnessContract,\n        Transaction.Contract.ContractType.VOTEWITNESSCONTRACT,\n        'VoteWitnessContract',\n        options.Permission_id\n    );\n};\n\nconst buildCreateSmartContract = (value, options) => {\n    const params = value?.new_contract\n        ? {\n              ...{\n                  owner_address: value.owner_address,\n                  call_token_value: value.call_token_value,\n                  token_id: value.token_id,\n              },\n              ...value.new_contract,\n          }\n        : value;\n    const {\n        owner_address,\n        consume_user_resource_percent,\n        origin_energy_limit,\n        abi,\n        bytecode = '',\n        parameter = '',\n        call_value,\n        call_token_value,\n        token_id,\n        name: contracName,\n    } = params;\n    let { origin_address } = params;\n\n    const createSmartContract = new CreateSmartContract();\n    createSmartContract.setOwnerAddress(fromHexString(owner_address));\n    if (token_id) {\n        createSmartContract.setTokenId(token_id);\n    }\n    if (call_token_value) {\n        createSmartContract.setCallTokenValue(call_token_value);\n    }\n    const smartContractBuilder = new SmartContract();\n\n    if (abi) {\n        let abiJson;\n        if (typeof abi === 'string') {\n            abiJson = JSON.parse(abi);\n        } else {\n            abiJson = abi?.entrys || []; // abi could be an empty object if origin abi is `[]`;\n        }\n        const abiBuilder = new SmartContract.ABI();\n\n        const buildEntryParam = (data) => {\n            const param = new SmartContract.ABI.Entry.Param();\n            const { indexed, name, type } = data;\n            if (indexed === true) {\n                param.setIndexed(true);\n            }\n            param.setName(name);\n            param.setType(type);\n            return param;\n        };\n        const entryBuilders = abiJson.map((entry) => {\n            const { anonymous, constant, name, inputs, outputs, type, payable, stateMutability } = entry;\n            const entryBuilder = new SmartContract.ABI.Entry();\n            entryBuilder.setAnonymous(anonymous);\n            entryBuilder.setConstant(constant);\n            entryBuilder.setName(name);\n            if (inputs) {\n                entryBuilder.setInputsList(inputs.map((input) => buildEntryParam(input)));\n            }\n            if (outputs) {\n                entryBuilder.setOutputsList(outputs.map((output) => buildEntryParam(output)));\n            }\n            if (type) {\n                entryBuilder.setType(SmartContract.ABI.Entry.EntryType[type.toUpperCase()]);\n            }\n\n            entryBuilder.setPayable(payable);\n            if (stateMutability) {\n                entryBuilder.setStatemutability(SmartContract.ABI.Entry.StateMutabilityType[stateMutability.toUpperCase()]);\n            }\n\n            return entryBuilder;\n        });\n        abiBuilder.setEntrysList(entryBuilders);\n        smartContractBuilder.setAbi(abiBuilder);\n    }\n\n    if (call_value) {\n        smartContractBuilder.setCallValue(call_value);\n    }\n\n    smartContractBuilder.setConsumeUserResourcePercent(consume_user_resource_percent);\n    smartContractBuilder.setOriginEnergyLimit(origin_energy_limit);\n\n    if (!origin_address) {\n        origin_address = owner_address;\n    }\n    smartContractBuilder.setOriginAddress(fromHexString(origin_address));\n\n    if (bytecode) {\n        const bytecodeParameter = bytecode.replace(/^0x/, '') + parameter.replace(/^0x/, '');\n        smartContractBuilder.setBytecode(fromHexString(bytecodeParameter));\n    }\n\n    smartContractBuilder.setName(contracName);\n\n    createSmartContract.setNewContract(smartContractBuilder);\n\n    return buildCommonTransaction(\n        createSmartContract,\n        Transaction.Contract.ContractType.CREATESMARTCONTRACT,\n        'CreateSmartContract',\n        options.Permission_id\n    );\n};\n\nconst buildClearABIContract = (value, options) => {\n    const { contract_address, owner_address } = value;\n    const clearABIContract = new ClearABIContract();\n    clearABIContract.setOwnerAddress(fromHexString(owner_address));\n    clearABIContract.setContractAddress(fromHexString(contract_address));\n\n    return buildCommonTransaction(\n        clearABIContract,\n        Transaction.Contract.ContractType.CLEARABICONTRACT,\n        'ClearABIContract',\n        options.Permission_id\n    );\n};\n\n// updateBrokerage\nconst buildUpdateBrokerageContract = (value, options) => {\n    const { brokerage, owner_address } = value;\n    const updateBrokerageContract = new UpdateBrokerageContract();\n    updateBrokerageContract.setOwnerAddress(fromHexString(owner_address));\n    updateBrokerageContract.setBrokerage(brokerage);\n\n    return buildCommonTransaction(\n        updateBrokerageContract,\n        Transaction.Contract.ContractType.UPDATEBROKERAGECONTRACT,\n        'UpdateBrokerageContract',\n        options.Permission_id\n    );\n};\n\n// createToken\nconst buildAssetIssueContract = (value, options) => {\n    const {\n        owner_address,\n        name,\n        abbr,\n        description,\n        url,\n        total_supply,\n        trx_num,\n        num,\n        start_time,\n        end_time,\n        precision,\n        free_asset_net_limit,\n        public_free_asset_net_limit,\n        public_free_asset_net_usage = 0,\n        public_latest_free_net_time = 0,\n        vote_score = 0,\n        frozen_supply,\n    } = value;\n    const assetIssueContract = new AssetIssueContract();\n    assetIssueContract.setOwnerAddress(fromHexString(owner_address));\n    if (name) {\n        assetIssueContract.setName(fromHexString(name.replace(/^0x/, '')));\n    }\n    if (abbr) {\n        assetIssueContract.setAbbr(fromHexString(abbr.replace(/^0x/, '')));\n    }\n    assetIssueContract.setTotalSupply(total_supply);\n    assetIssueContract.setNum(num);\n    assetIssueContract.setEndTime(end_time);\n    assetIssueContract.setStartTime(start_time);\n    assetIssueContract.setTrxNum(trx_num);\n    assetIssueContract.setVoteScore(vote_score);\n    if (precision) {\n        assetIssueContract.setPrecision(precision);\n    }\n    if (public_latest_free_net_time) {\n        assetIssueContract.setPublicLatestFreeNetTime(public_latest_free_net_time);\n    }\n    if (description) {\n        assetIssueContract.setDescription(fromHexString(description.replace(/^0x/, '')));\n    }\n    if (url) {\n        assetIssueContract.setUrl(fromHexString(url.replace(/^0x/, '')));\n    }\n\n    assetIssueContract.setPublicFreeAssetNetUsage(public_free_asset_net_usage);\n    assetIssueContract.setFreeAssetNetLimit(free_asset_net_limit);\n    assetIssueContract.setPublicFreeAssetNetLimit(public_free_asset_net_limit);\n    if (frozen_supply) {\n        const frozenSupplyContract = new AssetIssueContract.FrozenSupply();\n        frozenSupplyContract.setFrozenAmount(frozen_supply.length ? frozen_supply[0].frozen_amount : frozen_supply.frozen_amount);\n        frozenSupplyContract.setFrozenDays(frozen_supply.length ? frozen_supply[0].frozen_days : frozen_supply.frozen_days);\n        assetIssueContract.addFrozenSupply(frozenSupplyContract);\n    }\n    return buildCommonTransaction(\n        assetIssueContract,\n        Transaction.Contract.ContractType.ASSETISSUECONTRACT,\n        'AssetIssueContract',\n        options.Permission_id\n    );\n};\n\n//createAccount\nconst buildAccountCreateContract = (value, options) => {\n    const accountCreateContract = new AccountCreateContract();\n    const { account_address, owner_address } = value;\n    accountCreateContract.setOwnerAddress(fromHexString(owner_address));\n    accountCreateContract.setAccountAddress(fromHexString(account_address.replace(/^0x/, '')));\n    return buildCommonTransaction(\n        accountCreateContract,\n        Transaction.Contract.ContractType.ACCOUNTCREATECONTRACT,\n        'AccountCreateContract',\n        options.Permission_id\n    );\n};\n\n// updateAccount\nconst buildAccountUpdateContract = (value, options) => {\n    const accountUpdateContract = new AccountUpdateContract();\n    const { account_name, owner_address } = value;\n    accountUpdateContract.setOwnerAddress(fromHexString(owner_address));\n    accountUpdateContract.setAccountName(fromHexString(account_name.replace(/^0x/, '')));\n    return buildCommonTransaction(\n        accountUpdateContract,\n        Transaction.Contract.ContractType.ACCOUNTUPDATECONTRACT,\n        'AccountUpdateContract',\n        options.Permission_id\n    );\n};\n\n// setAccountId\nconst buildSetAccountIdContract = (value, options) => {\n    const setAccountIdContract = new SetAccountIdContract();\n    const { account_id, owner_address } = value;\n    setAccountIdContract.setOwnerAddress(fromHexString(owner_address));\n    setAccountIdContract.setAccountId(fromHexString(account_id.replace(/^0x/, '')));\n    return buildCommonTransaction(\n        setAccountIdContract,\n        Transaction.Contract.ContractType.SETACCOUNTIDCONTRACT,\n        'SetAccountIdContract',\n        options.Permission_id\n    );\n};\n\nconst buildProposalCreateContract = (value, options) => {\n    const proposalCreateContract = new ProposalCreateContract();\n    const { owner_address, parameters } = value;\n    proposalCreateContract.setOwnerAddress(fromHexString(owner_address));\n    parameters.forEach((parameter) => {\n        proposalCreateContract.getParametersMap().set(parameter.key, parameter.value);\n    });\n    return buildCommonTransaction(\n        proposalCreateContract,\n        Transaction.Contract.ContractType.PROPOSALCREATECONTRACT,\n        'ProposalCreateContract',\n        options.Permission_id\n    );\n};\n\nconst buildProposalDeleteContract = (value, options) => {\n    const proposalDeleteContract = new ProposalDeleteContract();\n    const { owner_address, proposal_id } = value;\n    proposalDeleteContract.setOwnerAddress(fromHexString(owner_address));\n    proposalDeleteContract.setProposalId(proposal_id);\n    return buildCommonTransaction(\n        proposalDeleteContract,\n        Transaction.Contract.ContractType.PROPOSALDELETECONTRACT,\n        'ProposalDeleteContract',\n        options.Permission_id\n    );\n};\n\nconst buildVoteProposalContract = (value, options) => {\n    const proposalVoteContract = new ProposalApproveContract();\n    const { owner_address, proposal_id, is_add_approval } = value;\n    proposalVoteContract.setOwnerAddress(fromHexString(owner_address));\n    proposalVoteContract.setProposalId(proposal_id);\n    proposalVoteContract.setIsAddApproval(is_add_approval);\n    return buildCommonTransaction(\n        proposalVoteContract,\n        Transaction.Contract.ContractType.PROPOSALAPPROVECONTRACT,\n        'ProposalApproveContract',\n        options.Permission_id\n    );\n};\n\nconst buildExchangeCreateContract = (value, options) => {\n    const exchangeCreateContract = new ExchangeCreateContract();\n    const { owner_address, first_token_id, first_token_balance, second_token_id, second_token_balance } = value;\n    exchangeCreateContract.setOwnerAddress(fromHexString(owner_address));\n    exchangeCreateContract.setFirstTokenId(fromHexString(first_token_id.replace(/^0x/, '')));\n    exchangeCreateContract.setFirstTokenBalance(first_token_balance);\n    exchangeCreateContract.setSecondTokenId(fromHexString(second_token_id.replace(/^0x/, '')));\n    exchangeCreateContract.setSecondTokenBalance(second_token_balance);\n    return buildCommonTransaction(\n        exchangeCreateContract,\n        Transaction.Contract.ContractType.EXCHANGECREATECONTRACT,\n        'ExchangeCreateContract',\n        options.Permission_id\n    );\n};\n\nconst buildExchangeInjectContract = (value, options) => {\n    const exchangeInjectContract = new ExchangeInjectContract();\n    const { owner_address, exchange_id, token_id, quant } = value;\n    exchangeInjectContract.setOwnerAddress(fromHexString(owner_address));\n    exchangeInjectContract.setExchangeId(exchange_id);\n    exchangeInjectContract.setTokenId(fromHexString(token_id.replace(/^0x/, '')));\n    exchangeInjectContract.setQuant(quant);\n    return buildCommonTransaction(\n        exchangeInjectContract,\n        Transaction.Contract.ContractType.EXCHANGEINJECTCONTRACT,\n        'ExchangeInjectContract',\n        options.Permission_id\n    );\n};\n\nconst buildExchangeWithdrawContract = (value, options) => {\n    const exchangeWithdrawContract = new ExchangeWithdrawContract();\n    const { owner_address, exchange_id, token_id, quant } = value;\n    exchangeWithdrawContract.setOwnerAddress(fromHexString(owner_address));\n    exchangeWithdrawContract.setExchangeId(exchange_id);\n    exchangeWithdrawContract.setTokenId(fromHexString(token_id.replace(/^0x/, '')));\n    exchangeWithdrawContract.setQuant(quant);\n    return buildCommonTransaction(\n        exchangeWithdrawContract,\n        Transaction.Contract.ContractType.EXCHANGEWITHDRAWCONTRACT,\n        'ExchangeWithdrawContract',\n        options.Permission_id\n    );\n};\n\nconst buildExchangeTransactionContract = (value, options) => {\n    const exchangeTransactionContract = new ExchangeTransactionContract();\n    const { owner_address, exchange_id, token_id, quant, expected } = value;\n    exchangeTransactionContract.setOwnerAddress(fromHexString(owner_address));\n    exchangeTransactionContract.setExchangeId(exchange_id);\n    exchangeTransactionContract.setTokenId(fromHexString(token_id.replace(/^0x/, '')));\n    exchangeTransactionContract.setQuant(quant);\n    exchangeTransactionContract.setExpected(expected);\n    return buildCommonTransaction(\n        exchangeTransactionContract,\n        Transaction.Contract.ContractType.EXCHANGETRANSACTIONCONTRACT,\n        'ExchangeTransactionContract',\n        options.Permission_id\n    );\n};\n\nconst buildUpdateSettingContract = (value, options) => {\n    const updateSettingContract = new UpdateSettingContract();\n    const { owner_address, contract_address, consume_user_resource_percent } = value;\n    updateSettingContract.setOwnerAddress(fromHexString(owner_address));\n    updateSettingContract.setContractAddress(fromHexString(contract_address));\n    updateSettingContract.setConsumeUserResourcePercent(consume_user_resource_percent);\n    return buildCommonTransaction(\n        updateSettingContract,\n        Transaction.Contract.ContractType.UPDATESETTINGCONTRACT,\n        'UpdateSettingContract',\n        options.Permission_id\n    );\n};\n\nconst buildUpdateEnergyLimitContract = (value, options) => {\n    const updateEnergyLimitContract = new UpdateEnergyLimitContract();\n    const { owner_address, contract_address, origin_energy_limit } = value;\n    updateEnergyLimitContract.setOwnerAddress(fromHexString(owner_address));\n    updateEnergyLimitContract.setContractAddress(fromHexString(contract_address));\n    updateEnergyLimitContract.setOriginEnergyLimit(origin_energy_limit);\n    return buildCommonTransaction(\n        updateEnergyLimitContract,\n        Transaction.Contract.ContractType.UPDATEENERGYLIMITCONTRACT,\n        'UpdateEnergyLimitContract',\n        options.Permission_id\n    );\n};\n\nconst buildAccountPermissionUpdateContract = (value, options) => {\n    const accountPermissionUpdateContract = new AccountPermissionUpdateContract();\n    const { owner_address, owner, witness, actives } = value;\n    accountPermissionUpdateContract.setOwnerAddress(fromHexString(owner_address));\n    const getType = (type) => {\n        // no type when permission_name is owner\n        if (isNaN(type)) return type === 'Active' ? 2 : type === 'Witness' ? 1 : 0;\n        return type;\n    };\n    const buildPermission = (data) => {\n        // no type when permission_name is owner\n        const permission = new Permission();\n        const { type, id, permission_name, threshold, parentId, operations, keys } = data;\n        permission.setType(getType(type));\n        permission.setId(id);\n        permission.setPermissionName(permission_name);\n        permission.setThreshold(threshold);\n        if (parentId) {\n            permission.setParentId(parentId);\n        }\n        if (operations) {\n            permission.setOperations(fromHexString(operations));\n        }\n        if (keys) {\n            permission.setKeysList(\n                keys.map((key) => {\n                    const keyBuilder = new Key();\n                    keyBuilder.setAddress(fromHexString(key.address));\n                    keyBuilder.setWeight(key.weight);\n                    return keyBuilder;\n                })\n            );\n        }\n        return permission;\n    };\n    if (owner) {\n        accountPermissionUpdateContract.setOwner(buildPermission(owner));\n    }\n    if (witness) {\n        accountPermissionUpdateContract.setWitness(buildPermission(witness));\n    }\n    if (actives) {\n        if (Array.isArray(actives)) {\n            accountPermissionUpdateContract.setActivesList(actives.map((active) => buildPermission(active)));\n        } else {\n            accountPermissionUpdateContract.setActivesList([buildPermission(actives)]);\n        }\n    }\n    return buildCommonTransaction(\n        accountPermissionUpdateContract,\n        Transaction.Contract.ContractType.ACCOUNTPERMISSIONUPDATECONTRACT,\n        'AccountPermissionUpdateContract',\n        options.Permission_id\n    );\n};\n\nconst buildUpdateAssetContract = (value, options) => {\n    const updateAssetContract = new UpdateAssetContract();\n    const { owner_address, description, url, new_limit, new_public_limit } = value;\n    updateAssetContract.setOwnerAddress(fromHexString(owner_address));\n    if (description) {\n        updateAssetContract.setDescription(fromHexString(description.replace(/^0x/, '')));\n    }\n    if (url) {\n        updateAssetContract.setUrl(fromHexString(url.replace(/^0x/, '')));\n    }\n    if (new_limit) {\n        updateAssetContract.setNewLimit(new_limit);\n    }\n    if (new_public_limit) {\n        updateAssetContract.setNewPublicLimit(new_public_limit);\n    }\n    return buildCommonTransaction(\n        updateAssetContract,\n        Transaction.Contract.ContractType.UPDATEASSETCONTRACT,\n        'UpdateAssetContract',\n        options.Permission_id\n    );\n};\n\nconst contractJsonToProtobuf = (contract, value, options) => {\n    switch (contract.type) {\n        case 'TransferContract':\n            return buildTransferContract(value, options);\n        case 'TransferAssetContract':\n            return buildTransferAssetContract(value, options);\n        case 'ParticipateAssetIssueContract':\n            return buildParticipateAssetIssueContract(value, options);\n        case 'TriggerSmartContract':\n            return buildTriggerSmartContract(value, options);\n        case 'FreezeBalanceContract':\n            return buildFreezeBalanceContract(value, options);\n        case 'UnfreezeBalanceContract':\n            return buildUnfreezeBalanceContract(value, options);\n        case 'WithdrawBalanceContract':\n            return buildWithdrawBalanceContract(value, options);\n        case 'FreezeBalanceV2Contract':\n            return buildFreezeBalanceV2Contract(value, options);\n        case 'CancelAllUnfreezeV2Contract':\n            return buildCancelFreezeBalanceV2Contract(value, options);\n        case 'UnfreezeBalanceV2Contract':\n            return buildUnfreezeBalanceV2Contract(value, options);\n        case 'DelegateResourceContract':\n            return buildDelegateResourceContract(value, options);\n        case 'UnDelegateResourceContract':\n            return buildUnDelegateResourceContract(value, options);\n        case 'WithdrawExpireUnfreezeContract':\n            return buildWithdrawExpireUnfreezeContract(value, options);\n        case 'WitnessCreateContract':\n            return buildCreateWitness(value, options);\n        case 'VoteWitnessContract':\n            return buildVoteWitnessAccount(value, options);\n        case 'CreateSmartContract':\n            return buildCreateSmartContract(value, options);\n        case 'ClearABIContract':\n            return buildClearABIContract(value, options);\n        case 'UpdateBrokerageContract':\n            return buildUpdateBrokerageContract(value, options);\n        case 'AssetIssueContract':\n            return buildAssetIssueContract(value, options);\n        case 'AccountCreateContract':\n            return buildAccountCreateContract(value, options);\n        case 'AccountUpdateContract':\n            return buildAccountUpdateContract(value, options);\n        case 'SetAccountIdContract':\n            return buildSetAccountIdContract(value, options);\n        case 'ProposalCreateContract':\n            return buildProposalCreateContract(value, options);\n        case 'ProposalDeleteContract':\n            return buildProposalDeleteContract(value, options);\n        case 'ProposalApproveContract':\n            return buildVoteProposalContract(value, options);\n        case 'ExchangeCreateContract':\n            return buildExchangeCreateContract(value, options);\n        case 'ExchangeInjectContract':\n            return buildExchangeInjectContract(value, options);\n        case 'ExchangeWithdrawContract':\n            return buildExchangeWithdrawContract(value, options);\n        case 'ExchangeTransactionContract':\n            return buildExchangeTransactionContract(value, options);\n        case 'UpdateSettingContract':\n            return buildUpdateSettingContract(value, options);\n        case 'UpdateEnergyLimitContract':\n            return buildUpdateEnergyLimitContract(value, options);\n        case 'AccountPermissionUpdateContract':\n            return buildAccountPermissionUpdateContract(value, options);\n        case 'UpdateAssetContract':\n            return buildUpdateAssetContract(value, options);\n    }\n};\n\nconst txJsonToPb = (transaction) => {\n    const rawData = transaction['raw_data'];\n    const contractJson = rawData.contract[0];\n    const data = contractJson.parameter.value;\n    const options = { Permission_id: contractJson.Permission_id };\n    const transactionObj = contractJsonToProtobuf(contractJson, data, options) as any;\n\n    const rawDataObj = transactionObj.getRawData();\n    rawDataObj.setRefBlockBytes(fromHexString(rawData.ref_block_bytes));\n    rawDataObj.setRefBlockHash(fromHexString(rawData.ref_block_hash));\n    if (rawData.data) {\n        rawDataObj.setData(fromHexString(rawData.data));\n    }\n\n    if (rawData.fee_limit) {\n        rawDataObj.setFeeLimit(rawData.fee_limit);\n    }\n\n    if (rawData.expiration) {\n        rawDataObj.setExpiration(rawData.expiration);\n    }\n\n    if (rawData.timestamp) {\n        rawDataObj.setTimestamp(rawData.timestamp);\n    }\n\n    transactionObj.setRawData(rawDataObj);\n\n    return transactionObj;\n};\n\nconst txJsonToPbWithArgs = (transaction, args: any = {}, options: any = {}) => {\n    const rawData = transaction['raw_data'];\n    const contractJson = rawData.contract[0];\n\n    const transactionObj = contractJsonToProtobuf(contractJson, args, {\n        Permission_id: args?.Permission_id,\n    }) as any;\n\n    const rawDataObj = transactionObj.getRawData();\n    rawDataObj.setRefBlockBytes(fromHexString(rawData.ref_block_bytes));\n    rawDataObj.setRefBlockHash(fromHexString(rawData.ref_block_hash));\n    // for memo\n    if (options.data) {\n        rawDataObj.setData(fromHexString(options.data.replace(/^0x/, '')));\n    }\n\n    if (options.fee_limit || args.fee_limit) {\n        rawDataObj.setFeeLimit(options.fee_limit || args.fee_limit);\n    }\n\n    if (rawData.expiration) {\n        rawDataObj.setExpiration(rawData.expiration);\n    }\n\n    if (rawData.timestamp) {\n        rawDataObj.setTimestamp(rawData.timestamp);\n    }\n\n    transactionObj.setRawData(rawDataObj);\n\n    return transactionObj;\n};\n\nconst compareTransaction = (transaction, transactionPb) => {\n    const rawDataBytes = transactionPb.getRawData().serializeBinary();\n    const rawDataHex = byteArray2hexStr(rawDataBytes);\n    const txID = sha256(rawDataBytes);\n    return (\n        rawDataHex.toLowerCase() === transaction.raw_data_hex.toLowerCase() &&\n        txID.replace(/^0x/, '').toLowerCase() === transaction.txID.replace(/^0x/, '').toLowerCase()\n    );\n};\n\nconst txPbToRawDataHex = (pb) => {\n    return byteArray2hexStr(pb.getRawData().serializeBinary());\n};\n\nconst txCheck = (transaction) => {\n    const transactionPb = txJsonToPb(transaction);\n    return compareTransaction(transaction, transactionPb);\n};\n\nconst txCheckWithArgs = (transaction, args, options) => {\n    const transactionPb = txJsonToPbWithArgs(transaction, args, options);\n    return compareTransaction(transaction, transactionPb);\n};\n\nconst txPbToTxID = (transactionPb) => {\n    const rawDataBytes = transactionPb.getRawData().serializeBinary();\n    const txID = sha256(rawDataBytes);\n    return txID;\n};\n\nexport { txJsonToPb, txPbToTxID, txPbToRawDataHex, txJsonToPbWithArgs, txCheckWithArgs, txCheck };\n","import { TronWeb } from '../tronweb.js';\nimport {\n    keccak256,\n    recoverAddress,\n    concat,\n    defineProperties,\n    getBigInt,\n    getBytes,\n    hexlify,\n    isHexString,\n    mask,\n    toBeHex,\n    toQuantity,\n    toTwos,\n    zeroPadValue,\n    assertArgument,\n    id,\n} from 'ethers';\nimport type { BigNumberish, BytesLike, SignatureLike } from 'ethers';\n\nimport { ADDRESS_PREFIX_REGEX } from './address.js';\n\nfunction getAddress(address: string) {\n    return TronWeb.address.toHex(address).replace(ADDRESS_PREFIX_REGEX, '0x');\n}\nfunction getTronAddress(address: string) {\n    return TronWeb.address.toHex(address);\n}\n\nconst padding = new Uint8Array(32);\npadding.fill(0);\n\nconst BN__1 = BigInt(-1);\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_MAX_UINT256 = BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\n\n// @TODO: in v7, verifyingContract should be an AddressLike and use resolveAddress\n\n/**\n *  The domain for an [[link-eip-712]] payload.\n */\nexport interface TypedDataDomain {\n    /**\n     *  The human-readable name of the signing domain.\n     */\n    name?: null | string;\n\n    /**\n     *  The major version of the signing domain.\n     */\n    version?: null | string;\n\n    /**\n     *  The chain ID of the signing domain.\n     */\n    chainId?: null | BigNumberish;\n\n    /**\n     *  The the address of the contract that will verify the signature.\n     */\n    verifyingContract?: null | string;\n\n    /**\n     *  A salt used for purposes decided by the specific domain.\n     */\n    salt?: null | BytesLike;\n}\n\n/**\n *  A specific field of a structured [[link-eip-712]] type.\n */\nexport interface TypedDataField {\n    /**\n     *  The field name.\n     */\n    name: string;\n\n    /**\n     *  The type of the field.\n     */\n    type: string;\n}\n\nfunction hexPadRight(value: BytesLike): string {\n    const bytes = getBytes(value);\n    const padOffset = bytes.length % 32;\n    if (padOffset) {\n        return concat([bytes, padding.slice(padOffset)]);\n    }\n    return hexlify(bytes);\n}\n\nconst hexTrue = toBeHex(BN_1, 32);\nconst hexFalse = toBeHex(BN_0, 32);\n\nconst domainFieldTypes: Record<string, string> = {\n    name: 'string',\n    version: 'string',\n    chainId: 'uint256',\n    verifyingContract: 'address',\n    salt: 'bytes32',\n};\n\nconst domainFieldNames: Array<string> = ['name', 'version', 'chainId', 'verifyingContract', 'salt'];\n\nfunction checkString(key: string): (value: any) => string {\n    return function (value: any) {\n        assertArgument(typeof value === 'string', `invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);\n        return value;\n    };\n}\n\nconst domainChecks: Record<string, (value: any) => any> = {\n    name: checkString('name'),\n    version: checkString('version'),\n    chainId: function (_value: any) {\n        const value = getBigInt(_value, 'domain.chainId');\n        assertArgument(value >= 0, 'invalid chain ID', 'domain.chainId', _value);\n        if (Number.isSafeInteger(value)) {\n            return Number(value);\n        }\n        return toQuantity(value);\n    },\n    verifyingContract: function (value: any) {\n        try {\n            return getTronAddress(value).toLowerCase();\n        } catch (error) {\n            //\n        }\n        assertArgument(false, `invalid domain value \"verifyingContract\"`, 'domain.verifyingContract', value);\n    },\n    salt: function (value: any) {\n        const bytes = getBytes(value, 'domain.salt');\n        assertArgument(bytes.length === 32, `invalid domain value \"salt\"`, 'domain.salt', value);\n        return hexlify(bytes);\n    },\n};\n\nfunction getBaseEncoder(type: string): null | ((value: any) => string) {\n    // intXX and uintXX\n    {\n        const match = type.match(/^(u?)int(\\d*)$/);\n        if (match) {\n            const signed = match[1] === '';\n\n            const width = parseInt(match[2] || '256');\n            assertArgument(\n                width % 8 === 0 && width !== 0 && width <= 256 && (match[2] == null || match[2] === String(width)),\n                'invalid numeric width',\n                'type',\n                type\n            );\n\n            const boundsUpper = mask(BN_MAX_UINT256, signed ? width - 1 : width);\n            const boundsLower = signed ? (boundsUpper + BN_1) * BN__1 : BN_0;\n\n            return function (_value: BigNumberish) {\n                const value = getBigInt(_value, 'value');\n\n                assertArgument(value >= boundsLower && value <= boundsUpper, `value out-of-bounds for ${type}`, 'value', value);\n\n                return toBeHex(signed ? toTwos(value, 256) : value, 32);\n            };\n        }\n    }\n\n    // bytesXX\n    {\n        const match = type.match(/^bytes(\\d+)$/);\n        if (match) {\n            const width = parseInt(match[1]);\n            assertArgument(width !== 0 && width <= 32 && match[1] === String(width), 'invalid bytes width', 'type', type);\n\n            return function (value: BytesLike) {\n                const bytes = getBytes(value);\n                assertArgument(bytes.length === width, `invalid length for ${type}`, 'value', value);\n                return hexPadRight(value);\n            };\n        }\n    }\n\n    switch (type) {\n        case 'trcToken':\n            return getBaseEncoder('uint256');\n        case 'address':\n            return function (value: string) {\n                return zeroPadValue(getAddress(value), 32);\n            };\n        case 'bool':\n            return function (value: boolean) {\n                return !value ? hexFalse : hexTrue;\n            };\n        case 'bytes':\n            return function (value: BytesLike) {\n                return keccak256(value);\n            };\n        case 'string':\n            return function (value: string) {\n                return id(value);\n            };\n    }\n\n    return null;\n}\n\nfunction encodeType(name: string, fields: Array<TypedDataField>): string {\n    return `${name}(${fields.map(({ name, type }) => type + ' ' + name).join(',')})`;\n}\n\n/**\n *  A **TypedDataEncode** prepares and encodes [[link-eip-712]] payloads\n *  for signed typed data.\n *\n *  This is useful for those that wish to compute various components of a\n *  typed data hash, primary types, or sub-components, but generally the\n *  higher level [[Signer-signTypedData]] is more useful.\n */\nexport class TypedDataEncoder {\n    /**\n     *  The primary type for the structured [[types]].\n     *\n     *  This is derived automatically from the [[types]], since no\n     *  recursion is possible, once the DAG for the types is consturcted\n     *  internally, the primary type must be the only remaining type with\n     *  no parent nodes.\n     */\n    readonly primaryType!: string;\n\n    readonly #types: string;\n\n    /**\n     *  The types.\n     */\n    get types(): Record<string, Array<TypedDataField>> {\n        return JSON.parse(this.#types);\n    }\n\n    readonly #fullTypes: Map<string, string>;\n\n    readonly #encoderCache: Map<string, (value: any) => string>;\n\n    /**\n     *  Create a new **TypedDataEncoder** for %%types%%.\n     *\n     *  This performs all necessary checking that types are valid and\n     *  do not violate the [[link-eip-712]] structural constraints as\n     *  well as computes the [[primaryType]].\n     */\n    constructor(types: Record<string, Array<TypedDataField>>) {\n        this.#types = JSON.stringify(types);\n        this.#fullTypes = new Map();\n        this.#encoderCache = new Map();\n\n        // Link struct types to their direct child structs\n        const links: Map<string, Set<string>> = new Map();\n\n        // Link structs to structs which contain them as a child\n        const parents: Map<string, Array<string>> = new Map();\n\n        // Link all subtypes within a given struct\n        const subtypes: Map<string, Set<string>> = new Map();\n\n        Object.keys(types).forEach((type) => {\n            links.set(type, new Set());\n            parents.set(type, []);\n            subtypes.set(type, new Set());\n        });\n\n        for (const name in types) {\n            const uniqueNames: Set<string> = new Set();\n\n            for (const field of types[name]) {\n                // Check each field has a unique name\n                assertArgument(\n                    !uniqueNames.has(field.name),\n                    `duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`,\n                    'types',\n                    types\n                );\n                uniqueNames.add(field.name);\n\n                // Get the base type (drop any array specifiers)\n                const baseType = (<any>field.type.match(/^([^\\x5b]*)(\\x5b|$)/))[1] || null;\n                assertArgument(baseType !== name, `circular type reference to ${JSON.stringify(baseType)}`, 'types', types);\n\n                // Is this a base encoding type?\n                const encoder = getBaseEncoder(baseType);\n                if (encoder) {\n                    continue;\n                }\n\n                assertArgument(parents.has(baseType), `unknown type ${JSON.stringify(baseType)}`, 'types', types);\n\n                // Add linkage\n                (parents.get(baseType) as Array<string>).push(name);\n                (links.get(name) as Set<string>).add(baseType);\n            }\n        }\n\n        // Deduce the primary type\n        const primaryTypes = Array.from(parents.keys()).filter((n) => (parents.get(n) as Array<string>).length === 0);\n        assertArgument(primaryTypes.length !== 0, 'missing primary type', 'types', types);\n        assertArgument(\n            primaryTypes.length === 1,\n            `ambiguous primary types or unused types: ${primaryTypes.map((t) => JSON.stringify(t)).join(', ')}`,\n            'types',\n            types\n        );\n\n        defineProperties<TypedDataEncoder>(this, { primaryType: primaryTypes[0] });\n\n        // Check for circular type references\n        function checkCircular(type: string, found: Set<string>) {\n            assertArgument(!found.has(type), `circular type reference to ${JSON.stringify(type)}`, 'types', types);\n\n            found.add(type);\n\n            for (const child of links.get(type) as Set<string>) {\n                if (!parents.has(child)) {\n                    continue;\n                }\n\n                // Recursively check children\n                checkCircular(child, found);\n\n                // Mark all ancestors as having this decendant\n                for (const subtype of found) {\n                    (subtypes.get(subtype) as Set<string>).add(child);\n                }\n            }\n\n            found.delete(type);\n        }\n        checkCircular(this.primaryType, new Set());\n\n        // Compute each fully describe type\n        for (const [name, set] of subtypes) {\n            const st = Array.from(set);\n            st.sort();\n            this.#fullTypes.set(name, encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join(''));\n        }\n    }\n\n    /**\n     *  Returnthe encoder for the specific %%type%%.\n     */\n    getEncoder(type: string): (value: any) => string {\n        let encoder = this.#encoderCache.get(type);\n        if (!encoder) {\n            encoder = this.#getEncoder(type);\n            this.#encoderCache.set(type, encoder);\n        }\n        return encoder;\n    }\n\n    #getEncoder(type: string): (value: any) => string {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) {\n                return encoder;\n            }\n        }\n\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            const subtype = match[1];\n            const subEncoder = this.getEncoder(subtype);\n            return (value: Array<any>) => {\n                assertArgument(\n                    !match[3] || parseInt(match[3]) === value.length,\n                    `array length mismatch; expected length ${parseInt(match[3])}`,\n                    'value',\n                    value\n                );\n\n                let result = value.map(subEncoder);\n                if (this.#fullTypes.has(subtype)) {\n                    result = result.map(keccak256);\n                }\n\n                return keccak256(concat(result));\n            };\n        }\n\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            const encodedType = id(this.#fullTypes.get(type) as string);\n            return (value: Record<string, any>) => {\n                const values = fields.map(({ name, type }) => {\n                    const result = this.getEncoder(type)(value[name]);\n                    if (this.#fullTypes.has(type)) {\n                        return keccak256(result);\n                    }\n                    return result;\n                });\n                values.unshift(encodedType);\n                return concat(values);\n            };\n        }\n\n        assertArgument(false, `unknown type: ${type}`, 'type', type);\n    }\n\n    /**\n     *  Return the full type for %%name%%.\n     */\n    encodeType(name: string): string {\n        const result = this.#fullTypes.get(name);\n        assertArgument(result, `unknown type: ${JSON.stringify(name)}`, 'name', name);\n        return result!;\n    }\n\n    /**\n     *  Return the encoded %%value%% for the %%type%%.\n     */\n    encodeData(type: string, value: any): string {\n        return this.getEncoder(type)(value);\n    }\n\n    /**\n     *  Returns the hash of %%value%% for the type of %%name%%.\n     */\n    hashStruct(name: string, value: Record<string, any>): string {\n        return keccak256(this.encodeData(name, value));\n    }\n\n    /**\n     *  Return the fulled encoded %%value%% for the [[types]].\n     */\n    encode(value: Record<string, any>): string {\n        return this.encodeData(this.primaryType, value);\n    }\n\n    /**\n     *  Return the hash of the fully encoded %%value%% for the [[types]].\n     */\n    hash(value: Record<string, any>): string {\n        return this.hashStruct(this.primaryType, value);\n    }\n\n    /**\n     *  @_ignore:\n     */\n    _visit(type: string, value: any, callback: (type: string, data: any) => any): any {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) {\n                return callback(type, value);\n            }\n        }\n\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            assertArgument(\n                !match[3] || parseInt(match[3]) === value.length,\n                `array length mismatch; expected length ${parseInt(match[3])}`,\n                'value',\n                value\n            );\n            return value.map((v: any) => this._visit(match[1], v, callback));\n        }\n\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            return fields.reduce((accum, { name, type }) => {\n                accum[name] = this._visit(type, value[name], callback);\n                return accum;\n            }, <Record<string, any>>{});\n        }\n\n        assertArgument(false, `unknown type: ${type}`, 'type', type);\n    }\n\n    /**\n     *  Call %%calback%% for each value in %%value%%, passing the type and\n     *  component within %%value%%.\n     *\n     *  This is useful for replacing addresses or other transformation that\n     *  may be desired on each component, based on its type.\n     */\n    visit(value: Record<string, any>, callback: (type: string, data: any) => any): any {\n        return this._visit(this.primaryType, value, callback);\n    }\n\n    /**\n     *  Create a new **TypedDataEncoder** for %%types%%.\n     */\n    static from(types: Record<string, Array<TypedDataField>>): TypedDataEncoder {\n        return new TypedDataEncoder(types);\n    }\n\n    /**\n     *  Return the primary type for %%types%%.\n     */\n    static getPrimaryType(types: Record<string, Array<TypedDataField>>): string {\n        return TypedDataEncoder.from(types).primaryType;\n    }\n\n    /**\n     *  Return the hashed struct for %%value%% using %%types%% and %%name%%.\n     */\n    static hashStruct(name: string, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): string {\n        return TypedDataEncoder.from(types).hashStruct(name, value);\n    }\n\n    /**\n     *  Return the domain hash for %%domain%%.\n     */\n    static hashDomain(domain: TypedDataDomain): string {\n        const domainFields: Array<TypedDataField> = [];\n        for (const name in domain) {\n            if ((<Record<string, any>>domain)[name] == null) {\n                continue;\n            }\n            const type = domainFieldTypes[name];\n            assertArgument(type, `invalid typed-data domain key: ${JSON.stringify(name)}`, 'domain', domain);\n            domainFields.push({ name, type });\n        }\n\n        domainFields.sort((a, b) => {\n            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n        });\n\n        return TypedDataEncoder.hashStruct('EIP712Domain', { EIP712Domain: domainFields }, domain);\n    }\n\n    /**\n     *  Return the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.\n     */\n    static encode(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): string {\n        return concat(['0x1901', TypedDataEncoder.hashDomain(domain), TypedDataEncoder.from(types).hash(value)]);\n    }\n\n    /**\n     *  Return the hash of the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.\n     */\n    static hash(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): string {\n        return keccak256(TypedDataEncoder.encode(domain, types, value));\n    }\n\n    // Replaces all address types with ENS names with their looked up address\n    /**\n     * Resolves to the value from resolving all addresses in %%value%% for\n     * %%types%% and the %%domain%%.\n     */\n    static async resolveNames(\n        domain: TypedDataDomain,\n        types: Record<string, Array<TypedDataField>>,\n        value: Record<string, any>,\n        resolveName: (name: string) => Promise<string>\n    ): Promise<{ domain: TypedDataDomain; value: any }> {\n        // Make a copy to isolate it from the object passed in\n        domain = Object.assign({}, domain);\n\n        // Allow passing null to ignore value\n        for (const key in domain) {\n            if ((<Record<string, any>>domain)[key] == null) {\n                delete (<Record<string, any>>domain)[key];\n            }\n        }\n\n        // Look up all ENS names\n        const ensCache: Record<string, string> = {};\n\n        // Do we need to look up the domain's verifyingContract?\n        if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {\n            ensCache[domain.verifyingContract] = '0x';\n        }\n\n        // We are going to use the encoder to visit all the base values\n        const encoder = TypedDataEncoder.from(types);\n\n        // Get a list of all the addresses\n        encoder.visit(value, (type: string, value: any) => {\n            if (type === 'address' && !isHexString(value, 20)) {\n                ensCache[value] = '0x';\n            }\n            return value;\n        });\n\n        // Lookup each name\n        for (const name in ensCache) {\n            ensCache[name] = await resolveName(name);\n        }\n\n        // Replace the domain verifyingContract if needed\n        if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n            domain.verifyingContract = ensCache[domain.verifyingContract];\n        }\n\n        // Replace all ENS names with their address\n        value = encoder.visit(value, (type: string, value: any) => {\n            if (type === 'address' && ensCache[value]) {\n                return ensCache[value];\n            }\n            return value;\n        });\n\n        return { domain, value };\n    }\n\n    /**\n     *  Returns the JSON-encoded payload expected by nodes which implement\n     *  the JSON-RPC [[link-eip-712]] method.\n     */\n    static getPayload(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): any {\n        // Validate the domain fields\n        TypedDataEncoder.hashDomain(domain);\n\n        // Derive the EIP712Domain Struct reference type\n        const domainValues: Record<string, any> = {};\n        const domainTypes: Array<{ name: string; type: string }> = [];\n\n        domainFieldNames.forEach((name) => {\n            const value = (<any>domain)[name];\n            if (value == null) {\n                return;\n            }\n            domainValues[name] = domainChecks[name](value);\n            domainTypes.push({ name, type: domainFieldTypes[name] });\n        });\n\n        const encoder = TypedDataEncoder.from(types);\n\n        const typesWithDomain = Object.assign({}, types);\n        assertArgument(\n            typesWithDomain.EIP712Domain == null,\n            'types must not contain EIP712Domain type',\n            'types.EIP712Domain',\n            types\n        );\n\n        typesWithDomain.EIP712Domain = domainTypes;\n\n        // Validate the data structures and types\n        encoder.encode(value);\n\n        return {\n            types: typesWithDomain,\n            domain: domainValues,\n            primaryType: encoder.primaryType,\n            message: encoder.visit(value, (type: string, value: any) => {\n                // bytes\n                if (type.match(/^bytes(\\d*)/)) {\n                    return hexlify(getBytes(value));\n                }\n\n                // uint or int\n                if (type.match(/^u?int/)) {\n                    return getBigInt(value).toString();\n                }\n\n                switch (type) {\n                    case 'trcToken':\n                        return getBigInt(value).toString();\n                    case 'address':\n                        return value.toLowerCase();\n                    case 'bool':\n                        return !!value;\n                    case 'string':\n                        assertArgument(typeof value === 'string', 'invalid string', 'value', value);\n                        return value;\n                }\n\n                assertArgument(false, 'unsupported type', 'type', type);\n            }),\n        };\n    }\n}\n\n/**\n *  Compute the address used to sign the typed data for the %%signature%%.\n */\nexport function verifyTypedData(\n    domain: TypedDataDomain,\n    types: Record<string, Array<TypedDataField>>,\n    value: Record<string, any>,\n    signature: SignatureLike\n): string {\n    return recoverAddress(TypedDataEncoder.hash(domain, types, value), signature);\n}\n","import BigNumber from 'bignumber.js';\nimport validator from 'validator';\nimport { ADDRESS_PREFIX } from './address.js';\nimport { AbiParamsCommon } from '../types/ABI.js';\n\nexport function isValidURL(url: string): boolean {\n    if (typeof url !== 'string') return false;\n    return validator.isURL(url.toString(), {\n        protocols: ['http', 'https'],\n        require_tld: false,\n    });\n}\n\nexport function isObject(obj: unknown): obj is Record<number | string | symbol, unknown> {\n    return obj === Object(obj) && Object.prototype.toString.call(obj) !== '[object Array]';\n}\n\nexport function isArray(array: unknown): array is unknown[] {\n    return Array.isArray(array);\n}\n\nexport function isJson(string: string): boolean {\n    try {\n        return !!JSON.parse(string);\n    } catch (ex) {\n        return false;\n    }\n}\n\nexport function isBoolean(bool: unknown): bool is boolean {\n    return typeof bool === 'boolean';\n}\n\nexport function isBigNumber(number: unknown): number is BigNumber {\n    return !!number && (number instanceof BigNumber || (number.constructor && number.constructor.name === 'BigNumber'));\n}\n\nexport function isString(string: unknown): string is string {\n    return typeof string === 'string' || (!!string && string.constructor && string.constructor.name === 'String');\n}\n\nexport function isFunction(obj: unknown): obj is (...args: unknown[]) => unknown {\n    return typeof obj === 'function';\n}\n\nexport function isHex(string: string): string is string {\n    return typeof string === 'string' && !isNaN(parseInt(string, 16)) && /^(0x|)[a-fA-F0-9]+$/.test(string);\n}\n\nexport function isInteger(number: unknown): number is number {\n    if (number === null) return false;\n    return Number.isInteger(Number(number));\n}\n\nexport function hasProperty(obj: object, property: string | number | symbol) {\n    return Object.prototype.hasOwnProperty.call(obj, property);\n}\n\nexport function hasProperties(obj: object, ...properties: (string | number | symbol)[]) {\n    return (\n        properties.length &&\n        !properties\n            .map((property) => {\n                return hasProperty(obj, property);\n            })\n            .includes(false)\n    );\n}\n\nexport type EventQueryDataType = {\n    block_number: number;\n    block_timestamp: number;\n    contract_address: string;\n    event_name: string;\n    transaction_id: string;\n    result: unknown;\n    resource_Node: string;\n    _unconfirmed?: boolean;\n    _fingerprint?: string | undefined;\n};\n\nexport type MapEventQueryDataType = {\n    block: number;\n    timestamp: number;\n    contract: string;\n    name: string;\n    transaction: string;\n    result: unknown;\n    resourceNode: string;\n    unconfirmed?: boolean;\n    fingerprint?: string | undefined;\n};\n\nexport function mapEvent(event: EventQueryDataType) {\n    const data: MapEventQueryDataType = {\n        block: event.block_number,\n        timestamp: event.block_timestamp,\n        contract: event.contract_address,\n        name: event.event_name,\n        transaction: event.transaction_id,\n        result: event.result,\n        resourceNode: event.resource_Node || (event._unconfirmed ? 'fullNode' : 'solidityNode'),\n    };\n    if (event._unconfirmed) {\n        data.unconfirmed = event._unconfirmed;\n    }\n    if (event._fingerprint) {\n        data.fingerprint = event._fingerprint;\n    }\n    return data;\n}\n\nexport function parseEvent(event: EventQueryDataType, { inputs: abi }: { inputs: ReadonlyArray<AbiParamsCommon> }) {\n    if (!event.result) return event;\n\n    if (isObject(event.result)) {\n        for (let i = 0; i < abi.length; i++) {\n            const obj = abi[i];\n            if (obj.type == 'address' && obj.name in event.result)\n                event.result[obj.name] = ADDRESS_PREFIX + (event.result[obj.name] as string).substr(2).toLowerCase();\n        }\n    } else if (isArray(event.result)) {\n        event.result = (event.result as string[]).reduce<Record<string, string>>((obj, result, index) => {\n            const { name, type } = abi[index];\n\n            if (type == 'address') result = ADDRESS_PREFIX + result.substr(2).toLowerCase();\n\n            obj[name] = result;\n\n            return obj;\n        }, {});\n    }\n\n    return event;\n}\n\nexport function padLeft(input: string | number, padding: string, amount: number): string {\n    let res = input.toString();\n\n    while (res.length < amount) res = padding + res;\n\n    return res;\n}\n\nexport function isNotNullOrUndefined(val: unknown): boolean {\n    return val !== null && typeof val !== 'undefined';\n}\n\nexport async function sleep(millis = 1000): Promise<any> {\n    return new Promise((resolve) => setTimeout(resolve, millis));\n}\n","module.exports = require(\"@ethersproject/abi\");","module.exports = require(\"@tronweb3/google-protobuf\");","module.exports = require(\"@tronweb3/google-protobuf/google/protobuf/any_pb.js\");","module.exports = require(\"axios\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"ethereum-cryptography/secp256k1\");","module.exports = require(\"ethers\");","module.exports = require(\"eventemitter3\");","module.exports = require(\"semver\");","module.exports = require(\"tslib\");","module.exports = require(\"validator\");","// source: core/Tron.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('@tronweb3/google-protobuf');\nvar goog = jspb;\nvar global =\n  (typeof globalThis !== 'undefined' && globalThis) ||\n  (typeof window !== 'undefined' && window) ||\n  (typeof global !== 'undefined' && global) ||\n  (typeof self !== 'undefined' && self) ||\n  (function () { return this; }).call(null) ||\n  Function('return this')();\n\nvar google_protobuf_any_pb = require('@tronweb3/google-protobuf/google/protobuf/any_pb.js');\ngoog.object.extend(proto, google_protobuf_any_pb);\ngoog.exportSymbol('TronWebProto.Account', null, global);\ngoog.exportSymbol('TronWebProto.Account.AccountResource', null, global);\ngoog.exportSymbol('TronWebProto.Account.Frozen', null, global);\ngoog.exportSymbol('TronWebProto.AccountId', null, global);\ngoog.exportSymbol('TronWebProto.AccountType', null, global);\ngoog.exportSymbol('TronWebProto.DelegatedResource', null, global);\ngoog.exportSymbol('TronWebProto.Exchange', null, global);\ngoog.exportSymbol('TronWebProto.Key', null, global);\ngoog.exportSymbol('TronWebProto.MarketOrderDetail', null, global);\ngoog.exportSymbol('TronWebProto.Permission', null, global);\ngoog.exportSymbol('TronWebProto.Permission.PermissionType', null, global);\ngoog.exportSymbol('TronWebProto.Proposal', null, global);\ngoog.exportSymbol('TronWebProto.Proposal.State', null, global);\ngoog.exportSymbol('TronWebProto.Transaction', null, global);\ngoog.exportSymbol('TronWebProto.Transaction.Contract', null, global);\ngoog.exportSymbol('TronWebProto.Transaction.Contract.ContractType', null, global);\ngoog.exportSymbol('TronWebProto.Transaction.Result', null, global);\ngoog.exportSymbol('TronWebProto.Transaction.Result.code', null, global);\ngoog.exportSymbol('TronWebProto.Transaction.Result.contractResult', null, global);\ngoog.exportSymbol('TronWebProto.Transaction.raw', null, global);\ngoog.exportSymbol('TronWebProto.Vote', null, global);\ngoog.exportSymbol('TronWebProto.Votes', null, global);\ngoog.exportSymbol('TronWebProto.Witness', null, global);\ngoog.exportSymbol('TronWebProto.authority', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.AccountId = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.AccountId, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.AccountId.displayName = 'TronWebProto.AccountId';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.Vote = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.Vote, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.Vote.displayName = 'TronWebProto.Vote';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.Proposal = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, TronWebProto.Proposal.repeatedFields_, null);\n};\ngoog.inherits(TronWebProto.Proposal, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.Proposal.displayName = 'TronWebProto.Proposal';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.Exchange = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.Exchange, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.Exchange.displayName = 'TronWebProto.Exchange';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.Account = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, TronWebProto.Account.repeatedFields_, null);\n};\ngoog.inherits(TronWebProto.Account, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.Account.displayName = 'TronWebProto.Account';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.Account.Frozen = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.Account.Frozen, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.Account.Frozen.displayName = 'TronWebProto.Account.Frozen';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.Account.AccountResource = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.Account.AccountResource, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.Account.AccountResource.displayName = 'TronWebProto.Account.AccountResource';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.Key = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.Key, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.Key.displayName = 'TronWebProto.Key';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.DelegatedResource = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.DelegatedResource, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.DelegatedResource.displayName = 'TronWebProto.DelegatedResource';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.authority = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.authority, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.authority.displayName = 'TronWebProto.authority';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.Permission = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, TronWebProto.Permission.repeatedFields_, null);\n};\ngoog.inherits(TronWebProto.Permission, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.Permission.displayName = 'TronWebProto.Permission';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.Witness = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.Witness, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.Witness.displayName = 'TronWebProto.Witness';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.Votes = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, TronWebProto.Votes.repeatedFields_, null);\n};\ngoog.inherits(TronWebProto.Votes, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.Votes.displayName = 'TronWebProto.Votes';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.MarketOrderDetail = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.MarketOrderDetail, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.MarketOrderDetail.displayName = 'TronWebProto.MarketOrderDetail';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.Transaction = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, TronWebProto.Transaction.repeatedFields_, null);\n};\ngoog.inherits(TronWebProto.Transaction, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.Transaction.displayName = 'TronWebProto.Transaction';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.Transaction.Contract = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.Transaction.Contract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.Transaction.Contract.displayName = 'TronWebProto.Transaction.Contract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.Transaction.Result = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, TronWebProto.Transaction.Result.repeatedFields_, null);\n};\ngoog.inherits(TronWebProto.Transaction.Result, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.Transaction.Result.displayName = 'TronWebProto.Transaction.Result';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.Transaction.raw = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, TronWebProto.Transaction.raw.repeatedFields_, null);\n};\ngoog.inherits(TronWebProto.Transaction.raw, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.Transaction.raw.displayName = 'TronWebProto.Transaction.raw';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.AccountId.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.AccountId.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.AccountId} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.AccountId.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    name: msg.getName_asB64(),\n    address: msg.getAddress_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.AccountId}\n */\nTronWebProto.AccountId.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.AccountId;\n  return TronWebProto.AccountId.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.AccountId} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.AccountId}\n */\nTronWebProto.AccountId.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setName(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setAddress(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.AccountId.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.AccountId.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.AccountId} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.AccountId.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getName_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getAddress_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes name = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.AccountId.prototype.getName = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes name = 1;\n * This is a type-conversion wrapper around `getName()`\n * @return {string}\n */\nTronWebProto.AccountId.prototype.getName_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getName()));\n};\n\n\n/**\n * optional bytes name = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getName()`\n * @return {!Uint8Array}\n */\nTronWebProto.AccountId.prototype.getName_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getName()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.AccountId} returns this\n */\nTronWebProto.AccountId.prototype.setName = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional bytes address = 2;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.AccountId.prototype.getAddress = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes address = 2;\n * This is a type-conversion wrapper around `getAddress()`\n * @return {string}\n */\nTronWebProto.AccountId.prototype.getAddress_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getAddress()));\n};\n\n\n/**\n * optional bytes address = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.AccountId.prototype.getAddress_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getAddress()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.AccountId} returns this\n */\nTronWebProto.AccountId.prototype.setAddress = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.Vote.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.Vote.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.Vote} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.Vote.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    voteAddress: msg.getVoteAddress_asB64(),\n    voteCount: jspb.Message.getFieldWithDefault(msg, 2, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.Vote}\n */\nTronWebProto.Vote.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.Vote;\n  return TronWebProto.Vote.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.Vote} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.Vote}\n */\nTronWebProto.Vote.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setVoteAddress(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setVoteCount(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.Vote.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.Vote.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.Vote} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.Vote.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getVoteAddress_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getVoteCount();\n  if (f !== 0) {\n    writer.writeInt64(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes vote_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.Vote.prototype.getVoteAddress = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes vote_address = 1;\n * This is a type-conversion wrapper around `getVoteAddress()`\n * @return {string}\n */\nTronWebProto.Vote.prototype.getVoteAddress_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getVoteAddress()));\n};\n\n\n/**\n * optional bytes vote_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getVoteAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.Vote.prototype.getVoteAddress_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getVoteAddress()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.Vote} returns this\n */\nTronWebProto.Vote.prototype.setVoteAddress = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional int64 vote_count = 2;\n * @return {number}\n */\nTronWebProto.Vote.prototype.getVoteCount = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Vote} returns this\n */\nTronWebProto.Vote.prototype.setVoteCount = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nTronWebProto.Proposal.repeatedFields_ = [6];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.Proposal.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.Proposal.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.Proposal} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.Proposal.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    proposalId: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    proposerAddress: msg.getProposerAddress_asB64(),\n    parametersMap: (f = msg.getParametersMap()) ? f.toObject(includeInstance, undefined) : [],\n    expirationTime: jspb.Message.getFieldWithDefault(msg, 4, 0),\n    createTime: jspb.Message.getFieldWithDefault(msg, 5, 0),\n    approvalsList: msg.getApprovalsList_asB64(),\n    state: jspb.Message.getFieldWithDefault(msg, 7, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.Proposal}\n */\nTronWebProto.Proposal.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.Proposal;\n  return TronWebProto.Proposal.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.Proposal} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.Proposal}\n */\nTronWebProto.Proposal.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setProposalId(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setProposerAddress(value);\n      break;\n    case 3:\n      var value = msg.getParametersMap();\n      reader.readMessage(value, function(message, reader) {\n        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt64, jspb.BinaryReader.prototype.readInt64, null, 0, 0);\n         });\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setExpirationTime(value);\n      break;\n    case 5:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setCreateTime(value);\n      break;\n    case 6:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.addApprovals(value);\n      break;\n    case 7:\n      var value = /** @type {!TronWebProto.Proposal.State} */ (reader.readEnum());\n      msg.setState(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.Proposal.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.Proposal.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.Proposal} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.Proposal.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getProposalId();\n  if (f !== 0) {\n    writer.writeInt64(\n      1,\n      f\n    );\n  }\n  f = message.getProposerAddress_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n  f = message.getParametersMap(true);\n  if (f && f.getLength() > 0) {\n    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeInt64, jspb.BinaryWriter.prototype.writeInt64);\n  }\n  f = message.getExpirationTime();\n  if (f !== 0) {\n    writer.writeInt64(\n      4,\n      f\n    );\n  }\n  f = message.getCreateTime();\n  if (f !== 0) {\n    writer.writeInt64(\n      5,\n      f\n    );\n  }\n  f = message.getApprovalsList_asU8();\n  if (f.length > 0) {\n    writer.writeRepeatedBytes(\n      6,\n      f\n    );\n  }\n  f = message.getState();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      7,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nTronWebProto.Proposal.State = {\n  PENDING: 0,\n  DISAPPROVED: 1,\n  APPROVED: 2,\n  CANCELED: 3\n};\n\n/**\n * optional int64 proposal_id = 1;\n * @return {number}\n */\nTronWebProto.Proposal.prototype.getProposalId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Proposal} returns this\n */\nTronWebProto.Proposal.prototype.setProposalId = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional bytes proposer_address = 2;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.Proposal.prototype.getProposerAddress = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes proposer_address = 2;\n * This is a type-conversion wrapper around `getProposerAddress()`\n * @return {string}\n */\nTronWebProto.Proposal.prototype.getProposerAddress_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getProposerAddress()));\n};\n\n\n/**\n * optional bytes proposer_address = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getProposerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.Proposal.prototype.getProposerAddress_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getProposerAddress()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.Proposal} returns this\n */\nTronWebProto.Proposal.prototype.setProposerAddress = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n/**\n * map<int64, int64> parameters = 3;\n * @param {boolean=} opt_noLazyCreate Do not create the map if\n * empty, instead returning `undefined`\n * @return {!jspb.Map<number,number>}\n */\nTronWebProto.Proposal.prototype.getParametersMap = function(opt_noLazyCreate) {\n  return /** @type {!jspb.Map<number,number>} */ (\n      jspb.Message.getMapField(this, 3, opt_noLazyCreate,\n      null));\n};\n\n\n/**\n * Clears values from the map. The map will be non-null.\n * @return {!TronWebProto.Proposal} returns this\n */\nTronWebProto.Proposal.prototype.clearParametersMap = function() {\n  this.getParametersMap().clear();\n  return this;};\n\n\n/**\n * optional int64 expiration_time = 4;\n * @return {number}\n */\nTronWebProto.Proposal.prototype.getExpirationTime = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Proposal} returns this\n */\nTronWebProto.Proposal.prototype.setExpirationTime = function(value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\n/**\n * optional int64 create_time = 5;\n * @return {number}\n */\nTronWebProto.Proposal.prototype.getCreateTime = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Proposal} returns this\n */\nTronWebProto.Proposal.prototype.setCreateTime = function(value) {\n  return jspb.Message.setProto3IntField(this, 5, value);\n};\n\n\n/**\n * repeated bytes approvals = 6;\n * @return {!(Array<!Uint8Array>|Array<string>)}\n */\nTronWebProto.Proposal.prototype.getApprovalsList = function() {\n  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 6));\n};\n\n\n/**\n * repeated bytes approvals = 6;\n * This is a type-conversion wrapper around `getApprovalsList()`\n * @return {!Array<string>}\n */\nTronWebProto.Proposal.prototype.getApprovalsList_asB64 = function() {\n  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(\n      this.getApprovalsList()));\n};\n\n\n/**\n * repeated bytes approvals = 6;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getApprovalsList()`\n * @return {!Array<!Uint8Array>}\n */\nTronWebProto.Proposal.prototype.getApprovalsList_asU8 = function() {\n  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(\n      this.getApprovalsList()));\n};\n\n\n/**\n * @param {!(Array<!Uint8Array>|Array<string>)} value\n * @return {!TronWebProto.Proposal} returns this\n */\nTronWebProto.Proposal.prototype.setApprovalsList = function(value) {\n  return jspb.Message.setField(this, 6, value || []);\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @param {number=} opt_index\n * @return {!TronWebProto.Proposal} returns this\n */\nTronWebProto.Proposal.prototype.addApprovals = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!TronWebProto.Proposal} returns this\n */\nTronWebProto.Proposal.prototype.clearApprovalsList = function() {\n  return this.setApprovalsList([]);\n};\n\n\n/**\n * optional State state = 7;\n * @return {!TronWebProto.Proposal.State}\n */\nTronWebProto.Proposal.prototype.getState = function() {\n  return /** @type {!TronWebProto.Proposal.State} */ (jspb.Message.getFieldWithDefault(this, 7, 0));\n};\n\n\n/**\n * @param {!TronWebProto.Proposal.State} value\n * @return {!TronWebProto.Proposal} returns this\n */\nTronWebProto.Proposal.prototype.setState = function(value) {\n  return jspb.Message.setProto3EnumField(this, 7, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.Exchange.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.Exchange.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.Exchange} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.Exchange.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    exchangeId: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    creatorAddress: msg.getCreatorAddress_asB64(),\n    createTime: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    firstTokenId: msg.getFirstTokenId_asB64(),\n    firstTokenBalance: jspb.Message.getFieldWithDefault(msg, 7, 0),\n    secondTokenId: msg.getSecondTokenId_asB64(),\n    secondTokenBalance: jspb.Message.getFieldWithDefault(msg, 9, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.Exchange}\n */\nTronWebProto.Exchange.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.Exchange;\n  return TronWebProto.Exchange.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.Exchange} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.Exchange}\n */\nTronWebProto.Exchange.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setExchangeId(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setCreatorAddress(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setCreateTime(value);\n      break;\n    case 6:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setFirstTokenId(value);\n      break;\n    case 7:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setFirstTokenBalance(value);\n      break;\n    case 8:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setSecondTokenId(value);\n      break;\n    case 9:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setSecondTokenBalance(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.Exchange.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.Exchange.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.Exchange} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.Exchange.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getExchangeId();\n  if (f !== 0) {\n    writer.writeInt64(\n      1,\n      f\n    );\n  }\n  f = message.getCreatorAddress_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n  f = message.getCreateTime();\n  if (f !== 0) {\n    writer.writeInt64(\n      3,\n      f\n    );\n  }\n  f = message.getFirstTokenId_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      6,\n      f\n    );\n  }\n  f = message.getFirstTokenBalance();\n  if (f !== 0) {\n    writer.writeInt64(\n      7,\n      f\n    );\n  }\n  f = message.getSecondTokenId_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      8,\n      f\n    );\n  }\n  f = message.getSecondTokenBalance();\n  if (f !== 0) {\n    writer.writeInt64(\n      9,\n      f\n    );\n  }\n};\n\n\n/**\n * optional int64 exchange_id = 1;\n * @return {number}\n */\nTronWebProto.Exchange.prototype.getExchangeId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Exchange} returns this\n */\nTronWebProto.Exchange.prototype.setExchangeId = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional bytes creator_address = 2;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.Exchange.prototype.getCreatorAddress = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes creator_address = 2;\n * This is a type-conversion wrapper around `getCreatorAddress()`\n * @return {string}\n */\nTronWebProto.Exchange.prototype.getCreatorAddress_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getCreatorAddress()));\n};\n\n\n/**\n * optional bytes creator_address = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getCreatorAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.Exchange.prototype.getCreatorAddress_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getCreatorAddress()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.Exchange} returns this\n */\nTronWebProto.Exchange.prototype.setCreatorAddress = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n/**\n * optional int64 create_time = 3;\n * @return {number}\n */\nTronWebProto.Exchange.prototype.getCreateTime = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Exchange} returns this\n */\nTronWebProto.Exchange.prototype.setCreateTime = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n/**\n * optional bytes first_token_id = 6;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.Exchange.prototype.getFirstTokenId = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, \"\"));\n};\n\n\n/**\n * optional bytes first_token_id = 6;\n * This is a type-conversion wrapper around `getFirstTokenId()`\n * @return {string}\n */\nTronWebProto.Exchange.prototype.getFirstTokenId_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getFirstTokenId()));\n};\n\n\n/**\n * optional bytes first_token_id = 6;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getFirstTokenId()`\n * @return {!Uint8Array}\n */\nTronWebProto.Exchange.prototype.getFirstTokenId_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getFirstTokenId()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.Exchange} returns this\n */\nTronWebProto.Exchange.prototype.setFirstTokenId = function(value) {\n  return jspb.Message.setProto3BytesField(this, 6, value);\n};\n\n\n/**\n * optional int64 first_token_balance = 7;\n * @return {number}\n */\nTronWebProto.Exchange.prototype.getFirstTokenBalance = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Exchange} returns this\n */\nTronWebProto.Exchange.prototype.setFirstTokenBalance = function(value) {\n  return jspb.Message.setProto3IntField(this, 7, value);\n};\n\n\n/**\n * optional bytes second_token_id = 8;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.Exchange.prototype.getSecondTokenId = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, \"\"));\n};\n\n\n/**\n * optional bytes second_token_id = 8;\n * This is a type-conversion wrapper around `getSecondTokenId()`\n * @return {string}\n */\nTronWebProto.Exchange.prototype.getSecondTokenId_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getSecondTokenId()));\n};\n\n\n/**\n * optional bytes second_token_id = 8;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getSecondTokenId()`\n * @return {!Uint8Array}\n */\nTronWebProto.Exchange.prototype.getSecondTokenId_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getSecondTokenId()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.Exchange} returns this\n */\nTronWebProto.Exchange.prototype.setSecondTokenId = function(value) {\n  return jspb.Message.setProto3BytesField(this, 8, value);\n};\n\n\n/**\n * optional int64 second_token_balance = 9;\n * @return {number}\n */\nTronWebProto.Exchange.prototype.getSecondTokenBalance = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Exchange} returns this\n */\nTronWebProto.Exchange.prototype.setSecondTokenBalance = function(value) {\n  return jspb.Message.setProto3IntField(this, 9, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nTronWebProto.Account.repeatedFields_ = [5,7,16,33];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.Account.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.Account.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.Account} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.Account.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    accountName: msg.getAccountName_asB64(),\n    type: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    address: msg.getAddress_asB64(),\n    balance: jspb.Message.getFieldWithDefault(msg, 4, 0),\n    votesList: jspb.Message.toObjectList(msg.getVotesList(),\n    TronWebProto.Vote.toObject, includeInstance),\n    assetMap: (f = msg.getAssetMap()) ? f.toObject(includeInstance, undefined) : [],\n    assetv2Map: (f = msg.getAssetv2Map()) ? f.toObject(includeInstance, undefined) : [],\n    frozenList: jspb.Message.toObjectList(msg.getFrozenList(),\n    TronWebProto.Account.Frozen.toObject, includeInstance),\n    netUsage: jspb.Message.getFieldWithDefault(msg, 8, 0),\n    acquiredDelegatedFrozenBalanceForBandwidth: jspb.Message.getFieldWithDefault(msg, 41, 0),\n    delegatedFrozenBalanceForBandwidth: jspb.Message.getFieldWithDefault(msg, 42, 0),\n    oldTronPower: jspb.Message.getFieldWithDefault(msg, 46, 0),\n    tronPower: (f = msg.getTronPower()) && TronWebProto.Account.Frozen.toObject(includeInstance, f),\n    assetOptimized: jspb.Message.getBooleanFieldWithDefault(msg, 60, false),\n    createTime: jspb.Message.getFieldWithDefault(msg, 9, 0),\n    latestOprationTime: jspb.Message.getFieldWithDefault(msg, 10, 0),\n    allowance: jspb.Message.getFieldWithDefault(msg, 11, 0),\n    latestWithdrawTime: jspb.Message.getFieldWithDefault(msg, 12, 0),\n    code: msg.getCode_asB64(),\n    isWitness: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),\n    isCommittee: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),\n    frozenSupplyList: jspb.Message.toObjectList(msg.getFrozenSupplyList(),\n    TronWebProto.Account.Frozen.toObject, includeInstance),\n    assetIssuedName: msg.getAssetIssuedName_asB64(),\n    assetIssuedId: msg.getAssetIssuedId_asB64(),\n    latestAssetOperationTimeMap: (f = msg.getLatestAssetOperationTimeMap()) ? f.toObject(includeInstance, undefined) : [],\n    latestAssetOperationTimev2Map: (f = msg.getLatestAssetOperationTimev2Map()) ? f.toObject(includeInstance, undefined) : [],\n    freeNetUsage: jspb.Message.getFieldWithDefault(msg, 19, 0),\n    freeAssetNetUsageMap: (f = msg.getFreeAssetNetUsageMap()) ? f.toObject(includeInstance, undefined) : [],\n    freeAssetNetUsagev2Map: (f = msg.getFreeAssetNetUsagev2Map()) ? f.toObject(includeInstance, undefined) : [],\n    latestConsumeTime: jspb.Message.getFieldWithDefault(msg, 21, 0),\n    latestConsumeFreeTime: jspb.Message.getFieldWithDefault(msg, 22, 0),\n    accountId: msg.getAccountId_asB64(),\n    accountResource: (f = msg.getAccountResource()) && TronWebProto.Account.AccountResource.toObject(includeInstance, f),\n    codehash: msg.getCodehash_asB64(),\n    ownerPermission: (f = msg.getOwnerPermission()) && TronWebProto.Permission.toObject(includeInstance, f),\n    witnessPermission: (f = msg.getWitnessPermission()) && TronWebProto.Permission.toObject(includeInstance, f),\n    activePermissionList: jspb.Message.toObjectList(msg.getActivePermissionList(),\n    TronWebProto.Permission.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.Account}\n */\nTronWebProto.Account.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.Account;\n  return TronWebProto.Account.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.Account} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.Account}\n */\nTronWebProto.Account.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setAccountName(value);\n      break;\n    case 2:\n      var value = /** @type {!TronWebProto.AccountType} */ (reader.readEnum());\n      msg.setType(value);\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setAddress(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setBalance(value);\n      break;\n    case 5:\n      var value = new TronWebProto.Vote;\n      reader.readMessage(value,TronWebProto.Vote.deserializeBinaryFromReader);\n      msg.addVotes(value);\n      break;\n    case 6:\n      var value = msg.getAssetMap();\n      reader.readMessage(value, function(message, reader) {\n        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt64, null, \"\", 0);\n         });\n      break;\n    case 56:\n      var value = msg.getAssetv2Map();\n      reader.readMessage(value, function(message, reader) {\n        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt64, null, \"\", 0);\n         });\n      break;\n    case 7:\n      var value = new TronWebProto.Account.Frozen;\n      reader.readMessage(value,TronWebProto.Account.Frozen.deserializeBinaryFromReader);\n      msg.addFrozen(value);\n      break;\n    case 8:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setNetUsage(value);\n      break;\n    case 41:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setAcquiredDelegatedFrozenBalanceForBandwidth(value);\n      break;\n    case 42:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setDelegatedFrozenBalanceForBandwidth(value);\n      break;\n    case 46:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setOldTronPower(value);\n      break;\n    case 47:\n      var value = new TronWebProto.Account.Frozen;\n      reader.readMessage(value,TronWebProto.Account.Frozen.deserializeBinaryFromReader);\n      msg.setTronPower(value);\n      break;\n    case 60:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setAssetOptimized(value);\n      break;\n    case 9:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setCreateTime(value);\n      break;\n    case 10:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setLatestOprationTime(value);\n      break;\n    case 11:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setAllowance(value);\n      break;\n    case 12:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setLatestWithdrawTime(value);\n      break;\n    case 13:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setCode(value);\n      break;\n    case 14:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setIsWitness(value);\n      break;\n    case 15:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setIsCommittee(value);\n      break;\n    case 16:\n      var value = new TronWebProto.Account.Frozen;\n      reader.readMessage(value,TronWebProto.Account.Frozen.deserializeBinaryFromReader);\n      msg.addFrozenSupply(value);\n      break;\n    case 17:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setAssetIssuedName(value);\n      break;\n    case 57:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setAssetIssuedId(value);\n      break;\n    case 18:\n      var value = msg.getLatestAssetOperationTimeMap();\n      reader.readMessage(value, function(message, reader) {\n        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt64, null, \"\", 0);\n         });\n      break;\n    case 58:\n      var value = msg.getLatestAssetOperationTimev2Map();\n      reader.readMessage(value, function(message, reader) {\n        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt64, null, \"\", 0);\n         });\n      break;\n    case 19:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setFreeNetUsage(value);\n      break;\n    case 20:\n      var value = msg.getFreeAssetNetUsageMap();\n      reader.readMessage(value, function(message, reader) {\n        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt64, null, \"\", 0);\n         });\n      break;\n    case 59:\n      var value = msg.getFreeAssetNetUsagev2Map();\n      reader.readMessage(value, function(message, reader) {\n        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt64, null, \"\", 0);\n         });\n      break;\n    case 21:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setLatestConsumeTime(value);\n      break;\n    case 22:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setLatestConsumeFreeTime(value);\n      break;\n    case 23:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setAccountId(value);\n      break;\n    case 26:\n      var value = new TronWebProto.Account.AccountResource;\n      reader.readMessage(value,TronWebProto.Account.AccountResource.deserializeBinaryFromReader);\n      msg.setAccountResource(value);\n      break;\n    case 30:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setCodehash(value);\n      break;\n    case 31:\n      var value = new TronWebProto.Permission;\n      reader.readMessage(value,TronWebProto.Permission.deserializeBinaryFromReader);\n      msg.setOwnerPermission(value);\n      break;\n    case 32:\n      var value = new TronWebProto.Permission;\n      reader.readMessage(value,TronWebProto.Permission.deserializeBinaryFromReader);\n      msg.setWitnessPermission(value);\n      break;\n    case 33:\n      var value = new TronWebProto.Permission;\n      reader.readMessage(value,TronWebProto.Permission.deserializeBinaryFromReader);\n      msg.addActivePermission(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.Account.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.Account.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.Account} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.Account.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getAccountName_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      2,\n      f\n    );\n  }\n  f = message.getAddress_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n  f = message.getBalance();\n  if (f !== 0) {\n    writer.writeInt64(\n      4,\n      f\n    );\n  }\n  f = message.getVotesList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      5,\n      f,\n      TronWebProto.Vote.serializeBinaryToWriter\n    );\n  }\n  f = message.getAssetMap(true);\n  if (f && f.getLength() > 0) {\n    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt64);\n  }\n  f = message.getAssetv2Map(true);\n  if (f && f.getLength() > 0) {\n    f.serializeBinary(56, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt64);\n  }\n  f = message.getFrozenList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      7,\n      f,\n      TronWebProto.Account.Frozen.serializeBinaryToWriter\n    );\n  }\n  f = message.getNetUsage();\n  if (f !== 0) {\n    writer.writeInt64(\n      8,\n      f\n    );\n  }\n  f = message.getAcquiredDelegatedFrozenBalanceForBandwidth();\n  if (f !== 0) {\n    writer.writeInt64(\n      41,\n      f\n    );\n  }\n  f = message.getDelegatedFrozenBalanceForBandwidth();\n  if (f !== 0) {\n    writer.writeInt64(\n      42,\n      f\n    );\n  }\n  f = message.getOldTronPower();\n  if (f !== 0) {\n    writer.writeInt64(\n      46,\n      f\n    );\n  }\n  f = message.getTronPower();\n  if (f != null) {\n    writer.writeMessage(\n      47,\n      f,\n      TronWebProto.Account.Frozen.serializeBinaryToWriter\n    );\n  }\n  f = message.getAssetOptimized();\n  if (f) {\n    writer.writeBool(\n      60,\n      f\n    );\n  }\n  f = message.getCreateTime();\n  if (f !== 0) {\n    writer.writeInt64(\n      9,\n      f\n    );\n  }\n  f = message.getLatestOprationTime();\n  if (f !== 0) {\n    writer.writeInt64(\n      10,\n      f\n    );\n  }\n  f = message.getAllowance();\n  if (f !== 0) {\n    writer.writeInt64(\n      11,\n      f\n    );\n  }\n  f = message.getLatestWithdrawTime();\n  if (f !== 0) {\n    writer.writeInt64(\n      12,\n      f\n    );\n  }\n  f = message.getCode_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      13,\n      f\n    );\n  }\n  f = message.getIsWitness();\n  if (f) {\n    writer.writeBool(\n      14,\n      f\n    );\n  }\n  f = message.getIsCommittee();\n  if (f) {\n    writer.writeBool(\n      15,\n      f\n    );\n  }\n  f = message.getFrozenSupplyList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      16,\n      f,\n      TronWebProto.Account.Frozen.serializeBinaryToWriter\n    );\n  }\n  f = message.getAssetIssuedName_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      17,\n      f\n    );\n  }\n  f = message.getAssetIssuedId_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      57,\n      f\n    );\n  }\n  f = message.getLatestAssetOperationTimeMap(true);\n  if (f && f.getLength() > 0) {\n    f.serializeBinary(18, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt64);\n  }\n  f = message.getLatestAssetOperationTimev2Map(true);\n  if (f && f.getLength() > 0) {\n    f.serializeBinary(58, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt64);\n  }\n  f = message.getFreeNetUsage();\n  if (f !== 0) {\n    writer.writeInt64(\n      19,\n      f\n    );\n  }\n  f = message.getFreeAssetNetUsageMap(true);\n  if (f && f.getLength() > 0) {\n    f.serializeBinary(20, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt64);\n  }\n  f = message.getFreeAssetNetUsagev2Map(true);\n  if (f && f.getLength() > 0) {\n    f.serializeBinary(59, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt64);\n  }\n  f = message.getLatestConsumeTime();\n  if (f !== 0) {\n    writer.writeInt64(\n      21,\n      f\n    );\n  }\n  f = message.getLatestConsumeFreeTime();\n  if (f !== 0) {\n    writer.writeInt64(\n      22,\n      f\n    );\n  }\n  f = message.getAccountId_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      23,\n      f\n    );\n  }\n  f = message.getAccountResource();\n  if (f != null) {\n    writer.writeMessage(\n      26,\n      f,\n      TronWebProto.Account.AccountResource.serializeBinaryToWriter\n    );\n  }\n  f = message.getCodehash_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      30,\n      f\n    );\n  }\n  f = message.getOwnerPermission();\n  if (f != null) {\n    writer.writeMessage(\n      31,\n      f,\n      TronWebProto.Permission.serializeBinaryToWriter\n    );\n  }\n  f = message.getWitnessPermission();\n  if (f != null) {\n    writer.writeMessage(\n      32,\n      f,\n      TronWebProto.Permission.serializeBinaryToWriter\n    );\n  }\n  f = message.getActivePermissionList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      33,\n      f,\n      TronWebProto.Permission.serializeBinaryToWriter\n    );\n  }\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.Account.Frozen.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.Account.Frozen.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.Account.Frozen} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.Account.Frozen.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    frozenBalance: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    expireTime: jspb.Message.getFieldWithDefault(msg, 2, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.Account.Frozen}\n */\nTronWebProto.Account.Frozen.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.Account.Frozen;\n  return TronWebProto.Account.Frozen.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.Account.Frozen} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.Account.Frozen}\n */\nTronWebProto.Account.Frozen.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setFrozenBalance(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setExpireTime(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.Account.Frozen.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.Account.Frozen.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.Account.Frozen} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.Account.Frozen.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getFrozenBalance();\n  if (f !== 0) {\n    writer.writeInt64(\n      1,\n      f\n    );\n  }\n  f = message.getExpireTime();\n  if (f !== 0) {\n    writer.writeInt64(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional int64 frozen_balance = 1;\n * @return {number}\n */\nTronWebProto.Account.Frozen.prototype.getFrozenBalance = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Account.Frozen} returns this\n */\nTronWebProto.Account.Frozen.prototype.setFrozenBalance = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional int64 expire_time = 2;\n * @return {number}\n */\nTronWebProto.Account.Frozen.prototype.getExpireTime = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Account.Frozen} returns this\n */\nTronWebProto.Account.Frozen.prototype.setExpireTime = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.Account.AccountResource.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.Account.AccountResource.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.Account.AccountResource} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.Account.AccountResource.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    energyUsage: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    frozenBalanceForEnergy: (f = msg.getFrozenBalanceForEnergy()) && TronWebProto.Account.Frozen.toObject(includeInstance, f),\n    latestConsumeTimeForEnergy: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    acquiredDelegatedFrozenBalanceForEnergy: jspb.Message.getFieldWithDefault(msg, 4, 0),\n    delegatedFrozenBalanceForEnergy: jspb.Message.getFieldWithDefault(msg, 5, 0),\n    storageLimit: jspb.Message.getFieldWithDefault(msg, 6, 0),\n    storageUsage: jspb.Message.getFieldWithDefault(msg, 7, 0),\n    latestExchangeStorageTime: jspb.Message.getFieldWithDefault(msg, 8, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.Account.AccountResource}\n */\nTronWebProto.Account.AccountResource.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.Account.AccountResource;\n  return TronWebProto.Account.AccountResource.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.Account.AccountResource} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.Account.AccountResource}\n */\nTronWebProto.Account.AccountResource.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setEnergyUsage(value);\n      break;\n    case 2:\n      var value = new TronWebProto.Account.Frozen;\n      reader.readMessage(value,TronWebProto.Account.Frozen.deserializeBinaryFromReader);\n      msg.setFrozenBalanceForEnergy(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setLatestConsumeTimeForEnergy(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setAcquiredDelegatedFrozenBalanceForEnergy(value);\n      break;\n    case 5:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setDelegatedFrozenBalanceForEnergy(value);\n      break;\n    case 6:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setStorageLimit(value);\n      break;\n    case 7:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setStorageUsage(value);\n      break;\n    case 8:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setLatestExchangeStorageTime(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.Account.AccountResource.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.Account.AccountResource.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.Account.AccountResource} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.Account.AccountResource.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getEnergyUsage();\n  if (f !== 0) {\n    writer.writeInt64(\n      1,\n      f\n    );\n  }\n  f = message.getFrozenBalanceForEnergy();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      TronWebProto.Account.Frozen.serializeBinaryToWriter\n    );\n  }\n  f = message.getLatestConsumeTimeForEnergy();\n  if (f !== 0) {\n    writer.writeInt64(\n      3,\n      f\n    );\n  }\n  f = message.getAcquiredDelegatedFrozenBalanceForEnergy();\n  if (f !== 0) {\n    writer.writeInt64(\n      4,\n      f\n    );\n  }\n  f = message.getDelegatedFrozenBalanceForEnergy();\n  if (f !== 0) {\n    writer.writeInt64(\n      5,\n      f\n    );\n  }\n  f = message.getStorageLimit();\n  if (f !== 0) {\n    writer.writeInt64(\n      6,\n      f\n    );\n  }\n  f = message.getStorageUsage();\n  if (f !== 0) {\n    writer.writeInt64(\n      7,\n      f\n    );\n  }\n  f = message.getLatestExchangeStorageTime();\n  if (f !== 0) {\n    writer.writeInt64(\n      8,\n      f\n    );\n  }\n};\n\n\n/**\n * optional int64 energy_usage = 1;\n * @return {number}\n */\nTronWebProto.Account.AccountResource.prototype.getEnergyUsage = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Account.AccountResource} returns this\n */\nTronWebProto.Account.AccountResource.prototype.setEnergyUsage = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional Frozen frozen_balance_for_energy = 2;\n * @return {?TronWebProto.Account.Frozen}\n */\nTronWebProto.Account.AccountResource.prototype.getFrozenBalanceForEnergy = function() {\n  return /** @type{?TronWebProto.Account.Frozen} */ (\n    jspb.Message.getWrapperField(this, TronWebProto.Account.Frozen, 2));\n};\n\n\n/**\n * @param {?TronWebProto.Account.Frozen|undefined} value\n * @return {!TronWebProto.Account.AccountResource} returns this\n*/\nTronWebProto.Account.AccountResource.prototype.setFrozenBalanceForEnergy = function(value) {\n  return jspb.Message.setWrapperField(this, 2, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!TronWebProto.Account.AccountResource} returns this\n */\nTronWebProto.Account.AccountResource.prototype.clearFrozenBalanceForEnergy = function() {\n  return this.setFrozenBalanceForEnergy(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nTronWebProto.Account.AccountResource.prototype.hasFrozenBalanceForEnergy = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional int64 latest_consume_time_for_energy = 3;\n * @return {number}\n */\nTronWebProto.Account.AccountResource.prototype.getLatestConsumeTimeForEnergy = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Account.AccountResource} returns this\n */\nTronWebProto.Account.AccountResource.prototype.setLatestConsumeTimeForEnergy = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n/**\n * optional int64 acquired_delegated_frozen_balance_for_energy = 4;\n * @return {number}\n */\nTronWebProto.Account.AccountResource.prototype.getAcquiredDelegatedFrozenBalanceForEnergy = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Account.AccountResource} returns this\n */\nTronWebProto.Account.AccountResource.prototype.setAcquiredDelegatedFrozenBalanceForEnergy = function(value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\n/**\n * optional int64 delegated_frozen_balance_for_energy = 5;\n * @return {number}\n */\nTronWebProto.Account.AccountResource.prototype.getDelegatedFrozenBalanceForEnergy = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Account.AccountResource} returns this\n */\nTronWebProto.Account.AccountResource.prototype.setDelegatedFrozenBalanceForEnergy = function(value) {\n  return jspb.Message.setProto3IntField(this, 5, value);\n};\n\n\n/**\n * optional int64 storage_limit = 6;\n * @return {number}\n */\nTronWebProto.Account.AccountResource.prototype.getStorageLimit = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Account.AccountResource} returns this\n */\nTronWebProto.Account.AccountResource.prototype.setStorageLimit = function(value) {\n  return jspb.Message.setProto3IntField(this, 6, value);\n};\n\n\n/**\n * optional int64 storage_usage = 7;\n * @return {number}\n */\nTronWebProto.Account.AccountResource.prototype.getStorageUsage = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Account.AccountResource} returns this\n */\nTronWebProto.Account.AccountResource.prototype.setStorageUsage = function(value) {\n  return jspb.Message.setProto3IntField(this, 7, value);\n};\n\n\n/**\n * optional int64 latest_exchange_storage_time = 8;\n * @return {number}\n */\nTronWebProto.Account.AccountResource.prototype.getLatestExchangeStorageTime = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Account.AccountResource} returns this\n */\nTronWebProto.Account.AccountResource.prototype.setLatestExchangeStorageTime = function(value) {\n  return jspb.Message.setProto3IntField(this, 8, value);\n};\n\n\n/**\n * optional bytes account_name = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.Account.prototype.getAccountName = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes account_name = 1;\n * This is a type-conversion wrapper around `getAccountName()`\n * @return {string}\n */\nTronWebProto.Account.prototype.getAccountName_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getAccountName()));\n};\n\n\n/**\n * optional bytes account_name = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getAccountName()`\n * @return {!Uint8Array}\n */\nTronWebProto.Account.prototype.getAccountName_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getAccountName()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.setAccountName = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional AccountType type = 2;\n * @return {!TronWebProto.AccountType}\n */\nTronWebProto.Account.prototype.getType = function() {\n  return /** @type {!TronWebProto.AccountType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {!TronWebProto.AccountType} value\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.setType = function(value) {\n  return jspb.Message.setProto3EnumField(this, 2, value);\n};\n\n\n/**\n * optional bytes address = 3;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.Account.prototype.getAddress = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes address = 3;\n * This is a type-conversion wrapper around `getAddress()`\n * @return {string}\n */\nTronWebProto.Account.prototype.getAddress_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getAddress()));\n};\n\n\n/**\n * optional bytes address = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.Account.prototype.getAddress_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getAddress()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.setAddress = function(value) {\n  return jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n/**\n * optional int64 balance = 4;\n * @return {number}\n */\nTronWebProto.Account.prototype.getBalance = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.setBalance = function(value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\n/**\n * repeated Vote votes = 5;\n * @return {!Array<!TronWebProto.Vote>}\n */\nTronWebProto.Account.prototype.getVotesList = function() {\n  return /** @type{!Array<!TronWebProto.Vote>} */ (\n    jspb.Message.getRepeatedWrapperField(this, TronWebProto.Vote, 5));\n};\n\n\n/**\n * @param {!Array<!TronWebProto.Vote>} value\n * @return {!TronWebProto.Account} returns this\n*/\nTronWebProto.Account.prototype.setVotesList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 5, value);\n};\n\n\n/**\n * @param {!TronWebProto.Vote=} opt_value\n * @param {number=} opt_index\n * @return {!TronWebProto.Vote}\n */\nTronWebProto.Account.prototype.addVotes = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, TronWebProto.Vote, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.clearVotesList = function() {\n  return this.setVotesList([]);\n};\n\n\n/**\n * map<string, int64> asset = 6;\n * @param {boolean=} opt_noLazyCreate Do not create the map if\n * empty, instead returning `undefined`\n * @return {!jspb.Map<string,number>}\n */\nTronWebProto.Account.prototype.getAssetMap = function(opt_noLazyCreate) {\n  return /** @type {!jspb.Map<string,number>} */ (\n      jspb.Message.getMapField(this, 6, opt_noLazyCreate,\n      null));\n};\n\n\n/**\n * Clears values from the map. The map will be non-null.\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.clearAssetMap = function() {\n  this.getAssetMap().clear();\n  return this;};\n\n\n/**\n * map<string, int64> assetV2 = 56;\n * @param {boolean=} opt_noLazyCreate Do not create the map if\n * empty, instead returning `undefined`\n * @return {!jspb.Map<string,number>}\n */\nTronWebProto.Account.prototype.getAssetv2Map = function(opt_noLazyCreate) {\n  return /** @type {!jspb.Map<string,number>} */ (\n      jspb.Message.getMapField(this, 56, opt_noLazyCreate,\n      null));\n};\n\n\n/**\n * Clears values from the map. The map will be non-null.\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.clearAssetv2Map = function() {\n  this.getAssetv2Map().clear();\n  return this;};\n\n\n/**\n * repeated Frozen frozen = 7;\n * @return {!Array<!TronWebProto.Account.Frozen>}\n */\nTronWebProto.Account.prototype.getFrozenList = function() {\n  return /** @type{!Array<!TronWebProto.Account.Frozen>} */ (\n    jspb.Message.getRepeatedWrapperField(this, TronWebProto.Account.Frozen, 7));\n};\n\n\n/**\n * @param {!Array<!TronWebProto.Account.Frozen>} value\n * @return {!TronWebProto.Account} returns this\n*/\nTronWebProto.Account.prototype.setFrozenList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 7, value);\n};\n\n\n/**\n * @param {!TronWebProto.Account.Frozen=} opt_value\n * @param {number=} opt_index\n * @return {!TronWebProto.Account.Frozen}\n */\nTronWebProto.Account.prototype.addFrozen = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, TronWebProto.Account.Frozen, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.clearFrozenList = function() {\n  return this.setFrozenList([]);\n};\n\n\n/**\n * optional int64 net_usage = 8;\n * @return {number}\n */\nTronWebProto.Account.prototype.getNetUsage = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.setNetUsage = function(value) {\n  return jspb.Message.setProto3IntField(this, 8, value);\n};\n\n\n/**\n * optional int64 acquired_delegated_frozen_balance_for_bandwidth = 41;\n * @return {number}\n */\nTronWebProto.Account.prototype.getAcquiredDelegatedFrozenBalanceForBandwidth = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 41, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.setAcquiredDelegatedFrozenBalanceForBandwidth = function(value) {\n  return jspb.Message.setProto3IntField(this, 41, value);\n};\n\n\n/**\n * optional int64 delegated_frozen_balance_for_bandwidth = 42;\n * @return {number}\n */\nTronWebProto.Account.prototype.getDelegatedFrozenBalanceForBandwidth = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 42, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.setDelegatedFrozenBalanceForBandwidth = function(value) {\n  return jspb.Message.setProto3IntField(this, 42, value);\n};\n\n\n/**\n * optional int64 old_tron_power = 46;\n * @return {number}\n */\nTronWebProto.Account.prototype.getOldTronPower = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 46, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.setOldTronPower = function(value) {\n  return jspb.Message.setProto3IntField(this, 46, value);\n};\n\n\n/**\n * optional Frozen tron_power = 47;\n * @return {?TronWebProto.Account.Frozen}\n */\nTronWebProto.Account.prototype.getTronPower = function() {\n  return /** @type{?TronWebProto.Account.Frozen} */ (\n    jspb.Message.getWrapperField(this, TronWebProto.Account.Frozen, 47));\n};\n\n\n/**\n * @param {?TronWebProto.Account.Frozen|undefined} value\n * @return {!TronWebProto.Account} returns this\n*/\nTronWebProto.Account.prototype.setTronPower = function(value) {\n  return jspb.Message.setWrapperField(this, 47, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.clearTronPower = function() {\n  return this.setTronPower(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nTronWebProto.Account.prototype.hasTronPower = function() {\n  return jspb.Message.getField(this, 47) != null;\n};\n\n\n/**\n * optional bool asset_optimized = 60;\n * @return {boolean}\n */\nTronWebProto.Account.prototype.getAssetOptimized = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 60, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.setAssetOptimized = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 60, value);\n};\n\n\n/**\n * optional int64 create_time = 9;\n * @return {number}\n */\nTronWebProto.Account.prototype.getCreateTime = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.setCreateTime = function(value) {\n  return jspb.Message.setProto3IntField(this, 9, value);\n};\n\n\n/**\n * optional int64 latest_opration_time = 10;\n * @return {number}\n */\nTronWebProto.Account.prototype.getLatestOprationTime = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.setLatestOprationTime = function(value) {\n  return jspb.Message.setProto3IntField(this, 10, value);\n};\n\n\n/**\n * optional int64 allowance = 11;\n * @return {number}\n */\nTronWebProto.Account.prototype.getAllowance = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.setAllowance = function(value) {\n  return jspb.Message.setProto3IntField(this, 11, value);\n};\n\n\n/**\n * optional int64 latest_withdraw_time = 12;\n * @return {number}\n */\nTronWebProto.Account.prototype.getLatestWithdrawTime = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.setLatestWithdrawTime = function(value) {\n  return jspb.Message.setProto3IntField(this, 12, value);\n};\n\n\n/**\n * optional bytes code = 13;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.Account.prototype.getCode = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, \"\"));\n};\n\n\n/**\n * optional bytes code = 13;\n * This is a type-conversion wrapper around `getCode()`\n * @return {string}\n */\nTronWebProto.Account.prototype.getCode_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getCode()));\n};\n\n\n/**\n * optional bytes code = 13;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getCode()`\n * @return {!Uint8Array}\n */\nTronWebProto.Account.prototype.getCode_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getCode()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.setCode = function(value) {\n  return jspb.Message.setProto3BytesField(this, 13, value);\n};\n\n\n/**\n * optional bool is_witness = 14;\n * @return {boolean}\n */\nTronWebProto.Account.prototype.getIsWitness = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.setIsWitness = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 14, value);\n};\n\n\n/**\n * optional bool is_committee = 15;\n * @return {boolean}\n */\nTronWebProto.Account.prototype.getIsCommittee = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.setIsCommittee = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 15, value);\n};\n\n\n/**\n * repeated Frozen frozen_supply = 16;\n * @return {!Array<!TronWebProto.Account.Frozen>}\n */\nTronWebProto.Account.prototype.getFrozenSupplyList = function() {\n  return /** @type{!Array<!TronWebProto.Account.Frozen>} */ (\n    jspb.Message.getRepeatedWrapperField(this, TronWebProto.Account.Frozen, 16));\n};\n\n\n/**\n * @param {!Array<!TronWebProto.Account.Frozen>} value\n * @return {!TronWebProto.Account} returns this\n*/\nTronWebProto.Account.prototype.setFrozenSupplyList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 16, value);\n};\n\n\n/**\n * @param {!TronWebProto.Account.Frozen=} opt_value\n * @param {number=} opt_index\n * @return {!TronWebProto.Account.Frozen}\n */\nTronWebProto.Account.prototype.addFrozenSupply = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, TronWebProto.Account.Frozen, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.clearFrozenSupplyList = function() {\n  return this.setFrozenSupplyList([]);\n};\n\n\n/**\n * optional bytes asset_issued_name = 17;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.Account.prototype.getAssetIssuedName = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 17, \"\"));\n};\n\n\n/**\n * optional bytes asset_issued_name = 17;\n * This is a type-conversion wrapper around `getAssetIssuedName()`\n * @return {string}\n */\nTronWebProto.Account.prototype.getAssetIssuedName_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getAssetIssuedName()));\n};\n\n\n/**\n * optional bytes asset_issued_name = 17;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getAssetIssuedName()`\n * @return {!Uint8Array}\n */\nTronWebProto.Account.prototype.getAssetIssuedName_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getAssetIssuedName()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.setAssetIssuedName = function(value) {\n  return jspb.Message.setProto3BytesField(this, 17, value);\n};\n\n\n/**\n * optional bytes asset_issued_ID = 57;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.Account.prototype.getAssetIssuedId = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 57, \"\"));\n};\n\n\n/**\n * optional bytes asset_issued_ID = 57;\n * This is a type-conversion wrapper around `getAssetIssuedId()`\n * @return {string}\n */\nTronWebProto.Account.prototype.getAssetIssuedId_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getAssetIssuedId()));\n};\n\n\n/**\n * optional bytes asset_issued_ID = 57;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getAssetIssuedId()`\n * @return {!Uint8Array}\n */\nTronWebProto.Account.prototype.getAssetIssuedId_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getAssetIssuedId()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.setAssetIssuedId = function(value) {\n  return jspb.Message.setProto3BytesField(this, 57, value);\n};\n\n\n/**\n * map<string, int64> latest_asset_operation_time = 18;\n * @param {boolean=} opt_noLazyCreate Do not create the map if\n * empty, instead returning `undefined`\n * @return {!jspb.Map<string,number>}\n */\nTronWebProto.Account.prototype.getLatestAssetOperationTimeMap = function(opt_noLazyCreate) {\n  return /** @type {!jspb.Map<string,number>} */ (\n      jspb.Message.getMapField(this, 18, opt_noLazyCreate,\n      null));\n};\n\n\n/**\n * Clears values from the map. The map will be non-null.\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.clearLatestAssetOperationTimeMap = function() {\n  this.getLatestAssetOperationTimeMap().clear();\n  return this;};\n\n\n/**\n * map<string, int64> latest_asset_operation_timeV2 = 58;\n * @param {boolean=} opt_noLazyCreate Do not create the map if\n * empty, instead returning `undefined`\n * @return {!jspb.Map<string,number>}\n */\nTronWebProto.Account.prototype.getLatestAssetOperationTimev2Map = function(opt_noLazyCreate) {\n  return /** @type {!jspb.Map<string,number>} */ (\n      jspb.Message.getMapField(this, 58, opt_noLazyCreate,\n      null));\n};\n\n\n/**\n * Clears values from the map. The map will be non-null.\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.clearLatestAssetOperationTimev2Map = function() {\n  this.getLatestAssetOperationTimev2Map().clear();\n  return this;};\n\n\n/**\n * optional int64 free_net_usage = 19;\n * @return {number}\n */\nTronWebProto.Account.prototype.getFreeNetUsage = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.setFreeNetUsage = function(value) {\n  return jspb.Message.setProto3IntField(this, 19, value);\n};\n\n\n/**\n * map<string, int64> free_asset_net_usage = 20;\n * @param {boolean=} opt_noLazyCreate Do not create the map if\n * empty, instead returning `undefined`\n * @return {!jspb.Map<string,number>}\n */\nTronWebProto.Account.prototype.getFreeAssetNetUsageMap = function(opt_noLazyCreate) {\n  return /** @type {!jspb.Map<string,number>} */ (\n      jspb.Message.getMapField(this, 20, opt_noLazyCreate,\n      null));\n};\n\n\n/**\n * Clears values from the map. The map will be non-null.\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.clearFreeAssetNetUsageMap = function() {\n  this.getFreeAssetNetUsageMap().clear();\n  return this;};\n\n\n/**\n * map<string, int64> free_asset_net_usageV2 = 59;\n * @param {boolean=} opt_noLazyCreate Do not create the map if\n * empty, instead returning `undefined`\n * @return {!jspb.Map<string,number>}\n */\nTronWebProto.Account.prototype.getFreeAssetNetUsagev2Map = function(opt_noLazyCreate) {\n  return /** @type {!jspb.Map<string,number>} */ (\n      jspb.Message.getMapField(this, 59, opt_noLazyCreate,\n      null));\n};\n\n\n/**\n * Clears values from the map. The map will be non-null.\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.clearFreeAssetNetUsagev2Map = function() {\n  this.getFreeAssetNetUsagev2Map().clear();\n  return this;};\n\n\n/**\n * optional int64 latest_consume_time = 21;\n * @return {number}\n */\nTronWebProto.Account.prototype.getLatestConsumeTime = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.setLatestConsumeTime = function(value) {\n  return jspb.Message.setProto3IntField(this, 21, value);\n};\n\n\n/**\n * optional int64 latest_consume_free_time = 22;\n * @return {number}\n */\nTronWebProto.Account.prototype.getLatestConsumeFreeTime = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.setLatestConsumeFreeTime = function(value) {\n  return jspb.Message.setProto3IntField(this, 22, value);\n};\n\n\n/**\n * optional bytes account_id = 23;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.Account.prototype.getAccountId = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 23, \"\"));\n};\n\n\n/**\n * optional bytes account_id = 23;\n * This is a type-conversion wrapper around `getAccountId()`\n * @return {string}\n */\nTronWebProto.Account.prototype.getAccountId_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getAccountId()));\n};\n\n\n/**\n * optional bytes account_id = 23;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getAccountId()`\n * @return {!Uint8Array}\n */\nTronWebProto.Account.prototype.getAccountId_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getAccountId()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.setAccountId = function(value) {\n  return jspb.Message.setProto3BytesField(this, 23, value);\n};\n\n\n/**\n * optional AccountResource account_resource = 26;\n * @return {?TronWebProto.Account.AccountResource}\n */\nTronWebProto.Account.prototype.getAccountResource = function() {\n  return /** @type{?TronWebProto.Account.AccountResource} */ (\n    jspb.Message.getWrapperField(this, TronWebProto.Account.AccountResource, 26));\n};\n\n\n/**\n * @param {?TronWebProto.Account.AccountResource|undefined} value\n * @return {!TronWebProto.Account} returns this\n*/\nTronWebProto.Account.prototype.setAccountResource = function(value) {\n  return jspb.Message.setWrapperField(this, 26, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.clearAccountResource = function() {\n  return this.setAccountResource(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nTronWebProto.Account.prototype.hasAccountResource = function() {\n  return jspb.Message.getField(this, 26) != null;\n};\n\n\n/**\n * optional bytes codeHash = 30;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.Account.prototype.getCodehash = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 30, \"\"));\n};\n\n\n/**\n * optional bytes codeHash = 30;\n * This is a type-conversion wrapper around `getCodehash()`\n * @return {string}\n */\nTronWebProto.Account.prototype.getCodehash_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getCodehash()));\n};\n\n\n/**\n * optional bytes codeHash = 30;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getCodehash()`\n * @return {!Uint8Array}\n */\nTronWebProto.Account.prototype.getCodehash_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getCodehash()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.setCodehash = function(value) {\n  return jspb.Message.setProto3BytesField(this, 30, value);\n};\n\n\n/**\n * optional Permission owner_permission = 31;\n * @return {?TronWebProto.Permission}\n */\nTronWebProto.Account.prototype.getOwnerPermission = function() {\n  return /** @type{?TronWebProto.Permission} */ (\n    jspb.Message.getWrapperField(this, TronWebProto.Permission, 31));\n};\n\n\n/**\n * @param {?TronWebProto.Permission|undefined} value\n * @return {!TronWebProto.Account} returns this\n*/\nTronWebProto.Account.prototype.setOwnerPermission = function(value) {\n  return jspb.Message.setWrapperField(this, 31, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.clearOwnerPermission = function() {\n  return this.setOwnerPermission(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nTronWebProto.Account.prototype.hasOwnerPermission = function() {\n  return jspb.Message.getField(this, 31) != null;\n};\n\n\n/**\n * optional Permission witness_permission = 32;\n * @return {?TronWebProto.Permission}\n */\nTronWebProto.Account.prototype.getWitnessPermission = function() {\n  return /** @type{?TronWebProto.Permission} */ (\n    jspb.Message.getWrapperField(this, TronWebProto.Permission, 32));\n};\n\n\n/**\n * @param {?TronWebProto.Permission|undefined} value\n * @return {!TronWebProto.Account} returns this\n*/\nTronWebProto.Account.prototype.setWitnessPermission = function(value) {\n  return jspb.Message.setWrapperField(this, 32, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.clearWitnessPermission = function() {\n  return this.setWitnessPermission(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nTronWebProto.Account.prototype.hasWitnessPermission = function() {\n  return jspb.Message.getField(this, 32) != null;\n};\n\n\n/**\n * repeated Permission active_permission = 33;\n * @return {!Array<!TronWebProto.Permission>}\n */\nTronWebProto.Account.prototype.getActivePermissionList = function() {\n  return /** @type{!Array<!TronWebProto.Permission>} */ (\n    jspb.Message.getRepeatedWrapperField(this, TronWebProto.Permission, 33));\n};\n\n\n/**\n * @param {!Array<!TronWebProto.Permission>} value\n * @return {!TronWebProto.Account} returns this\n*/\nTronWebProto.Account.prototype.setActivePermissionList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 33, value);\n};\n\n\n/**\n * @param {!TronWebProto.Permission=} opt_value\n * @param {number=} opt_index\n * @return {!TronWebProto.Permission}\n */\nTronWebProto.Account.prototype.addActivePermission = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 33, opt_value, TronWebProto.Permission, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!TronWebProto.Account} returns this\n */\nTronWebProto.Account.prototype.clearActivePermissionList = function() {\n  return this.setActivePermissionList([]);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.Key.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.Key.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.Key} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.Key.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    address: msg.getAddress_asB64(),\n    weight: jspb.Message.getFieldWithDefault(msg, 2, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.Key}\n */\nTronWebProto.Key.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.Key;\n  return TronWebProto.Key.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.Key} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.Key}\n */\nTronWebProto.Key.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setAddress(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setWeight(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.Key.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.Key.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.Key} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.Key.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getAddress_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getWeight();\n  if (f !== 0) {\n    writer.writeInt64(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.Key.prototype.getAddress = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes address = 1;\n * This is a type-conversion wrapper around `getAddress()`\n * @return {string}\n */\nTronWebProto.Key.prototype.getAddress_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getAddress()));\n};\n\n\n/**\n * optional bytes address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.Key.prototype.getAddress_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getAddress()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.Key} returns this\n */\nTronWebProto.Key.prototype.setAddress = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional int64 weight = 2;\n * @return {number}\n */\nTronWebProto.Key.prototype.getWeight = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Key} returns this\n */\nTronWebProto.Key.prototype.setWeight = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.DelegatedResource.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.DelegatedResource.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.DelegatedResource} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.DelegatedResource.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    from: msg.getFrom_asB64(),\n    to: msg.getTo_asB64(),\n    frozenBalanceForBandwidth: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    frozenBalanceForEnergy: jspb.Message.getFieldWithDefault(msg, 4, 0),\n    expireTimeForBandwidth: jspb.Message.getFieldWithDefault(msg, 5, 0),\n    expireTimeForEnergy: jspb.Message.getFieldWithDefault(msg, 6, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.DelegatedResource}\n */\nTronWebProto.DelegatedResource.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.DelegatedResource;\n  return TronWebProto.DelegatedResource.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.DelegatedResource} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.DelegatedResource}\n */\nTronWebProto.DelegatedResource.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setFrom(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setTo(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setFrozenBalanceForBandwidth(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setFrozenBalanceForEnergy(value);\n      break;\n    case 5:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setExpireTimeForBandwidth(value);\n      break;\n    case 6:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setExpireTimeForEnergy(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.DelegatedResource.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.DelegatedResource.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.DelegatedResource} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.DelegatedResource.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getFrom_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getTo_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n  f = message.getFrozenBalanceForBandwidth();\n  if (f !== 0) {\n    writer.writeInt64(\n      3,\n      f\n    );\n  }\n  f = message.getFrozenBalanceForEnergy();\n  if (f !== 0) {\n    writer.writeInt64(\n      4,\n      f\n    );\n  }\n  f = message.getExpireTimeForBandwidth();\n  if (f !== 0) {\n    writer.writeInt64(\n      5,\n      f\n    );\n  }\n  f = message.getExpireTimeForEnergy();\n  if (f !== 0) {\n    writer.writeInt64(\n      6,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes from = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.DelegatedResource.prototype.getFrom = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes from = 1;\n * This is a type-conversion wrapper around `getFrom()`\n * @return {string}\n */\nTronWebProto.DelegatedResource.prototype.getFrom_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getFrom()));\n};\n\n\n/**\n * optional bytes from = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getFrom()`\n * @return {!Uint8Array}\n */\nTronWebProto.DelegatedResource.prototype.getFrom_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getFrom()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.DelegatedResource} returns this\n */\nTronWebProto.DelegatedResource.prototype.setFrom = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional bytes to = 2;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.DelegatedResource.prototype.getTo = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes to = 2;\n * This is a type-conversion wrapper around `getTo()`\n * @return {string}\n */\nTronWebProto.DelegatedResource.prototype.getTo_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getTo()));\n};\n\n\n/**\n * optional bytes to = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getTo()`\n * @return {!Uint8Array}\n */\nTronWebProto.DelegatedResource.prototype.getTo_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getTo()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.DelegatedResource} returns this\n */\nTronWebProto.DelegatedResource.prototype.setTo = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n/**\n * optional int64 frozen_balance_for_bandwidth = 3;\n * @return {number}\n */\nTronWebProto.DelegatedResource.prototype.getFrozenBalanceForBandwidth = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.DelegatedResource} returns this\n */\nTronWebProto.DelegatedResource.prototype.setFrozenBalanceForBandwidth = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n/**\n * optional int64 frozen_balance_for_energy = 4;\n * @return {number}\n */\nTronWebProto.DelegatedResource.prototype.getFrozenBalanceForEnergy = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.DelegatedResource} returns this\n */\nTronWebProto.DelegatedResource.prototype.setFrozenBalanceForEnergy = function(value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\n/**\n * optional int64 expire_time_for_bandwidth = 5;\n * @return {number}\n */\nTronWebProto.DelegatedResource.prototype.getExpireTimeForBandwidth = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.DelegatedResource} returns this\n */\nTronWebProto.DelegatedResource.prototype.setExpireTimeForBandwidth = function(value) {\n  return jspb.Message.setProto3IntField(this, 5, value);\n};\n\n\n/**\n * optional int64 expire_time_for_energy = 6;\n * @return {number}\n */\nTronWebProto.DelegatedResource.prototype.getExpireTimeForEnergy = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.DelegatedResource} returns this\n */\nTronWebProto.DelegatedResource.prototype.setExpireTimeForEnergy = function(value) {\n  return jspb.Message.setProto3IntField(this, 6, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.authority.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.authority.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.authority} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.authority.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    account: (f = msg.getAccount()) && TronWebProto.AccountId.toObject(includeInstance, f),\n    permissionName: msg.getPermissionName_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.authority}\n */\nTronWebProto.authority.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.authority;\n  return TronWebProto.authority.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.authority} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.authority}\n */\nTronWebProto.authority.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new TronWebProto.AccountId;\n      reader.readMessage(value,TronWebProto.AccountId.deserializeBinaryFromReader);\n      msg.setAccount(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setPermissionName(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.authority.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.authority.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.authority} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.authority.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getAccount();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      TronWebProto.AccountId.serializeBinaryToWriter\n    );\n  }\n  f = message.getPermissionName_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional AccountId account = 1;\n * @return {?TronWebProto.AccountId}\n */\nTronWebProto.authority.prototype.getAccount = function() {\n  return /** @type{?TronWebProto.AccountId} */ (\n    jspb.Message.getWrapperField(this, TronWebProto.AccountId, 1));\n};\n\n\n/**\n * @param {?TronWebProto.AccountId|undefined} value\n * @return {!TronWebProto.authority} returns this\n*/\nTronWebProto.authority.prototype.setAccount = function(value) {\n  return jspb.Message.setWrapperField(this, 1, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!TronWebProto.authority} returns this\n */\nTronWebProto.authority.prototype.clearAccount = function() {\n  return this.setAccount(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nTronWebProto.authority.prototype.hasAccount = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional bytes permission_name = 2;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.authority.prototype.getPermissionName = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes permission_name = 2;\n * This is a type-conversion wrapper around `getPermissionName()`\n * @return {string}\n */\nTronWebProto.authority.prototype.getPermissionName_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getPermissionName()));\n};\n\n\n/**\n * optional bytes permission_name = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getPermissionName()`\n * @return {!Uint8Array}\n */\nTronWebProto.authority.prototype.getPermissionName_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getPermissionName()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.authority} returns this\n */\nTronWebProto.authority.prototype.setPermissionName = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nTronWebProto.Permission.repeatedFields_ = [7];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.Permission.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.Permission.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.Permission} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.Permission.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    type: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    id: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    permissionName: jspb.Message.getFieldWithDefault(msg, 3, \"\"),\n    threshold: jspb.Message.getFieldWithDefault(msg, 4, 0),\n    parentId: jspb.Message.getFieldWithDefault(msg, 5, 0),\n    operations: msg.getOperations_asB64(),\n    keysList: jspb.Message.toObjectList(msg.getKeysList(),\n    TronWebProto.Key.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.Permission}\n */\nTronWebProto.Permission.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.Permission;\n  return TronWebProto.Permission.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.Permission} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.Permission}\n */\nTronWebProto.Permission.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!TronWebProto.Permission.PermissionType} */ (reader.readEnum());\n      msg.setType(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readInt32());\n      msg.setId(value);\n      break;\n    case 3:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setPermissionName(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setThreshold(value);\n      break;\n    case 5:\n      var value = /** @type {number} */ (reader.readInt32());\n      msg.setParentId(value);\n      break;\n    case 6:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setOperations(value);\n      break;\n    case 7:\n      var value = new TronWebProto.Key;\n      reader.readMessage(value,TronWebProto.Key.deserializeBinaryFromReader);\n      msg.addKeys(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.Permission.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.Permission.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.Permission} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.Permission.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getId();\n  if (f !== 0) {\n    writer.writeInt32(\n      2,\n      f\n    );\n  }\n  f = message.getPermissionName();\n  if (f.length > 0) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n  f = message.getThreshold();\n  if (f !== 0) {\n    writer.writeInt64(\n      4,\n      f\n    );\n  }\n  f = message.getParentId();\n  if (f !== 0) {\n    writer.writeInt32(\n      5,\n      f\n    );\n  }\n  f = message.getOperations_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      6,\n      f\n    );\n  }\n  f = message.getKeysList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      7,\n      f,\n      TronWebProto.Key.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nTronWebProto.Permission.PermissionType = {\n  OWNER: 0,\n  WITNESS: 1,\n  ACTIVE: 2\n};\n\n/**\n * optional PermissionType type = 1;\n * @return {!TronWebProto.Permission.PermissionType}\n */\nTronWebProto.Permission.prototype.getType = function() {\n  return /** @type {!TronWebProto.Permission.PermissionType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!TronWebProto.Permission.PermissionType} value\n * @return {!TronWebProto.Permission} returns this\n */\nTronWebProto.Permission.prototype.setType = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * optional int32 id = 2;\n * @return {number}\n */\nTronWebProto.Permission.prototype.getId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Permission} returns this\n */\nTronWebProto.Permission.prototype.setId = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional string permission_name = 3;\n * @return {string}\n */\nTronWebProto.Permission.prototype.getPermissionName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!TronWebProto.Permission} returns this\n */\nTronWebProto.Permission.prototype.setPermissionName = function(value) {\n  return jspb.Message.setProto3StringField(this, 3, value);\n};\n\n\n/**\n * optional int64 threshold = 4;\n * @return {number}\n */\nTronWebProto.Permission.prototype.getThreshold = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Permission} returns this\n */\nTronWebProto.Permission.prototype.setThreshold = function(value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\n/**\n * optional int32 parent_id = 5;\n * @return {number}\n */\nTronWebProto.Permission.prototype.getParentId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Permission} returns this\n */\nTronWebProto.Permission.prototype.setParentId = function(value) {\n  return jspb.Message.setProto3IntField(this, 5, value);\n};\n\n\n/**\n * optional bytes operations = 6;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.Permission.prototype.getOperations = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, \"\"));\n};\n\n\n/**\n * optional bytes operations = 6;\n * This is a type-conversion wrapper around `getOperations()`\n * @return {string}\n */\nTronWebProto.Permission.prototype.getOperations_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getOperations()));\n};\n\n\n/**\n * optional bytes operations = 6;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOperations()`\n * @return {!Uint8Array}\n */\nTronWebProto.Permission.prototype.getOperations_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getOperations()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.Permission} returns this\n */\nTronWebProto.Permission.prototype.setOperations = function(value) {\n  return jspb.Message.setProto3BytesField(this, 6, value);\n};\n\n\n/**\n * repeated Key keys = 7;\n * @return {!Array<!TronWebProto.Key>}\n */\nTronWebProto.Permission.prototype.getKeysList = function() {\n  return /** @type{!Array<!TronWebProto.Key>} */ (\n    jspb.Message.getRepeatedWrapperField(this, TronWebProto.Key, 7));\n};\n\n\n/**\n * @param {!Array<!TronWebProto.Key>} value\n * @return {!TronWebProto.Permission} returns this\n*/\nTronWebProto.Permission.prototype.setKeysList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 7, value);\n};\n\n\n/**\n * @param {!TronWebProto.Key=} opt_value\n * @param {number=} opt_index\n * @return {!TronWebProto.Key}\n */\nTronWebProto.Permission.prototype.addKeys = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, TronWebProto.Key, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!TronWebProto.Permission} returns this\n */\nTronWebProto.Permission.prototype.clearKeysList = function() {\n  return this.setKeysList([]);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.Witness.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.Witness.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.Witness} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.Witness.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    address: msg.getAddress_asB64(),\n    votecount: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    pubkey: msg.getPubkey_asB64(),\n    url: jspb.Message.getFieldWithDefault(msg, 4, \"\"),\n    totalproduced: jspb.Message.getFieldWithDefault(msg, 5, 0),\n    totalmissed: jspb.Message.getFieldWithDefault(msg, 6, 0),\n    latestblocknum: jspb.Message.getFieldWithDefault(msg, 7, 0),\n    latestslotnum: jspb.Message.getFieldWithDefault(msg, 8, 0),\n    isjobs: jspb.Message.getBooleanFieldWithDefault(msg, 9, false)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.Witness}\n */\nTronWebProto.Witness.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.Witness;\n  return TronWebProto.Witness.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.Witness} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.Witness}\n */\nTronWebProto.Witness.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setAddress(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setVotecount(value);\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setPubkey(value);\n      break;\n    case 4:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setUrl(value);\n      break;\n    case 5:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setTotalproduced(value);\n      break;\n    case 6:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setTotalmissed(value);\n      break;\n    case 7:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setLatestblocknum(value);\n      break;\n    case 8:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setLatestslotnum(value);\n      break;\n    case 9:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setIsjobs(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.Witness.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.Witness.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.Witness} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.Witness.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getAddress_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getVotecount();\n  if (f !== 0) {\n    writer.writeInt64(\n      2,\n      f\n    );\n  }\n  f = message.getPubkey_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n  f = message.getUrl();\n  if (f.length > 0) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n  f = message.getTotalproduced();\n  if (f !== 0) {\n    writer.writeInt64(\n      5,\n      f\n    );\n  }\n  f = message.getTotalmissed();\n  if (f !== 0) {\n    writer.writeInt64(\n      6,\n      f\n    );\n  }\n  f = message.getLatestblocknum();\n  if (f !== 0) {\n    writer.writeInt64(\n      7,\n      f\n    );\n  }\n  f = message.getLatestslotnum();\n  if (f !== 0) {\n    writer.writeInt64(\n      8,\n      f\n    );\n  }\n  f = message.getIsjobs();\n  if (f) {\n    writer.writeBool(\n      9,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.Witness.prototype.getAddress = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes address = 1;\n * This is a type-conversion wrapper around `getAddress()`\n * @return {string}\n */\nTronWebProto.Witness.prototype.getAddress_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getAddress()));\n};\n\n\n/**\n * optional bytes address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.Witness.prototype.getAddress_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getAddress()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.Witness} returns this\n */\nTronWebProto.Witness.prototype.setAddress = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional int64 voteCount = 2;\n * @return {number}\n */\nTronWebProto.Witness.prototype.getVotecount = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Witness} returns this\n */\nTronWebProto.Witness.prototype.setVotecount = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional bytes pubKey = 3;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.Witness.prototype.getPubkey = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes pubKey = 3;\n * This is a type-conversion wrapper around `getPubkey()`\n * @return {string}\n */\nTronWebProto.Witness.prototype.getPubkey_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getPubkey()));\n};\n\n\n/**\n * optional bytes pubKey = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getPubkey()`\n * @return {!Uint8Array}\n */\nTronWebProto.Witness.prototype.getPubkey_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getPubkey()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.Witness} returns this\n */\nTronWebProto.Witness.prototype.setPubkey = function(value) {\n  return jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n/**\n * optional string url = 4;\n * @return {string}\n */\nTronWebProto.Witness.prototype.getUrl = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!TronWebProto.Witness} returns this\n */\nTronWebProto.Witness.prototype.setUrl = function(value) {\n  return jspb.Message.setProto3StringField(this, 4, value);\n};\n\n\n/**\n * optional int64 totalProduced = 5;\n * @return {number}\n */\nTronWebProto.Witness.prototype.getTotalproduced = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Witness} returns this\n */\nTronWebProto.Witness.prototype.setTotalproduced = function(value) {\n  return jspb.Message.setProto3IntField(this, 5, value);\n};\n\n\n/**\n * optional int64 totalMissed = 6;\n * @return {number}\n */\nTronWebProto.Witness.prototype.getTotalmissed = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Witness} returns this\n */\nTronWebProto.Witness.prototype.setTotalmissed = function(value) {\n  return jspb.Message.setProto3IntField(this, 6, value);\n};\n\n\n/**\n * optional int64 latestBlockNum = 7;\n * @return {number}\n */\nTronWebProto.Witness.prototype.getLatestblocknum = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Witness} returns this\n */\nTronWebProto.Witness.prototype.setLatestblocknum = function(value) {\n  return jspb.Message.setProto3IntField(this, 7, value);\n};\n\n\n/**\n * optional int64 latestSlotNum = 8;\n * @return {number}\n */\nTronWebProto.Witness.prototype.getLatestslotnum = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Witness} returns this\n */\nTronWebProto.Witness.prototype.setLatestslotnum = function(value) {\n  return jspb.Message.setProto3IntField(this, 8, value);\n};\n\n\n/**\n * optional bool isJobs = 9;\n * @return {boolean}\n */\nTronWebProto.Witness.prototype.getIsjobs = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!TronWebProto.Witness} returns this\n */\nTronWebProto.Witness.prototype.setIsjobs = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 9, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nTronWebProto.Votes.repeatedFields_ = [2,3];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.Votes.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.Votes.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.Votes} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.Votes.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    address: msg.getAddress_asB64(),\n    oldVotesList: jspb.Message.toObjectList(msg.getOldVotesList(),\n    TronWebProto.Vote.toObject, includeInstance),\n    newVotesList: jspb.Message.toObjectList(msg.getNewVotesList(),\n    TronWebProto.Vote.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.Votes}\n */\nTronWebProto.Votes.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.Votes;\n  return TronWebProto.Votes.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.Votes} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.Votes}\n */\nTronWebProto.Votes.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setAddress(value);\n      break;\n    case 2:\n      var value = new TronWebProto.Vote;\n      reader.readMessage(value,TronWebProto.Vote.deserializeBinaryFromReader);\n      msg.addOldVotes(value);\n      break;\n    case 3:\n      var value = new TronWebProto.Vote;\n      reader.readMessage(value,TronWebProto.Vote.deserializeBinaryFromReader);\n      msg.addNewVotes(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.Votes.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.Votes.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.Votes} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.Votes.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getAddress_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getOldVotesList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      2,\n      f,\n      TronWebProto.Vote.serializeBinaryToWriter\n    );\n  }\n  f = message.getNewVotesList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      3,\n      f,\n      TronWebProto.Vote.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional bytes address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.Votes.prototype.getAddress = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes address = 1;\n * This is a type-conversion wrapper around `getAddress()`\n * @return {string}\n */\nTronWebProto.Votes.prototype.getAddress_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getAddress()));\n};\n\n\n/**\n * optional bytes address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.Votes.prototype.getAddress_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getAddress()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.Votes} returns this\n */\nTronWebProto.Votes.prototype.setAddress = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * repeated Vote old_votes = 2;\n * @return {!Array<!TronWebProto.Vote>}\n */\nTronWebProto.Votes.prototype.getOldVotesList = function() {\n  return /** @type{!Array<!TronWebProto.Vote>} */ (\n    jspb.Message.getRepeatedWrapperField(this, TronWebProto.Vote, 2));\n};\n\n\n/**\n * @param {!Array<!TronWebProto.Vote>} value\n * @return {!TronWebProto.Votes} returns this\n*/\nTronWebProto.Votes.prototype.setOldVotesList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 2, value);\n};\n\n\n/**\n * @param {!TronWebProto.Vote=} opt_value\n * @param {number=} opt_index\n * @return {!TronWebProto.Vote}\n */\nTronWebProto.Votes.prototype.addOldVotes = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, TronWebProto.Vote, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!TronWebProto.Votes} returns this\n */\nTronWebProto.Votes.prototype.clearOldVotesList = function() {\n  return this.setOldVotesList([]);\n};\n\n\n/**\n * repeated Vote new_votes = 3;\n * @return {!Array<!TronWebProto.Vote>}\n */\nTronWebProto.Votes.prototype.getNewVotesList = function() {\n  return /** @type{!Array<!TronWebProto.Vote>} */ (\n    jspb.Message.getRepeatedWrapperField(this, TronWebProto.Vote, 3));\n};\n\n\n/**\n * @param {!Array<!TronWebProto.Vote>} value\n * @return {!TronWebProto.Votes} returns this\n*/\nTronWebProto.Votes.prototype.setNewVotesList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 3, value);\n};\n\n\n/**\n * @param {!TronWebProto.Vote=} opt_value\n * @param {number=} opt_index\n * @return {!TronWebProto.Vote}\n */\nTronWebProto.Votes.prototype.addNewVotes = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, TronWebProto.Vote, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!TronWebProto.Votes} returns this\n */\nTronWebProto.Votes.prototype.clearNewVotesList = function() {\n  return this.setNewVotesList([]);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.MarketOrderDetail.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.MarketOrderDetail.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.MarketOrderDetail} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.MarketOrderDetail.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    makerorderid: msg.getMakerorderid_asB64(),\n    takerorderid: msg.getTakerorderid_asB64(),\n    fillsellquantity: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    fillbuyquantity: jspb.Message.getFieldWithDefault(msg, 4, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.MarketOrderDetail}\n */\nTronWebProto.MarketOrderDetail.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.MarketOrderDetail;\n  return TronWebProto.MarketOrderDetail.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.MarketOrderDetail} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.MarketOrderDetail}\n */\nTronWebProto.MarketOrderDetail.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setMakerorderid(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setTakerorderid(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setFillsellquantity(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setFillbuyquantity(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.MarketOrderDetail.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.MarketOrderDetail.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.MarketOrderDetail} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.MarketOrderDetail.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getMakerorderid_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getTakerorderid_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n  f = message.getFillsellquantity();\n  if (f !== 0) {\n    writer.writeInt64(\n      3,\n      f\n    );\n  }\n  f = message.getFillbuyquantity();\n  if (f !== 0) {\n    writer.writeInt64(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes makerOrderId = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.MarketOrderDetail.prototype.getMakerorderid = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes makerOrderId = 1;\n * This is a type-conversion wrapper around `getMakerorderid()`\n * @return {string}\n */\nTronWebProto.MarketOrderDetail.prototype.getMakerorderid_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getMakerorderid()));\n};\n\n\n/**\n * optional bytes makerOrderId = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getMakerorderid()`\n * @return {!Uint8Array}\n */\nTronWebProto.MarketOrderDetail.prototype.getMakerorderid_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getMakerorderid()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.MarketOrderDetail} returns this\n */\nTronWebProto.MarketOrderDetail.prototype.setMakerorderid = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional bytes takerOrderId = 2;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.MarketOrderDetail.prototype.getTakerorderid = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes takerOrderId = 2;\n * This is a type-conversion wrapper around `getTakerorderid()`\n * @return {string}\n */\nTronWebProto.MarketOrderDetail.prototype.getTakerorderid_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getTakerorderid()));\n};\n\n\n/**\n * optional bytes takerOrderId = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getTakerorderid()`\n * @return {!Uint8Array}\n */\nTronWebProto.MarketOrderDetail.prototype.getTakerorderid_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getTakerorderid()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.MarketOrderDetail} returns this\n */\nTronWebProto.MarketOrderDetail.prototype.setTakerorderid = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n/**\n * optional int64 fillSellQuantity = 3;\n * @return {number}\n */\nTronWebProto.MarketOrderDetail.prototype.getFillsellquantity = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.MarketOrderDetail} returns this\n */\nTronWebProto.MarketOrderDetail.prototype.setFillsellquantity = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n/**\n * optional int64 fillBuyQuantity = 4;\n * @return {number}\n */\nTronWebProto.MarketOrderDetail.prototype.getFillbuyquantity = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.MarketOrderDetail} returns this\n */\nTronWebProto.MarketOrderDetail.prototype.setFillbuyquantity = function(value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nTronWebProto.Transaction.repeatedFields_ = [2,5];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.Transaction.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.Transaction.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.Transaction} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.Transaction.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    rawData: (f = msg.getRawData()) && TronWebProto.Transaction.raw.toObject(includeInstance, f),\n    signatureList: msg.getSignatureList_asB64(),\n    retList: jspb.Message.toObjectList(msg.getRetList(),\n    TronWebProto.Transaction.Result.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.Transaction}\n */\nTronWebProto.Transaction.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.Transaction;\n  return TronWebProto.Transaction.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.Transaction} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.Transaction}\n */\nTronWebProto.Transaction.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new TronWebProto.Transaction.raw;\n      reader.readMessage(value,TronWebProto.Transaction.raw.deserializeBinaryFromReader);\n      msg.setRawData(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.addSignature(value);\n      break;\n    case 5:\n      var value = new TronWebProto.Transaction.Result;\n      reader.readMessage(value,TronWebProto.Transaction.Result.deserializeBinaryFromReader);\n      msg.addRet(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.Transaction.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.Transaction.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.Transaction} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.Transaction.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getRawData();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      TronWebProto.Transaction.raw.serializeBinaryToWriter\n    );\n  }\n  f = message.getSignatureList_asU8();\n  if (f.length > 0) {\n    writer.writeRepeatedBytes(\n      2,\n      f\n    );\n  }\n  f = message.getRetList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      5,\n      f,\n      TronWebProto.Transaction.Result.serializeBinaryToWriter\n    );\n  }\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.Transaction.Contract.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.Transaction.Contract.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.Transaction.Contract} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.Transaction.Contract.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    type: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    parameter: (f = msg.getParameter()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),\n    provider: msg.getProvider_asB64(),\n    contractname: msg.getContractname_asB64(),\n    permissionId: jspb.Message.getFieldWithDefault(msg, 5, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.Transaction.Contract}\n */\nTronWebProto.Transaction.Contract.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.Transaction.Contract;\n  return TronWebProto.Transaction.Contract.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.Transaction.Contract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.Transaction.Contract}\n */\nTronWebProto.Transaction.Contract.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!TronWebProto.Transaction.Contract.ContractType} */ (reader.readEnum());\n      msg.setType(value);\n      break;\n    case 2:\n      var value = new google_protobuf_any_pb.Any;\n      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);\n      msg.setParameter(value);\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setProvider(value);\n      break;\n    case 4:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setContractname(value);\n      break;\n    case 5:\n      var value = /** @type {number} */ (reader.readInt32());\n      msg.setPermissionId(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.Transaction.Contract.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.Transaction.Contract.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.Transaction.Contract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.Transaction.Contract.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getParameter();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      google_protobuf_any_pb.Any.serializeBinaryToWriter\n    );\n  }\n  f = message.getProvider_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n  f = message.getContractname_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      4,\n      f\n    );\n  }\n  f = message.getPermissionId();\n  if (f !== 0) {\n    writer.writeInt32(\n      5,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nTronWebProto.Transaction.Contract.ContractType = {\n  ACCOUNTCREATECONTRACT: 0,\n  TRANSFERCONTRACT: 1,\n  TRANSFERASSETCONTRACT: 2,\n  VOTEASSETCONTRACT: 3,\n  VOTEWITNESSCONTRACT: 4,\n  WITNESSCREATECONTRACT: 5,\n  ASSETISSUECONTRACT: 6,\n  WITNESSUPDATECONTRACT: 8,\n  PARTICIPATEASSETISSUECONTRACT: 9,\n  ACCOUNTUPDATECONTRACT: 10,\n  FREEZEBALANCECONTRACT: 11,\n  UNFREEZEBALANCECONTRACT: 12,\n  WITHDRAWBALANCECONTRACT: 13,\n  UNFREEZEASSETCONTRACT: 14,\n  UPDATEASSETCONTRACT: 15,\n  PROPOSALCREATECONTRACT: 16,\n  PROPOSALAPPROVECONTRACT: 17,\n  PROPOSALDELETECONTRACT: 18,\n  SETACCOUNTIDCONTRACT: 19,\n  CUSTOMCONTRACT: 20,\n  CREATESMARTCONTRACT: 30,\n  TRIGGERSMARTCONTRACT: 31,\n  GETCONTRACT: 32,\n  UPDATESETTINGCONTRACT: 33,\n  EXCHANGECREATECONTRACT: 41,\n  EXCHANGEINJECTCONTRACT: 42,\n  EXCHANGEWITHDRAWCONTRACT: 43,\n  EXCHANGETRANSACTIONCONTRACT: 44,\n  UPDATEENERGYLIMITCONTRACT: 45,\n  ACCOUNTPERMISSIONUPDATECONTRACT: 46,\n  CLEARABICONTRACT: 48,\n  UPDATEBROKERAGECONTRACT: 49,\n  SHIELDEDTRANSFERCONTRACT: 51,\n  MARKETSELLASSETCONTRACT: 52,\n  MARKETCANCELORDERCONTRACT: 53,\n  FREEZEBALANCEV2CONTRACT: 54,\n  UNFREEZEBALANCEV2CONTRACT: 55,\n  WITHDRAWEXPIREUNFREEZECONTRACT: 56,\n  DELEGATERESOURCECONTRACT: 57,\n  UNDELEGATERESOURCECONTRACT: 58,\n  CANCELALLUNFREEZEV2CONTRACT: 59\n};\n\n/**\n * optional ContractType type = 1;\n * @return {!TronWebProto.Transaction.Contract.ContractType}\n */\nTronWebProto.Transaction.Contract.prototype.getType = function() {\n  return /** @type {!TronWebProto.Transaction.Contract.ContractType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!TronWebProto.Transaction.Contract.ContractType} value\n * @return {!TronWebProto.Transaction.Contract} returns this\n */\nTronWebProto.Transaction.Contract.prototype.setType = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * optional google.protobuf.Any parameter = 2;\n * @return {?TronWebProto.Any}\n */\nTronWebProto.Transaction.Contract.prototype.getParameter = function() {\n  return /** @type{?TronWebProto.Any} */ (\n    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 2));\n};\n\n\n/**\n * @param {?TronWebProto.Any|undefined} value\n * @return {!TronWebProto.Transaction.Contract} returns this\n*/\nTronWebProto.Transaction.Contract.prototype.setParameter = function(value) {\n  return jspb.Message.setWrapperField(this, 2, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!TronWebProto.Transaction.Contract} returns this\n */\nTronWebProto.Transaction.Contract.prototype.clearParameter = function() {\n  return this.setParameter(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nTronWebProto.Transaction.Contract.prototype.hasParameter = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional bytes provider = 3;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.Transaction.Contract.prototype.getProvider = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes provider = 3;\n * This is a type-conversion wrapper around `getProvider()`\n * @return {string}\n */\nTronWebProto.Transaction.Contract.prototype.getProvider_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getProvider()));\n};\n\n\n/**\n * optional bytes provider = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getProvider()`\n * @return {!Uint8Array}\n */\nTronWebProto.Transaction.Contract.prototype.getProvider_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getProvider()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.Transaction.Contract} returns this\n */\nTronWebProto.Transaction.Contract.prototype.setProvider = function(value) {\n  return jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n/**\n * optional bytes ContractName = 4;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.Transaction.Contract.prototype.getContractname = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * optional bytes ContractName = 4;\n * This is a type-conversion wrapper around `getContractname()`\n * @return {string}\n */\nTronWebProto.Transaction.Contract.prototype.getContractname_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getContractname()));\n};\n\n\n/**\n * optional bytes ContractName = 4;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getContractname()`\n * @return {!Uint8Array}\n */\nTronWebProto.Transaction.Contract.prototype.getContractname_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getContractname()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.Transaction.Contract} returns this\n */\nTronWebProto.Transaction.Contract.prototype.setContractname = function(value) {\n  return jspb.Message.setProto3BytesField(this, 4, value);\n};\n\n\n/**\n * optional int32 Permission_id = 5;\n * @return {number}\n */\nTronWebProto.Transaction.Contract.prototype.getPermissionId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Transaction.Contract} returns this\n */\nTronWebProto.Transaction.Contract.prototype.setPermissionId = function(value) {\n  return jspb.Message.setProto3IntField(this, 5, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nTronWebProto.Transaction.Result.repeatedFields_ = [26];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.Transaction.Result.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.Transaction.Result.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.Transaction.Result} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.Transaction.Result.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    fee: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    ret: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    contractret: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    assetissueid: jspb.Message.getFieldWithDefault(msg, 14, \"\"),\n    withdrawAmount: jspb.Message.getFieldWithDefault(msg, 15, 0),\n    unfreezeAmount: jspb.Message.getFieldWithDefault(msg, 16, 0),\n    exchangeReceivedAmount: jspb.Message.getFieldWithDefault(msg, 18, 0),\n    exchangeInjectAnotherAmount: jspb.Message.getFieldWithDefault(msg, 19, 0),\n    exchangeWithdrawAnotherAmount: jspb.Message.getFieldWithDefault(msg, 20, 0),\n    exchangeId: jspb.Message.getFieldWithDefault(msg, 21, 0),\n    shieldedTransactionFee: jspb.Message.getFieldWithDefault(msg, 22, 0),\n    orderid: msg.getOrderid_asB64(),\n    orderdetailsList: jspb.Message.toObjectList(msg.getOrderdetailsList(),\n    TronWebProto.MarketOrderDetail.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.Transaction.Result}\n */\nTronWebProto.Transaction.Result.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.Transaction.Result;\n  return TronWebProto.Transaction.Result.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.Transaction.Result} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.Transaction.Result}\n */\nTronWebProto.Transaction.Result.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setFee(value);\n      break;\n    case 2:\n      var value = /** @type {!TronWebProto.Transaction.Result.code} */ (reader.readEnum());\n      msg.setRet(value);\n      break;\n    case 3:\n      var value = /** @type {!TronWebProto.Transaction.Result.contractResult} */ (reader.readEnum());\n      msg.setContractret(value);\n      break;\n    case 14:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setAssetissueid(value);\n      break;\n    case 15:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setWithdrawAmount(value);\n      break;\n    case 16:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setUnfreezeAmount(value);\n      break;\n    case 18:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setExchangeReceivedAmount(value);\n      break;\n    case 19:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setExchangeInjectAnotherAmount(value);\n      break;\n    case 20:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setExchangeWithdrawAnotherAmount(value);\n      break;\n    case 21:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setExchangeId(value);\n      break;\n    case 22:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setShieldedTransactionFee(value);\n      break;\n    case 25:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setOrderid(value);\n      break;\n    case 26:\n      var value = new TronWebProto.MarketOrderDetail;\n      reader.readMessage(value,TronWebProto.MarketOrderDetail.deserializeBinaryFromReader);\n      msg.addOrderdetails(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.Transaction.Result.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.Transaction.Result.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.Transaction.Result} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.Transaction.Result.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getFee();\n  if (f !== 0) {\n    writer.writeInt64(\n      1,\n      f\n    );\n  }\n  f = message.getRet();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      2,\n      f\n    );\n  }\n  f = message.getContractret();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      3,\n      f\n    );\n  }\n  f = message.getAssetissueid();\n  if (f.length > 0) {\n    writer.writeString(\n      14,\n      f\n    );\n  }\n  f = message.getWithdrawAmount();\n  if (f !== 0) {\n    writer.writeInt64(\n      15,\n      f\n    );\n  }\n  f = message.getUnfreezeAmount();\n  if (f !== 0) {\n    writer.writeInt64(\n      16,\n      f\n    );\n  }\n  f = message.getExchangeReceivedAmount();\n  if (f !== 0) {\n    writer.writeInt64(\n      18,\n      f\n    );\n  }\n  f = message.getExchangeInjectAnotherAmount();\n  if (f !== 0) {\n    writer.writeInt64(\n      19,\n      f\n    );\n  }\n  f = message.getExchangeWithdrawAnotherAmount();\n  if (f !== 0) {\n    writer.writeInt64(\n      20,\n      f\n    );\n  }\n  f = message.getExchangeId();\n  if (f !== 0) {\n    writer.writeInt64(\n      21,\n      f\n    );\n  }\n  f = message.getShieldedTransactionFee();\n  if (f !== 0) {\n    writer.writeInt64(\n      22,\n      f\n    );\n  }\n  f = message.getOrderid_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      25,\n      f\n    );\n  }\n  f = message.getOrderdetailsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      26,\n      f,\n      TronWebProto.MarketOrderDetail.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nTronWebProto.Transaction.Result.code = {\n  SUCESS: 0,\n  FAILED: 1\n};\n\n/**\n * @enum {number}\n */\nTronWebProto.Transaction.Result.contractResult = {\n  DEFAULT: 0,\n  SUCCESS: 1,\n  REVERT: 2,\n  BAD_JUMP_DESTINATION: 3,\n  OUT_OF_MEMORY: 4,\n  PRECOMPILED_CONTRACT: 5,\n  STACK_TOO_SMALL: 6,\n  STACK_TOO_LARGE: 7,\n  ILLEGAL_OPERATION: 8,\n  STACK_OVERFLOW: 9,\n  OUT_OF_ENERGY: 10,\n  OUT_OF_TIME: 11,\n  JVM_STACK_OVER_FLOW: 12,\n  UNKNOWN: 13,\n  TRANSFER_FAILED: 14,\n  INVALID_CODE: 15\n};\n\n/**\n * optional int64 fee = 1;\n * @return {number}\n */\nTronWebProto.Transaction.Result.prototype.getFee = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Transaction.Result} returns this\n */\nTronWebProto.Transaction.Result.prototype.setFee = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional code ret = 2;\n * @return {!TronWebProto.Transaction.Result.code}\n */\nTronWebProto.Transaction.Result.prototype.getRet = function() {\n  return /** @type {!TronWebProto.Transaction.Result.code} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {!TronWebProto.Transaction.Result.code} value\n * @return {!TronWebProto.Transaction.Result} returns this\n */\nTronWebProto.Transaction.Result.prototype.setRet = function(value) {\n  return jspb.Message.setProto3EnumField(this, 2, value);\n};\n\n\n/**\n * optional contractResult contractRet = 3;\n * @return {!TronWebProto.Transaction.Result.contractResult}\n */\nTronWebProto.Transaction.Result.prototype.getContractret = function() {\n  return /** @type {!TronWebProto.Transaction.Result.contractResult} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {!TronWebProto.Transaction.Result.contractResult} value\n * @return {!TronWebProto.Transaction.Result} returns this\n */\nTronWebProto.Transaction.Result.prototype.setContractret = function(value) {\n  return jspb.Message.setProto3EnumField(this, 3, value);\n};\n\n\n/**\n * optional string assetIssueID = 14;\n * @return {string}\n */\nTronWebProto.Transaction.Result.prototype.getAssetissueid = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!TronWebProto.Transaction.Result} returns this\n */\nTronWebProto.Transaction.Result.prototype.setAssetissueid = function(value) {\n  return jspb.Message.setProto3StringField(this, 14, value);\n};\n\n\n/**\n * optional int64 withdraw_amount = 15;\n * @return {number}\n */\nTronWebProto.Transaction.Result.prototype.getWithdrawAmount = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Transaction.Result} returns this\n */\nTronWebProto.Transaction.Result.prototype.setWithdrawAmount = function(value) {\n  return jspb.Message.setProto3IntField(this, 15, value);\n};\n\n\n/**\n * optional int64 unfreeze_amount = 16;\n * @return {number}\n */\nTronWebProto.Transaction.Result.prototype.getUnfreezeAmount = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Transaction.Result} returns this\n */\nTronWebProto.Transaction.Result.prototype.setUnfreezeAmount = function(value) {\n  return jspb.Message.setProto3IntField(this, 16, value);\n};\n\n\n/**\n * optional int64 exchange_received_amount = 18;\n * @return {number}\n */\nTronWebProto.Transaction.Result.prototype.getExchangeReceivedAmount = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Transaction.Result} returns this\n */\nTronWebProto.Transaction.Result.prototype.setExchangeReceivedAmount = function(value) {\n  return jspb.Message.setProto3IntField(this, 18, value);\n};\n\n\n/**\n * optional int64 exchange_inject_another_amount = 19;\n * @return {number}\n */\nTronWebProto.Transaction.Result.prototype.getExchangeInjectAnotherAmount = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Transaction.Result} returns this\n */\nTronWebProto.Transaction.Result.prototype.setExchangeInjectAnotherAmount = function(value) {\n  return jspb.Message.setProto3IntField(this, 19, value);\n};\n\n\n/**\n * optional int64 exchange_withdraw_another_amount = 20;\n * @return {number}\n */\nTronWebProto.Transaction.Result.prototype.getExchangeWithdrawAnotherAmount = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Transaction.Result} returns this\n */\nTronWebProto.Transaction.Result.prototype.setExchangeWithdrawAnotherAmount = function(value) {\n  return jspb.Message.setProto3IntField(this, 20, value);\n};\n\n\n/**\n * optional int64 exchange_id = 21;\n * @return {number}\n */\nTronWebProto.Transaction.Result.prototype.getExchangeId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Transaction.Result} returns this\n */\nTronWebProto.Transaction.Result.prototype.setExchangeId = function(value) {\n  return jspb.Message.setProto3IntField(this, 21, value);\n};\n\n\n/**\n * optional int64 shielded_transaction_fee = 22;\n * @return {number}\n */\nTronWebProto.Transaction.Result.prototype.getShieldedTransactionFee = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Transaction.Result} returns this\n */\nTronWebProto.Transaction.Result.prototype.setShieldedTransactionFee = function(value) {\n  return jspb.Message.setProto3IntField(this, 22, value);\n};\n\n\n/**\n * optional bytes orderId = 25;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.Transaction.Result.prototype.getOrderid = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 25, \"\"));\n};\n\n\n/**\n * optional bytes orderId = 25;\n * This is a type-conversion wrapper around `getOrderid()`\n * @return {string}\n */\nTronWebProto.Transaction.Result.prototype.getOrderid_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getOrderid()));\n};\n\n\n/**\n * optional bytes orderId = 25;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOrderid()`\n * @return {!Uint8Array}\n */\nTronWebProto.Transaction.Result.prototype.getOrderid_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getOrderid()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.Transaction.Result} returns this\n */\nTronWebProto.Transaction.Result.prototype.setOrderid = function(value) {\n  return jspb.Message.setProto3BytesField(this, 25, value);\n};\n\n\n/**\n * repeated MarketOrderDetail orderDetails = 26;\n * @return {!Array<!TronWebProto.MarketOrderDetail>}\n */\nTronWebProto.Transaction.Result.prototype.getOrderdetailsList = function() {\n  return /** @type{!Array<!TronWebProto.MarketOrderDetail>} */ (\n    jspb.Message.getRepeatedWrapperField(this, TronWebProto.MarketOrderDetail, 26));\n};\n\n\n/**\n * @param {!Array<!TronWebProto.MarketOrderDetail>} value\n * @return {!TronWebProto.Transaction.Result} returns this\n*/\nTronWebProto.Transaction.Result.prototype.setOrderdetailsList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 26, value);\n};\n\n\n/**\n * @param {!TronWebProto.MarketOrderDetail=} opt_value\n * @param {number=} opt_index\n * @return {!TronWebProto.MarketOrderDetail}\n */\nTronWebProto.Transaction.Result.prototype.addOrderdetails = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 26, opt_value, TronWebProto.MarketOrderDetail, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!TronWebProto.Transaction.Result} returns this\n */\nTronWebProto.Transaction.Result.prototype.clearOrderdetailsList = function() {\n  return this.setOrderdetailsList([]);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nTronWebProto.Transaction.raw.repeatedFields_ = [9,11];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.Transaction.raw.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.Transaction.raw.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.Transaction.raw} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.Transaction.raw.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    refBlockBytes: msg.getRefBlockBytes_asB64(),\n    refBlockNum: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    refBlockHash: msg.getRefBlockHash_asB64(),\n    expiration: jspb.Message.getFieldWithDefault(msg, 8, 0),\n    authsList: jspb.Message.toObjectList(msg.getAuthsList(),\n    TronWebProto.authority.toObject, includeInstance),\n    data: msg.getData_asB64(),\n    contractList: jspb.Message.toObjectList(msg.getContractList(),\n    TronWebProto.Transaction.Contract.toObject, includeInstance),\n    scripts: msg.getScripts_asB64(),\n    timestamp: jspb.Message.getFieldWithDefault(msg, 14, 0),\n    feeLimit: jspb.Message.getFieldWithDefault(msg, 18, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.Transaction.raw}\n */\nTronWebProto.Transaction.raw.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.Transaction.raw;\n  return TronWebProto.Transaction.raw.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.Transaction.raw} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.Transaction.raw}\n */\nTronWebProto.Transaction.raw.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setRefBlockBytes(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setRefBlockNum(value);\n      break;\n    case 4:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setRefBlockHash(value);\n      break;\n    case 8:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setExpiration(value);\n      break;\n    case 9:\n      var value = new TronWebProto.authority;\n      reader.readMessage(value,TronWebProto.authority.deserializeBinaryFromReader);\n      msg.addAuths(value);\n      break;\n    case 10:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setData(value);\n      break;\n    case 11:\n      var value = new TronWebProto.Transaction.Contract;\n      reader.readMessage(value,TronWebProto.Transaction.Contract.deserializeBinaryFromReader);\n      msg.addContract(value);\n      break;\n    case 12:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setScripts(value);\n      break;\n    case 14:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setTimestamp(value);\n      break;\n    case 18:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setFeeLimit(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.Transaction.raw.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.Transaction.raw.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.Transaction.raw} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.Transaction.raw.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getRefBlockBytes_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getRefBlockNum();\n  if (f !== 0) {\n    writer.writeInt64(\n      3,\n      f\n    );\n  }\n  f = message.getRefBlockHash_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      4,\n      f\n    );\n  }\n  f = message.getExpiration();\n  if (f !== 0) {\n    writer.writeInt64(\n      8,\n      f\n    );\n  }\n  f = message.getAuthsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      9,\n      f,\n      TronWebProto.authority.serializeBinaryToWriter\n    );\n  }\n  f = message.getData_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      10,\n      f\n    );\n  }\n  f = message.getContractList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      11,\n      f,\n      TronWebProto.Transaction.Contract.serializeBinaryToWriter\n    );\n  }\n  f = message.getScripts_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      12,\n      f\n    );\n  }\n  f = message.getTimestamp();\n  if (f !== 0) {\n    writer.writeInt64(\n      14,\n      f\n    );\n  }\n  f = message.getFeeLimit();\n  if (f !== 0) {\n    writer.writeInt64(\n      18,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes ref_block_bytes = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.Transaction.raw.prototype.getRefBlockBytes = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes ref_block_bytes = 1;\n * This is a type-conversion wrapper around `getRefBlockBytes()`\n * @return {string}\n */\nTronWebProto.Transaction.raw.prototype.getRefBlockBytes_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getRefBlockBytes()));\n};\n\n\n/**\n * optional bytes ref_block_bytes = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getRefBlockBytes()`\n * @return {!Uint8Array}\n */\nTronWebProto.Transaction.raw.prototype.getRefBlockBytes_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getRefBlockBytes()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.Transaction.raw} returns this\n */\nTronWebProto.Transaction.raw.prototype.setRefBlockBytes = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional int64 ref_block_num = 3;\n * @return {number}\n */\nTronWebProto.Transaction.raw.prototype.getRefBlockNum = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Transaction.raw} returns this\n */\nTronWebProto.Transaction.raw.prototype.setRefBlockNum = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n/**\n * optional bytes ref_block_hash = 4;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.Transaction.raw.prototype.getRefBlockHash = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * optional bytes ref_block_hash = 4;\n * This is a type-conversion wrapper around `getRefBlockHash()`\n * @return {string}\n */\nTronWebProto.Transaction.raw.prototype.getRefBlockHash_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getRefBlockHash()));\n};\n\n\n/**\n * optional bytes ref_block_hash = 4;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getRefBlockHash()`\n * @return {!Uint8Array}\n */\nTronWebProto.Transaction.raw.prototype.getRefBlockHash_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getRefBlockHash()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.Transaction.raw} returns this\n */\nTronWebProto.Transaction.raw.prototype.setRefBlockHash = function(value) {\n  return jspb.Message.setProto3BytesField(this, 4, value);\n};\n\n\n/**\n * optional int64 expiration = 8;\n * @return {number}\n */\nTronWebProto.Transaction.raw.prototype.getExpiration = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Transaction.raw} returns this\n */\nTronWebProto.Transaction.raw.prototype.setExpiration = function(value) {\n  return jspb.Message.setProto3IntField(this, 8, value);\n};\n\n\n/**\n * repeated authority auths = 9;\n * @return {!Array<!TronWebProto.authority>}\n */\nTronWebProto.Transaction.raw.prototype.getAuthsList = function() {\n  return /** @type{!Array<!TronWebProto.authority>} */ (\n    jspb.Message.getRepeatedWrapperField(this, TronWebProto.authority, 9));\n};\n\n\n/**\n * @param {!Array<!TronWebProto.authority>} value\n * @return {!TronWebProto.Transaction.raw} returns this\n*/\nTronWebProto.Transaction.raw.prototype.setAuthsList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 9, value);\n};\n\n\n/**\n * @param {!TronWebProto.authority=} opt_value\n * @param {number=} opt_index\n * @return {!TronWebProto.authority}\n */\nTronWebProto.Transaction.raw.prototype.addAuths = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, TronWebProto.authority, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!TronWebProto.Transaction.raw} returns this\n */\nTronWebProto.Transaction.raw.prototype.clearAuthsList = function() {\n  return this.setAuthsList([]);\n};\n\n\n/**\n * optional bytes data = 10;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.Transaction.raw.prototype.getData = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, \"\"));\n};\n\n\n/**\n * optional bytes data = 10;\n * This is a type-conversion wrapper around `getData()`\n * @return {string}\n */\nTronWebProto.Transaction.raw.prototype.getData_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getData()));\n};\n\n\n/**\n * optional bytes data = 10;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getData()`\n * @return {!Uint8Array}\n */\nTronWebProto.Transaction.raw.prototype.getData_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getData()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.Transaction.raw} returns this\n */\nTronWebProto.Transaction.raw.prototype.setData = function(value) {\n  return jspb.Message.setProto3BytesField(this, 10, value);\n};\n\n\n/**\n * repeated Contract contract = 11;\n * @return {!Array<!TronWebProto.Transaction.Contract>}\n */\nTronWebProto.Transaction.raw.prototype.getContractList = function() {\n  return /** @type{!Array<!TronWebProto.Transaction.Contract>} */ (\n    jspb.Message.getRepeatedWrapperField(this, TronWebProto.Transaction.Contract, 11));\n};\n\n\n/**\n * @param {!Array<!TronWebProto.Transaction.Contract>} value\n * @return {!TronWebProto.Transaction.raw} returns this\n*/\nTronWebProto.Transaction.raw.prototype.setContractList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 11, value);\n};\n\n\n/**\n * @param {!TronWebProto.Transaction.Contract=} opt_value\n * @param {number=} opt_index\n * @return {!TronWebProto.Transaction.Contract}\n */\nTronWebProto.Transaction.raw.prototype.addContract = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, TronWebProto.Transaction.Contract, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!TronWebProto.Transaction.raw} returns this\n */\nTronWebProto.Transaction.raw.prototype.clearContractList = function() {\n  return this.setContractList([]);\n};\n\n\n/**\n * optional bytes scripts = 12;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.Transaction.raw.prototype.getScripts = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, \"\"));\n};\n\n\n/**\n * optional bytes scripts = 12;\n * This is a type-conversion wrapper around `getScripts()`\n * @return {string}\n */\nTronWebProto.Transaction.raw.prototype.getScripts_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getScripts()));\n};\n\n\n/**\n * optional bytes scripts = 12;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getScripts()`\n * @return {!Uint8Array}\n */\nTronWebProto.Transaction.raw.prototype.getScripts_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getScripts()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.Transaction.raw} returns this\n */\nTronWebProto.Transaction.raw.prototype.setScripts = function(value) {\n  return jspb.Message.setProto3BytesField(this, 12, value);\n};\n\n\n/**\n * optional int64 timestamp = 14;\n * @return {number}\n */\nTronWebProto.Transaction.raw.prototype.getTimestamp = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Transaction.raw} returns this\n */\nTronWebProto.Transaction.raw.prototype.setTimestamp = function(value) {\n  return jspb.Message.setProto3IntField(this, 14, value);\n};\n\n\n/**\n * optional int64 fee_limit = 18;\n * @return {number}\n */\nTronWebProto.Transaction.raw.prototype.getFeeLimit = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.Transaction.raw} returns this\n */\nTronWebProto.Transaction.raw.prototype.setFeeLimit = function(value) {\n  return jspb.Message.setProto3IntField(this, 18, value);\n};\n\n\n/**\n * optional raw raw_data = 1;\n * @return {?TronWebProto.Transaction.raw}\n */\nTronWebProto.Transaction.prototype.getRawData = function() {\n  return /** @type{?TronWebProto.Transaction.raw} */ (\n    jspb.Message.getWrapperField(this, TronWebProto.Transaction.raw, 1));\n};\n\n\n/**\n * @param {?TronWebProto.Transaction.raw|undefined} value\n * @return {!TronWebProto.Transaction} returns this\n*/\nTronWebProto.Transaction.prototype.setRawData = function(value) {\n  return jspb.Message.setWrapperField(this, 1, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!TronWebProto.Transaction} returns this\n */\nTronWebProto.Transaction.prototype.clearRawData = function() {\n  return this.setRawData(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nTronWebProto.Transaction.prototype.hasRawData = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * repeated bytes signature = 2;\n * @return {!(Array<!Uint8Array>|Array<string>)}\n */\nTronWebProto.Transaction.prototype.getSignatureList = function() {\n  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));\n};\n\n\n/**\n * repeated bytes signature = 2;\n * This is a type-conversion wrapper around `getSignatureList()`\n * @return {!Array<string>}\n */\nTronWebProto.Transaction.prototype.getSignatureList_asB64 = function() {\n  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(\n      this.getSignatureList()));\n};\n\n\n/**\n * repeated bytes signature = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getSignatureList()`\n * @return {!Array<!Uint8Array>}\n */\nTronWebProto.Transaction.prototype.getSignatureList_asU8 = function() {\n  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(\n      this.getSignatureList()));\n};\n\n\n/**\n * @param {!(Array<!Uint8Array>|Array<string>)} value\n * @return {!TronWebProto.Transaction} returns this\n */\nTronWebProto.Transaction.prototype.setSignatureList = function(value) {\n  return jspb.Message.setField(this, 2, value || []);\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @param {number=} opt_index\n * @return {!TronWebProto.Transaction} returns this\n */\nTronWebProto.Transaction.prototype.addSignature = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!TronWebProto.Transaction} returns this\n */\nTronWebProto.Transaction.prototype.clearSignatureList = function() {\n  return this.setSignatureList([]);\n};\n\n\n/**\n * repeated Result ret = 5;\n * @return {!Array<!TronWebProto.Transaction.Result>}\n */\nTronWebProto.Transaction.prototype.getRetList = function() {\n  return /** @type{!Array<!TronWebProto.Transaction.Result>} */ (\n    jspb.Message.getRepeatedWrapperField(this, TronWebProto.Transaction.Result, 5));\n};\n\n\n/**\n * @param {!Array<!TronWebProto.Transaction.Result>} value\n * @return {!TronWebProto.Transaction} returns this\n*/\nTronWebProto.Transaction.prototype.setRetList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 5, value);\n};\n\n\n/**\n * @param {!TronWebProto.Transaction.Result=} opt_value\n * @param {number=} opt_index\n * @return {!TronWebProto.Transaction.Result}\n */\nTronWebProto.Transaction.prototype.addRet = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, TronWebProto.Transaction.Result, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!TronWebProto.Transaction} returns this\n */\nTronWebProto.Transaction.prototype.clearRetList = function() {\n  return this.setRetList([]);\n};\n\n\n/**\n * @enum {number}\n */\nTronWebProto.AccountType = {\n  NORMAL: 0,\n  ASSETISSUE: 1,\n  CONTRACT: 2\n};\n\ngoog.object.extend(exports, TronWebProto);\n","// source: core/contract/account_contract.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('@tronweb3/google-protobuf');\nvar goog = jspb;\nvar global =\n    (typeof globalThis !== 'undefined' && globalThis) ||\n    (typeof window !== 'undefined' && window) ||\n    (typeof global !== 'undefined' && global) ||\n    (typeof self !== 'undefined' && self) ||\n    function () {\n        return this;\n    }.call(null) ||\n    Function('return this')();\n\nvar core_Tron_pb = require('../../core/Tron_pb.cjs');\ngoog.object.extend(proto, core_Tron_pb);\ngoog.exportSymbol('TronWebProto.AccountCreateContract', null, global);\ngoog.exportSymbol('TronWebProto.AccountPermissionUpdateContract', null, global);\ngoog.exportSymbol('TronWebProto.AccountUpdateContract', null, global);\ngoog.exportSymbol('TronWebProto.SetAccountIdContract', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.AccountCreateContract = function (opt_data) {\n    jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.AccountCreateContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n    /**\n     * @public\n     * @override\n     */\n    TronWebProto.AccountCreateContract.displayName = 'TronWebProto.AccountCreateContract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.AccountUpdateContract = function (opt_data) {\n    jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.AccountUpdateContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n    /**\n     * @public\n     * @override\n     */\n    TronWebProto.AccountUpdateContract.displayName = 'TronWebProto.AccountUpdateContract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.SetAccountIdContract = function (opt_data) {\n    jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.SetAccountIdContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n    /**\n     * @public\n     * @override\n     */\n    TronWebProto.SetAccountIdContract.displayName = 'TronWebProto.SetAccountIdContract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.AccountPermissionUpdateContract = function (opt_data) {\n    jspb.Message.initialize(this, opt_data, 0, -1, TronWebProto.AccountPermissionUpdateContract.repeatedFields_, null);\n};\ngoog.inherits(TronWebProto.AccountPermissionUpdateContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n    /**\n     * @public\n     * @override\n     */\n    TronWebProto.AccountPermissionUpdateContract.displayName = 'TronWebProto.AccountPermissionUpdateContract';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n    /**\n     * Creates an object representation of this proto.\n     * Field names that are reserved in JavaScript and will be renamed to pb_name.\n     * Optional fields that are not set will be set to undefined.\n     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n     * For the list of reserved names please see:\n     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n     * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n     *     JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @return {!Object}\n     */\n    TronWebProto.AccountCreateContract.prototype.toObject = function (opt_includeInstance) {\n        return TronWebProto.AccountCreateContract.toObject(opt_includeInstance, this);\n    };\n\n    /**\n     * Static version of the {@see toObject} method.\n     * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n     *     the JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @param {!TronWebProto.AccountCreateContract} msg The msg instance to transform.\n     * @return {!Object}\n     * @suppress {unusedLocalVariables} f is only used for nested messages\n     */\n    TronWebProto.AccountCreateContract.toObject = function (includeInstance, msg) {\n        var f,\n            obj = {\n                ownerAddress: msg.getOwnerAddress_asB64(),\n                accountAddress: msg.getAccountAddress_asB64(),\n                type: jspb.Message.getFieldWithDefault(msg, 3, 0),\n            };\n\n        if (includeInstance) {\n            obj.$jspbMessageInstance = msg;\n        }\n        return obj;\n    };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.AccountCreateContract}\n */\nTronWebProto.AccountCreateContract.deserializeBinary = function (bytes) {\n    var reader = new jspb.BinaryReader(bytes);\n    var msg = new TronWebProto.AccountCreateContract();\n    return TronWebProto.AccountCreateContract.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.AccountCreateContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.AccountCreateContract}\n */\nTronWebProto.AccountCreateContract.deserializeBinaryFromReader = function (msg, reader) {\n    while (reader.nextField()) {\n        if (reader.isEndGroup()) {\n            break;\n        }\n        var field = reader.getFieldNumber();\n        switch (field) {\n            case 1:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setOwnerAddress(value);\n                break;\n            case 2:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setAccountAddress(value);\n                break;\n            case 3:\n                var value = /** @type {!TronWebProto.AccountType} */ (reader.readEnum());\n                msg.setType(value);\n                break;\n            default:\n                reader.skipField();\n                break;\n        }\n    }\n    return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.AccountCreateContract.prototype.serializeBinary = function () {\n    var writer = new jspb.BinaryWriter();\n    TronWebProto.AccountCreateContract.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.AccountCreateContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.AccountCreateContract.serializeBinaryToWriter = function (message, writer) {\n    var f = undefined;\n    f = message.getOwnerAddress_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(1, f);\n    }\n    f = message.getAccountAddress_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(2, f);\n    }\n    f = message.getType();\n    if (f !== 0.0) {\n        writer.writeEnum(3, f);\n    }\n};\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.AccountCreateContract.prototype.getOwnerAddress = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));\n};\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.AccountCreateContract.prototype.getOwnerAddress_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getOwnerAddress()));\n};\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.AccountCreateContract.prototype.getOwnerAddress_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getOwnerAddress()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.AccountCreateContract} returns this\n */\nTronWebProto.AccountCreateContract.prototype.setOwnerAddress = function (value) {\n    return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n/**\n * optional bytes account_address = 2;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.AccountCreateContract.prototype.getAccountAddress = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ''));\n};\n\n/**\n * optional bytes account_address = 2;\n * This is a type-conversion wrapper around `getAccountAddress()`\n * @return {string}\n */\nTronWebProto.AccountCreateContract.prototype.getAccountAddress_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getAccountAddress()));\n};\n\n/**\n * optional bytes account_address = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getAccountAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.AccountCreateContract.prototype.getAccountAddress_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getAccountAddress()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.AccountCreateContract} returns this\n */\nTronWebProto.AccountCreateContract.prototype.setAccountAddress = function (value) {\n    return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n/**\n * optional AccountType type = 3;\n * @return {!TronWebProto.AccountType}\n */\nTronWebProto.AccountCreateContract.prototype.getType = function () {\n    return /** @type {!TronWebProto.AccountType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n/**\n * @param {!TronWebProto.AccountType} value\n * @return {!TronWebProto.AccountCreateContract} returns this\n */\nTronWebProto.AccountCreateContract.prototype.setType = function (value) {\n    return jspb.Message.setProto3EnumField(this, 3, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n    /**\n     * Creates an object representation of this proto.\n     * Field names that are reserved in JavaScript and will be renamed to pb_name.\n     * Optional fields that are not set will be set to undefined.\n     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n     * For the list of reserved names please see:\n     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n     * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n     *     JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @return {!Object}\n     */\n    TronWebProto.AccountUpdateContract.prototype.toObject = function (opt_includeInstance) {\n        return TronWebProto.AccountUpdateContract.toObject(opt_includeInstance, this);\n    };\n\n    /**\n     * Static version of the {@see toObject} method.\n     * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n     *     the JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @param {!TronWebProto.AccountUpdateContract} msg The msg instance to transform.\n     * @return {!Object}\n     * @suppress {unusedLocalVariables} f is only used for nested messages\n     */\n    TronWebProto.AccountUpdateContract.toObject = function (includeInstance, msg) {\n        var f,\n            obj = {\n                accountName: msg.getAccountName_asB64(),\n                ownerAddress: msg.getOwnerAddress_asB64(),\n            };\n\n        if (includeInstance) {\n            obj.$jspbMessageInstance = msg;\n        }\n        return obj;\n    };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.AccountUpdateContract}\n */\nTronWebProto.AccountUpdateContract.deserializeBinary = function (bytes) {\n    var reader = new jspb.BinaryReader(bytes);\n    var msg = new TronWebProto.AccountUpdateContract();\n    return TronWebProto.AccountUpdateContract.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.AccountUpdateContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.AccountUpdateContract}\n */\nTronWebProto.AccountUpdateContract.deserializeBinaryFromReader = function (msg, reader) {\n    while (reader.nextField()) {\n        if (reader.isEndGroup()) {\n            break;\n        }\n        var field = reader.getFieldNumber();\n        switch (field) {\n            case 1:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setAccountName(value);\n                break;\n            case 2:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setOwnerAddress(value);\n                break;\n            default:\n                reader.skipField();\n                break;\n        }\n    }\n    return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.AccountUpdateContract.prototype.serializeBinary = function () {\n    var writer = new jspb.BinaryWriter();\n    TronWebProto.AccountUpdateContract.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.AccountUpdateContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.AccountUpdateContract.serializeBinaryToWriter = function (message, writer) {\n    var f = undefined;\n    f = message.getAccountName_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(1, f);\n    }\n    f = message.getOwnerAddress_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(2, f);\n    }\n};\n\n/**\n * optional bytes account_name = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.AccountUpdateContract.prototype.getAccountName = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));\n};\n\n/**\n * optional bytes account_name = 1;\n * This is a type-conversion wrapper around `getAccountName()`\n * @return {string}\n */\nTronWebProto.AccountUpdateContract.prototype.getAccountName_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getAccountName()));\n};\n\n/**\n * optional bytes account_name = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getAccountName()`\n * @return {!Uint8Array}\n */\nTronWebProto.AccountUpdateContract.prototype.getAccountName_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getAccountName()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.AccountUpdateContract} returns this\n */\nTronWebProto.AccountUpdateContract.prototype.setAccountName = function (value) {\n    return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n/**\n * optional bytes owner_address = 2;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.AccountUpdateContract.prototype.getOwnerAddress = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ''));\n};\n\n/**\n * optional bytes owner_address = 2;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.AccountUpdateContract.prototype.getOwnerAddress_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getOwnerAddress()));\n};\n\n/**\n * optional bytes owner_address = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.AccountUpdateContract.prototype.getOwnerAddress_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getOwnerAddress()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.AccountUpdateContract} returns this\n */\nTronWebProto.AccountUpdateContract.prototype.setOwnerAddress = function (value) {\n    return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n    /**\n     * Creates an object representation of this proto.\n     * Field names that are reserved in JavaScript and will be renamed to pb_name.\n     * Optional fields that are not set will be set to undefined.\n     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n     * For the list of reserved names please see:\n     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n     * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n     *     JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @return {!Object}\n     */\n    TronWebProto.SetAccountIdContract.prototype.toObject = function (opt_includeInstance) {\n        return TronWebProto.SetAccountIdContract.toObject(opt_includeInstance, this);\n    };\n\n    /**\n     * Static version of the {@see toObject} method.\n     * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n     *     the JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @param {!TronWebProto.SetAccountIdContract} msg The msg instance to transform.\n     * @return {!Object}\n     * @suppress {unusedLocalVariables} f is only used for nested messages\n     */\n    TronWebProto.SetAccountIdContract.toObject = function (includeInstance, msg) {\n        var f,\n            obj = {\n                accountId: msg.getAccountId_asB64(),\n                ownerAddress: msg.getOwnerAddress_asB64(),\n            };\n\n        if (includeInstance) {\n            obj.$jspbMessageInstance = msg;\n        }\n        return obj;\n    };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.SetAccountIdContract}\n */\nTronWebProto.SetAccountIdContract.deserializeBinary = function (bytes) {\n    var reader = new jspb.BinaryReader(bytes);\n    var msg = new TronWebProto.SetAccountIdContract();\n    return TronWebProto.SetAccountIdContract.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.SetAccountIdContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.SetAccountIdContract}\n */\nTronWebProto.SetAccountIdContract.deserializeBinaryFromReader = function (msg, reader) {\n    while (reader.nextField()) {\n        if (reader.isEndGroup()) {\n            break;\n        }\n        var field = reader.getFieldNumber();\n        switch (field) {\n            case 1:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setAccountId(value);\n                break;\n            case 2:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setOwnerAddress(value);\n                break;\n            default:\n                reader.skipField();\n                break;\n        }\n    }\n    return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.SetAccountIdContract.prototype.serializeBinary = function () {\n    var writer = new jspb.BinaryWriter();\n    TronWebProto.SetAccountIdContract.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.SetAccountIdContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.SetAccountIdContract.serializeBinaryToWriter = function (message, writer) {\n    var f = undefined;\n    f = message.getAccountId_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(1, f);\n    }\n    f = message.getOwnerAddress_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(2, f);\n    }\n};\n\n/**\n * optional bytes account_id = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.SetAccountIdContract.prototype.getAccountId = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));\n};\n\n/**\n * optional bytes account_id = 1;\n * This is a type-conversion wrapper around `getAccountId()`\n * @return {string}\n */\nTronWebProto.SetAccountIdContract.prototype.getAccountId_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getAccountId()));\n};\n\n/**\n * optional bytes account_id = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getAccountId()`\n * @return {!Uint8Array}\n */\nTronWebProto.SetAccountIdContract.prototype.getAccountId_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getAccountId()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.SetAccountIdContract} returns this\n */\nTronWebProto.SetAccountIdContract.prototype.setAccountId = function (value) {\n    return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n/**\n * optional bytes owner_address = 2;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.SetAccountIdContract.prototype.getOwnerAddress = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ''));\n};\n\n/**\n * optional bytes owner_address = 2;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.SetAccountIdContract.prototype.getOwnerAddress_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getOwnerAddress()));\n};\n\n/**\n * optional bytes owner_address = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.SetAccountIdContract.prototype.getOwnerAddress_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getOwnerAddress()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.SetAccountIdContract} returns this\n */\nTronWebProto.SetAccountIdContract.prototype.setOwnerAddress = function (value) {\n    return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nTronWebProto.AccountPermissionUpdateContract.repeatedFields_ = [4];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n    /**\n     * Creates an object representation of this proto.\n     * Field names that are reserved in JavaScript and will be renamed to pb_name.\n     * Optional fields that are not set will be set to undefined.\n     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n     * For the list of reserved names please see:\n     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n     * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n     *     JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @return {!Object}\n     */\n    TronWebProto.AccountPermissionUpdateContract.prototype.toObject = function (opt_includeInstance) {\n        return TronWebProto.AccountPermissionUpdateContract.toObject(opt_includeInstance, this);\n    };\n\n    /**\n     * Static version of the {@see toObject} method.\n     * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n     *     the JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @param {!TronWebProto.AccountPermissionUpdateContract} msg The msg instance to transform.\n     * @return {!Object}\n     * @suppress {unusedLocalVariables} f is only used for nested messages\n     */\n    TronWebProto.AccountPermissionUpdateContract.toObject = function (includeInstance, msg) {\n        var f,\n            obj = {\n                ownerAddress: msg.getOwnerAddress_asB64(),\n                owner: (f = msg.getOwner()) && core_Tron_pb.Permission.toObject(includeInstance, f),\n                witness: (f = msg.getWitness()) && core_Tron_pb.Permission.toObject(includeInstance, f),\n                activesList: jspb.Message.toObjectList(msg.getActivesList(), core_Tron_pb.Permission.toObject, includeInstance),\n            };\n\n        if (includeInstance) {\n            obj.$jspbMessageInstance = msg;\n        }\n        return obj;\n    };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.AccountPermissionUpdateContract}\n */\nTronWebProto.AccountPermissionUpdateContract.deserializeBinary = function (bytes) {\n    var reader = new jspb.BinaryReader(bytes);\n    var msg = new TronWebProto.AccountPermissionUpdateContract();\n    return TronWebProto.AccountPermissionUpdateContract.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.AccountPermissionUpdateContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.AccountPermissionUpdateContract}\n */\nTronWebProto.AccountPermissionUpdateContract.deserializeBinaryFromReader = function (msg, reader) {\n    while (reader.nextField()) {\n        if (reader.isEndGroup()) {\n            break;\n        }\n        var field = reader.getFieldNumber();\n        switch (field) {\n            case 1:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setOwnerAddress(value);\n                break;\n            case 2:\n                var value = new core_Tron_pb.Permission();\n                reader.readMessage(value, core_Tron_pb.Permission.deserializeBinaryFromReader);\n                msg.setOwner(value);\n                break;\n            case 3:\n                var value = new core_Tron_pb.Permission();\n                reader.readMessage(value, core_Tron_pb.Permission.deserializeBinaryFromReader);\n                msg.setWitness(value);\n                break;\n            case 4:\n                var value = new core_Tron_pb.Permission();\n                reader.readMessage(value, core_Tron_pb.Permission.deserializeBinaryFromReader);\n                msg.addActives(value);\n                break;\n            default:\n                reader.skipField();\n                break;\n        }\n    }\n    return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.AccountPermissionUpdateContract.prototype.serializeBinary = function () {\n    var writer = new jspb.BinaryWriter();\n    TronWebProto.AccountPermissionUpdateContract.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.AccountPermissionUpdateContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.AccountPermissionUpdateContract.serializeBinaryToWriter = function (message, writer) {\n    var f = undefined;\n    f = message.getOwnerAddress_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(1, f);\n    }\n    f = message.getOwner();\n    if (f != null) {\n        writer.writeMessage(2, f, core_Tron_pb.Permission.serializeBinaryToWriter);\n    }\n    f = message.getWitness();\n    if (f != null) {\n        writer.writeMessage(3, f, core_Tron_pb.Permission.serializeBinaryToWriter);\n    }\n    f = message.getActivesList();\n    if (f.length > 0) {\n        writer.writeRepeatedMessage(4, f, core_Tron_pb.Permission.serializeBinaryToWriter);\n    }\n};\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.AccountPermissionUpdateContract.prototype.getOwnerAddress = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));\n};\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.AccountPermissionUpdateContract.prototype.getOwnerAddress_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getOwnerAddress()));\n};\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.AccountPermissionUpdateContract.prototype.getOwnerAddress_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getOwnerAddress()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.AccountPermissionUpdateContract} returns this\n */\nTronWebProto.AccountPermissionUpdateContract.prototype.setOwnerAddress = function (value) {\n    return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n/**\n * optional Permission owner = 2;\n * @return {?TronWebProto.Permission}\n */\nTronWebProto.AccountPermissionUpdateContract.prototype.getOwner = function () {\n    return /** @type{?TronWebProto.Permission} */ (jspb.Message.getWrapperField(this, core_Tron_pb.Permission, 2));\n};\n\n/**\n * @param {?TronWebProto.Permission|undefined} value\n * @return {!TronWebProto.AccountPermissionUpdateContract} returns this\n */\nTronWebProto.AccountPermissionUpdateContract.prototype.setOwner = function (value) {\n    return jspb.Message.setWrapperField(this, 2, value);\n};\n\n/**\n * Clears the message field making it undefined.\n * @return {!TronWebProto.AccountPermissionUpdateContract} returns this\n */\nTronWebProto.AccountPermissionUpdateContract.prototype.clearOwner = function () {\n    return this.setOwner(undefined);\n};\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nTronWebProto.AccountPermissionUpdateContract.prototype.hasOwner = function () {\n    return jspb.Message.getField(this, 2) != null;\n};\n\n/**\n * optional Permission witness = 3;\n * @return {?TronWebProto.Permission}\n */\nTronWebProto.AccountPermissionUpdateContract.prototype.getWitness = function () {\n    return /** @type{?TronWebProto.Permission} */ (jspb.Message.getWrapperField(this, core_Tron_pb.Permission, 3));\n};\n\n/**\n * @param {?TronWebProto.Permission|undefined} value\n * @return {!TronWebProto.AccountPermissionUpdateContract} returns this\n */\nTronWebProto.AccountPermissionUpdateContract.prototype.setWitness = function (value) {\n    return jspb.Message.setWrapperField(this, 3, value);\n};\n\n/**\n * Clears the message field making it undefined.\n * @return {!TronWebProto.AccountPermissionUpdateContract} returns this\n */\nTronWebProto.AccountPermissionUpdateContract.prototype.clearWitness = function () {\n    return this.setWitness(undefined);\n};\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nTronWebProto.AccountPermissionUpdateContract.prototype.hasWitness = function () {\n    return jspb.Message.getField(this, 3) != null;\n};\n\n/**\n * repeated Permission actives = 4;\n * @return {!Array<!TronWebProto.Permission>}\n */\nTronWebProto.AccountPermissionUpdateContract.prototype.getActivesList = function () {\n    return /** @type{!Array<!TronWebProto.Permission>} */ (\n        jspb.Message.getRepeatedWrapperField(this, core_Tron_pb.Permission, 4)\n    );\n};\n\n/**\n * @param {!Array<!TronWebProto.Permission>} value\n * @return {!TronWebProto.AccountPermissionUpdateContract} returns this\n */\nTronWebProto.AccountPermissionUpdateContract.prototype.setActivesList = function (value) {\n    return jspb.Message.setRepeatedWrapperField(this, 4, value);\n};\n\n/**\n * @param {!TronWebProto.Permission=} opt_value\n * @param {number=} opt_index\n * @return {!TronWebProto.Permission}\n */\nTronWebProto.AccountPermissionUpdateContract.prototype.addActives = function (opt_value, opt_index) {\n    return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, TronWebProto.Permission, opt_index);\n};\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!TronWebProto.AccountPermissionUpdateContract} returns this\n */\nTronWebProto.AccountPermissionUpdateContract.prototype.clearActivesList = function () {\n    return this.setActivesList([]);\n};\n\ngoog.object.extend(exports, TronWebProto);\n","// source: core/contract/asset_issue_contract.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('@tronweb3/google-protobuf');\nvar goog = jspb;\nvar global =\n  (typeof globalThis !== 'undefined' && globalThis) ||\n  (typeof window !== 'undefined' && window) ||\n  (typeof global !== 'undefined' && global) ||\n  (typeof self !== 'undefined' && self) ||\n  (function () { return this; }).call(null) ||\n  Function('return this')();\n\ngoog.exportSymbol('TronWebProto.AssetIssueContract', null, global);\ngoog.exportSymbol('TronWebProto.AssetIssueContract.FrozenSupply', null, global);\ngoog.exportSymbol('TronWebProto.ParticipateAssetIssueContract', null, global);\ngoog.exportSymbol('TronWebProto.TransferAssetContract', null, global);\ngoog.exportSymbol('TronWebProto.UnfreezeAssetContract', null, global);\ngoog.exportSymbol('TronWebProto.UpdateAssetContract', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.AssetIssueContract = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, TronWebProto.AssetIssueContract.repeatedFields_, null);\n};\ngoog.inherits(TronWebProto.AssetIssueContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.AssetIssueContract.displayName = 'TronWebProto.AssetIssueContract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.AssetIssueContract.FrozenSupply = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.AssetIssueContract.FrozenSupply, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.AssetIssueContract.FrozenSupply.displayName = 'TronWebProto.AssetIssueContract.FrozenSupply';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.TransferAssetContract = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.TransferAssetContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.TransferAssetContract.displayName = 'TronWebProto.TransferAssetContract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.UnfreezeAssetContract = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.UnfreezeAssetContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.UnfreezeAssetContract.displayName = 'TronWebProto.UnfreezeAssetContract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.UpdateAssetContract = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.UpdateAssetContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.UpdateAssetContract.displayName = 'TronWebProto.UpdateAssetContract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.ParticipateAssetIssueContract = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.ParticipateAssetIssueContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.ParticipateAssetIssueContract.displayName = 'TronWebProto.ParticipateAssetIssueContract';\n}\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nTronWebProto.AssetIssueContract.repeatedFields_ = [5];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.AssetIssueContract.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.AssetIssueContract.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.AssetIssueContract} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.AssetIssueContract.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    id: jspb.Message.getFieldWithDefault(msg, 41, \"\"),\n    ownerAddress: msg.getOwnerAddress_asB64(),\n    name: msg.getName_asB64(),\n    abbr: msg.getAbbr_asB64(),\n    totalSupply: jspb.Message.getFieldWithDefault(msg, 4, 0),\n    frozenSupplyList: jspb.Message.toObjectList(msg.getFrozenSupplyList(),\n    TronWebProto.AssetIssueContract.FrozenSupply.toObject, includeInstance),\n    trxNum: jspb.Message.getFieldWithDefault(msg, 6, 0),\n    precision: jspb.Message.getFieldWithDefault(msg, 7, 0),\n    num: jspb.Message.getFieldWithDefault(msg, 8, 0),\n    startTime: jspb.Message.getFieldWithDefault(msg, 9, 0),\n    endTime: jspb.Message.getFieldWithDefault(msg, 10, 0),\n    order: jspb.Message.getFieldWithDefault(msg, 11, 0),\n    voteScore: jspb.Message.getFieldWithDefault(msg, 16, 0),\n    description: msg.getDescription_asB64(),\n    url: msg.getUrl_asB64(),\n    freeAssetNetLimit: jspb.Message.getFieldWithDefault(msg, 22, 0),\n    publicFreeAssetNetLimit: jspb.Message.getFieldWithDefault(msg, 23, 0),\n    publicFreeAssetNetUsage: jspb.Message.getFieldWithDefault(msg, 24, 0),\n    publicLatestFreeNetTime: jspb.Message.getFieldWithDefault(msg, 25, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.AssetIssueContract}\n */\nTronWebProto.AssetIssueContract.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.AssetIssueContract;\n  return TronWebProto.AssetIssueContract.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.AssetIssueContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.AssetIssueContract}\n */\nTronWebProto.AssetIssueContract.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 41:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setId(value);\n      break;\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setOwnerAddress(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setName(value);\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setAbbr(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setTotalSupply(value);\n      break;\n    case 5:\n      var value = new TronWebProto.AssetIssueContract.FrozenSupply;\n      reader.readMessage(value,TronWebProto.AssetIssueContract.FrozenSupply.deserializeBinaryFromReader);\n      msg.addFrozenSupply(value);\n      break;\n    case 6:\n      var value = /** @type {number} */ (reader.readInt32());\n      msg.setTrxNum(value);\n      break;\n    case 7:\n      var value = /** @type {number} */ (reader.readInt32());\n      msg.setPrecision(value);\n      break;\n    case 8:\n      var value = /** @type {number} */ (reader.readInt32());\n      msg.setNum(value);\n      break;\n    case 9:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setStartTime(value);\n      break;\n    case 10:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setEndTime(value);\n      break;\n    case 11:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setOrder(value);\n      break;\n    case 16:\n      var value = /** @type {number} */ (reader.readInt32());\n      msg.setVoteScore(value);\n      break;\n    case 20:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setDescription(value);\n      break;\n    case 21:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setUrl(value);\n      break;\n    case 22:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setFreeAssetNetLimit(value);\n      break;\n    case 23:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setPublicFreeAssetNetLimit(value);\n      break;\n    case 24:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setPublicFreeAssetNetUsage(value);\n      break;\n    case 25:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setPublicLatestFreeNetTime(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.AssetIssueContract.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.AssetIssueContract.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.AssetIssueContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.AssetIssueContract.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getId();\n  if (f.length > 0) {\n    writer.writeString(\n      41,\n      f\n    );\n  }\n  f = message.getOwnerAddress_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getName_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n  f = message.getAbbr_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n  f = message.getTotalSupply();\n  if (f !== 0) {\n    writer.writeInt64(\n      4,\n      f\n    );\n  }\n  f = message.getFrozenSupplyList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      5,\n      f,\n      TronWebProto.AssetIssueContract.FrozenSupply.serializeBinaryToWriter\n    );\n  }\n  f = message.getTrxNum();\n  if (f !== 0) {\n    writer.writeInt32(\n      6,\n      f\n    );\n  }\n  f = message.getPrecision();\n  if (f !== 0) {\n    writer.writeInt32(\n      7,\n      f\n    );\n  }\n  f = message.getNum();\n  if (f !== 0) {\n    writer.writeInt32(\n      8,\n      f\n    );\n  }\n  f = message.getStartTime();\n  if (f !== 0) {\n    writer.writeInt64(\n      9,\n      f\n    );\n  }\n  f = message.getEndTime();\n  if (f !== 0) {\n    writer.writeInt64(\n      10,\n      f\n    );\n  }\n  f = message.getOrder();\n  if (f !== 0) {\n    writer.writeInt64(\n      11,\n      f\n    );\n  }\n  f = message.getVoteScore();\n  if (f !== 0) {\n    writer.writeInt32(\n      16,\n      f\n    );\n  }\n  f = message.getDescription_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      20,\n      f\n    );\n  }\n  f = message.getUrl_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      21,\n      f\n    );\n  }\n  f = message.getFreeAssetNetLimit();\n  if (f !== 0) {\n    writer.writeInt64(\n      22,\n      f\n    );\n  }\n  f = message.getPublicFreeAssetNetLimit();\n  if (f !== 0) {\n    writer.writeInt64(\n      23,\n      f\n    );\n  }\n  f = message.getPublicFreeAssetNetUsage();\n  if (f !== 0) {\n    writer.writeInt64(\n      24,\n      f\n    );\n  }\n  f = message.getPublicLatestFreeNetTime();\n  if (f !== 0) {\n    writer.writeInt64(\n      25,\n      f\n    );\n  }\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.AssetIssueContract.FrozenSupply.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.AssetIssueContract.FrozenSupply.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.AssetIssueContract.FrozenSupply} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.AssetIssueContract.FrozenSupply.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    frozenAmount: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    frozenDays: jspb.Message.getFieldWithDefault(msg, 2, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.AssetIssueContract.FrozenSupply}\n */\nTronWebProto.AssetIssueContract.FrozenSupply.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.AssetIssueContract.FrozenSupply;\n  return TronWebProto.AssetIssueContract.FrozenSupply.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.AssetIssueContract.FrozenSupply} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.AssetIssueContract.FrozenSupply}\n */\nTronWebProto.AssetIssueContract.FrozenSupply.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setFrozenAmount(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setFrozenDays(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.AssetIssueContract.FrozenSupply.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.AssetIssueContract.FrozenSupply.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.AssetIssueContract.FrozenSupply} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.AssetIssueContract.FrozenSupply.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getFrozenAmount();\n  if (f !== 0) {\n    writer.writeInt64(\n      1,\n      f\n    );\n  }\n  f = message.getFrozenDays();\n  if (f !== 0) {\n    writer.writeInt64(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional int64 frozen_amount = 1;\n * @return {number}\n */\nTronWebProto.AssetIssueContract.FrozenSupply.prototype.getFrozenAmount = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.AssetIssueContract.FrozenSupply} returns this\n */\nTronWebProto.AssetIssueContract.FrozenSupply.prototype.setFrozenAmount = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional int64 frozen_days = 2;\n * @return {number}\n */\nTronWebProto.AssetIssueContract.FrozenSupply.prototype.getFrozenDays = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.AssetIssueContract.FrozenSupply} returns this\n */\nTronWebProto.AssetIssueContract.FrozenSupply.prototype.setFrozenDays = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional string id = 41;\n * @return {string}\n */\nTronWebProto.AssetIssueContract.prototype.getId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 41, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!TronWebProto.AssetIssueContract} returns this\n */\nTronWebProto.AssetIssueContract.prototype.setId = function(value) {\n  return jspb.Message.setProto3StringField(this, 41, value);\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.AssetIssueContract.prototype.getOwnerAddress = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.AssetIssueContract.prototype.getOwnerAddress_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.AssetIssueContract.prototype.getOwnerAddress_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.AssetIssueContract} returns this\n */\nTronWebProto.AssetIssueContract.prototype.setOwnerAddress = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional bytes name = 2;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.AssetIssueContract.prototype.getName = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes name = 2;\n * This is a type-conversion wrapper around `getName()`\n * @return {string}\n */\nTronWebProto.AssetIssueContract.prototype.getName_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getName()));\n};\n\n\n/**\n * optional bytes name = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getName()`\n * @return {!Uint8Array}\n */\nTronWebProto.AssetIssueContract.prototype.getName_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getName()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.AssetIssueContract} returns this\n */\nTronWebProto.AssetIssueContract.prototype.setName = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n/**\n * optional bytes abbr = 3;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.AssetIssueContract.prototype.getAbbr = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes abbr = 3;\n * This is a type-conversion wrapper around `getAbbr()`\n * @return {string}\n */\nTronWebProto.AssetIssueContract.prototype.getAbbr_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getAbbr()));\n};\n\n\n/**\n * optional bytes abbr = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getAbbr()`\n * @return {!Uint8Array}\n */\nTronWebProto.AssetIssueContract.prototype.getAbbr_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getAbbr()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.AssetIssueContract} returns this\n */\nTronWebProto.AssetIssueContract.prototype.setAbbr = function(value) {\n  return jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n/**\n * optional int64 total_supply = 4;\n * @return {number}\n */\nTronWebProto.AssetIssueContract.prototype.getTotalSupply = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.AssetIssueContract} returns this\n */\nTronWebProto.AssetIssueContract.prototype.setTotalSupply = function(value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\n/**\n * repeated FrozenSupply frozen_supply = 5;\n * @return {!Array<!TronWebProto.AssetIssueContract.FrozenSupply>}\n */\nTronWebProto.AssetIssueContract.prototype.getFrozenSupplyList = function() {\n  return /** @type{!Array<!TronWebProto.AssetIssueContract.FrozenSupply>} */ (\n    jspb.Message.getRepeatedWrapperField(this, TronWebProto.AssetIssueContract.FrozenSupply, 5));\n};\n\n\n/**\n * @param {!Array<!TronWebProto.AssetIssueContract.FrozenSupply>} value\n * @return {!TronWebProto.AssetIssueContract} returns this\n*/\nTronWebProto.AssetIssueContract.prototype.setFrozenSupplyList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 5, value);\n};\n\n\n/**\n * @param {!TronWebProto.AssetIssueContract.FrozenSupply=} opt_value\n * @param {number=} opt_index\n * @return {!TronWebProto.AssetIssueContract.FrozenSupply}\n */\nTronWebProto.AssetIssueContract.prototype.addFrozenSupply = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, TronWebProto.AssetIssueContract.FrozenSupply, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!TronWebProto.AssetIssueContract} returns this\n */\nTronWebProto.AssetIssueContract.prototype.clearFrozenSupplyList = function() {\n  return this.setFrozenSupplyList([]);\n};\n\n\n/**\n * optional int32 trx_num = 6;\n * @return {number}\n */\nTronWebProto.AssetIssueContract.prototype.getTrxNum = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.AssetIssueContract} returns this\n */\nTronWebProto.AssetIssueContract.prototype.setTrxNum = function(value) {\n  return jspb.Message.setProto3IntField(this, 6, value);\n};\n\n\n/**\n * optional int32 precision = 7;\n * @return {number}\n */\nTronWebProto.AssetIssueContract.prototype.getPrecision = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.AssetIssueContract} returns this\n */\nTronWebProto.AssetIssueContract.prototype.setPrecision = function(value) {\n  return jspb.Message.setProto3IntField(this, 7, value);\n};\n\n\n/**\n * optional int32 num = 8;\n * @return {number}\n */\nTronWebProto.AssetIssueContract.prototype.getNum = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.AssetIssueContract} returns this\n */\nTronWebProto.AssetIssueContract.prototype.setNum = function(value) {\n  return jspb.Message.setProto3IntField(this, 8, value);\n};\n\n\n/**\n * optional int64 start_time = 9;\n * @return {number}\n */\nTronWebProto.AssetIssueContract.prototype.getStartTime = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.AssetIssueContract} returns this\n */\nTronWebProto.AssetIssueContract.prototype.setStartTime = function(value) {\n  return jspb.Message.setProto3IntField(this, 9, value);\n};\n\n\n/**\n * optional int64 end_time = 10;\n * @return {number}\n */\nTronWebProto.AssetIssueContract.prototype.getEndTime = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.AssetIssueContract} returns this\n */\nTronWebProto.AssetIssueContract.prototype.setEndTime = function(value) {\n  return jspb.Message.setProto3IntField(this, 10, value);\n};\n\n\n/**\n * optional int64 order = 11;\n * @return {number}\n */\nTronWebProto.AssetIssueContract.prototype.getOrder = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.AssetIssueContract} returns this\n */\nTronWebProto.AssetIssueContract.prototype.setOrder = function(value) {\n  return jspb.Message.setProto3IntField(this, 11, value);\n};\n\n\n/**\n * optional int32 vote_score = 16;\n * @return {number}\n */\nTronWebProto.AssetIssueContract.prototype.getVoteScore = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.AssetIssueContract} returns this\n */\nTronWebProto.AssetIssueContract.prototype.setVoteScore = function(value) {\n  return jspb.Message.setProto3IntField(this, 16, value);\n};\n\n\n/**\n * optional bytes description = 20;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.AssetIssueContract.prototype.getDescription = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, \"\"));\n};\n\n\n/**\n * optional bytes description = 20;\n * This is a type-conversion wrapper around `getDescription()`\n * @return {string}\n */\nTronWebProto.AssetIssueContract.prototype.getDescription_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getDescription()));\n};\n\n\n/**\n * optional bytes description = 20;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getDescription()`\n * @return {!Uint8Array}\n */\nTronWebProto.AssetIssueContract.prototype.getDescription_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getDescription()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.AssetIssueContract} returns this\n */\nTronWebProto.AssetIssueContract.prototype.setDescription = function(value) {\n  return jspb.Message.setProto3BytesField(this, 20, value);\n};\n\n\n/**\n * optional bytes url = 21;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.AssetIssueContract.prototype.getUrl = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 21, \"\"));\n};\n\n\n/**\n * optional bytes url = 21;\n * This is a type-conversion wrapper around `getUrl()`\n * @return {string}\n */\nTronWebProto.AssetIssueContract.prototype.getUrl_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getUrl()));\n};\n\n\n/**\n * optional bytes url = 21;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getUrl()`\n * @return {!Uint8Array}\n */\nTronWebProto.AssetIssueContract.prototype.getUrl_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getUrl()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.AssetIssueContract} returns this\n */\nTronWebProto.AssetIssueContract.prototype.setUrl = function(value) {\n  return jspb.Message.setProto3BytesField(this, 21, value);\n};\n\n\n/**\n * optional int64 free_asset_net_limit = 22;\n * @return {number}\n */\nTronWebProto.AssetIssueContract.prototype.getFreeAssetNetLimit = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.AssetIssueContract} returns this\n */\nTronWebProto.AssetIssueContract.prototype.setFreeAssetNetLimit = function(value) {\n  return jspb.Message.setProto3IntField(this, 22, value);\n};\n\n\n/**\n * optional int64 public_free_asset_net_limit = 23;\n * @return {number}\n */\nTronWebProto.AssetIssueContract.prototype.getPublicFreeAssetNetLimit = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.AssetIssueContract} returns this\n */\nTronWebProto.AssetIssueContract.prototype.setPublicFreeAssetNetLimit = function(value) {\n  return jspb.Message.setProto3IntField(this, 23, value);\n};\n\n\n/**\n * optional int64 public_free_asset_net_usage = 24;\n * @return {number}\n */\nTronWebProto.AssetIssueContract.prototype.getPublicFreeAssetNetUsage = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.AssetIssueContract} returns this\n */\nTronWebProto.AssetIssueContract.prototype.setPublicFreeAssetNetUsage = function(value) {\n  return jspb.Message.setProto3IntField(this, 24, value);\n};\n\n\n/**\n * optional int64 public_latest_free_net_time = 25;\n * @return {number}\n */\nTronWebProto.AssetIssueContract.prototype.getPublicLatestFreeNetTime = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 25, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.AssetIssueContract} returns this\n */\nTronWebProto.AssetIssueContract.prototype.setPublicLatestFreeNetTime = function(value) {\n  return jspb.Message.setProto3IntField(this, 25, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.TransferAssetContract.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.TransferAssetContract.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.TransferAssetContract} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.TransferAssetContract.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    assetName: msg.getAssetName_asB64(),\n    ownerAddress: msg.getOwnerAddress_asB64(),\n    toAddress: msg.getToAddress_asB64(),\n    amount: jspb.Message.getFieldWithDefault(msg, 4, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.TransferAssetContract}\n */\nTronWebProto.TransferAssetContract.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.TransferAssetContract;\n  return TronWebProto.TransferAssetContract.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.TransferAssetContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.TransferAssetContract}\n */\nTronWebProto.TransferAssetContract.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setAssetName(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setOwnerAddress(value);\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setToAddress(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setAmount(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.TransferAssetContract.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.TransferAssetContract.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.TransferAssetContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.TransferAssetContract.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getAssetName_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getOwnerAddress_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n  f = message.getToAddress_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n  f = message.getAmount();\n  if (f !== 0) {\n    writer.writeInt64(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes asset_name = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.TransferAssetContract.prototype.getAssetName = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes asset_name = 1;\n * This is a type-conversion wrapper around `getAssetName()`\n * @return {string}\n */\nTronWebProto.TransferAssetContract.prototype.getAssetName_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getAssetName()));\n};\n\n\n/**\n * optional bytes asset_name = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getAssetName()`\n * @return {!Uint8Array}\n */\nTronWebProto.TransferAssetContract.prototype.getAssetName_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getAssetName()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.TransferAssetContract} returns this\n */\nTronWebProto.TransferAssetContract.prototype.setAssetName = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional bytes owner_address = 2;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.TransferAssetContract.prototype.getOwnerAddress = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes owner_address = 2;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.TransferAssetContract.prototype.getOwnerAddress_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * optional bytes owner_address = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.TransferAssetContract.prototype.getOwnerAddress_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.TransferAssetContract} returns this\n */\nTronWebProto.TransferAssetContract.prototype.setOwnerAddress = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n/**\n * optional bytes to_address = 3;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.TransferAssetContract.prototype.getToAddress = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes to_address = 3;\n * This is a type-conversion wrapper around `getToAddress()`\n * @return {string}\n */\nTronWebProto.TransferAssetContract.prototype.getToAddress_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getToAddress()));\n};\n\n\n/**\n * optional bytes to_address = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getToAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.TransferAssetContract.prototype.getToAddress_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getToAddress()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.TransferAssetContract} returns this\n */\nTronWebProto.TransferAssetContract.prototype.setToAddress = function(value) {\n  return jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n/**\n * optional int64 amount = 4;\n * @return {number}\n */\nTronWebProto.TransferAssetContract.prototype.getAmount = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.TransferAssetContract} returns this\n */\nTronWebProto.TransferAssetContract.prototype.setAmount = function(value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.UnfreezeAssetContract.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.UnfreezeAssetContract.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.UnfreezeAssetContract} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.UnfreezeAssetContract.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    ownerAddress: msg.getOwnerAddress_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.UnfreezeAssetContract}\n */\nTronWebProto.UnfreezeAssetContract.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.UnfreezeAssetContract;\n  return TronWebProto.UnfreezeAssetContract.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.UnfreezeAssetContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.UnfreezeAssetContract}\n */\nTronWebProto.UnfreezeAssetContract.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setOwnerAddress(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.UnfreezeAssetContract.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.UnfreezeAssetContract.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.UnfreezeAssetContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.UnfreezeAssetContract.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getOwnerAddress_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.UnfreezeAssetContract.prototype.getOwnerAddress = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.UnfreezeAssetContract.prototype.getOwnerAddress_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.UnfreezeAssetContract.prototype.getOwnerAddress_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.UnfreezeAssetContract} returns this\n */\nTronWebProto.UnfreezeAssetContract.prototype.setOwnerAddress = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.UpdateAssetContract.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.UpdateAssetContract.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.UpdateAssetContract} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.UpdateAssetContract.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    ownerAddress: msg.getOwnerAddress_asB64(),\n    description: msg.getDescription_asB64(),\n    url: msg.getUrl_asB64(),\n    newLimit: jspb.Message.getFieldWithDefault(msg, 4, 0),\n    newPublicLimit: jspb.Message.getFieldWithDefault(msg, 5, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.UpdateAssetContract}\n */\nTronWebProto.UpdateAssetContract.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.UpdateAssetContract;\n  return TronWebProto.UpdateAssetContract.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.UpdateAssetContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.UpdateAssetContract}\n */\nTronWebProto.UpdateAssetContract.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setOwnerAddress(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setDescription(value);\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setUrl(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setNewLimit(value);\n      break;\n    case 5:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setNewPublicLimit(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.UpdateAssetContract.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.UpdateAssetContract.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.UpdateAssetContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.UpdateAssetContract.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getOwnerAddress_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getDescription_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n  f = message.getUrl_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n  f = message.getNewLimit();\n  if (f !== 0) {\n    writer.writeInt64(\n      4,\n      f\n    );\n  }\n  f = message.getNewPublicLimit();\n  if (f !== 0) {\n    writer.writeInt64(\n      5,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.UpdateAssetContract.prototype.getOwnerAddress = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.UpdateAssetContract.prototype.getOwnerAddress_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.UpdateAssetContract.prototype.getOwnerAddress_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.UpdateAssetContract} returns this\n */\nTronWebProto.UpdateAssetContract.prototype.setOwnerAddress = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional bytes description = 2;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.UpdateAssetContract.prototype.getDescription = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes description = 2;\n * This is a type-conversion wrapper around `getDescription()`\n * @return {string}\n */\nTronWebProto.UpdateAssetContract.prototype.getDescription_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getDescription()));\n};\n\n\n/**\n * optional bytes description = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getDescription()`\n * @return {!Uint8Array}\n */\nTronWebProto.UpdateAssetContract.prototype.getDescription_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getDescription()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.UpdateAssetContract} returns this\n */\nTronWebProto.UpdateAssetContract.prototype.setDescription = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n/**\n * optional bytes url = 3;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.UpdateAssetContract.prototype.getUrl = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes url = 3;\n * This is a type-conversion wrapper around `getUrl()`\n * @return {string}\n */\nTronWebProto.UpdateAssetContract.prototype.getUrl_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getUrl()));\n};\n\n\n/**\n * optional bytes url = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getUrl()`\n * @return {!Uint8Array}\n */\nTronWebProto.UpdateAssetContract.prototype.getUrl_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getUrl()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.UpdateAssetContract} returns this\n */\nTronWebProto.UpdateAssetContract.prototype.setUrl = function(value) {\n  return jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n/**\n * optional int64 new_limit = 4;\n * @return {number}\n */\nTronWebProto.UpdateAssetContract.prototype.getNewLimit = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.UpdateAssetContract} returns this\n */\nTronWebProto.UpdateAssetContract.prototype.setNewLimit = function(value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\n/**\n * optional int64 new_public_limit = 5;\n * @return {number}\n */\nTronWebProto.UpdateAssetContract.prototype.getNewPublicLimit = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.UpdateAssetContract} returns this\n */\nTronWebProto.UpdateAssetContract.prototype.setNewPublicLimit = function(value) {\n  return jspb.Message.setProto3IntField(this, 5, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.ParticipateAssetIssueContract.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.ParticipateAssetIssueContract.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.ParticipateAssetIssueContract} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.ParticipateAssetIssueContract.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    ownerAddress: msg.getOwnerAddress_asB64(),\n    toAddress: msg.getToAddress_asB64(),\n    assetName: msg.getAssetName_asB64(),\n    amount: jspb.Message.getFieldWithDefault(msg, 4, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.ParticipateAssetIssueContract}\n */\nTronWebProto.ParticipateAssetIssueContract.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.ParticipateAssetIssueContract;\n  return TronWebProto.ParticipateAssetIssueContract.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.ParticipateAssetIssueContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.ParticipateAssetIssueContract}\n */\nTronWebProto.ParticipateAssetIssueContract.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setOwnerAddress(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setToAddress(value);\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setAssetName(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setAmount(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.ParticipateAssetIssueContract.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.ParticipateAssetIssueContract.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.ParticipateAssetIssueContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.ParticipateAssetIssueContract.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getOwnerAddress_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getToAddress_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n  f = message.getAssetName_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n  f = message.getAmount();\n  if (f !== 0) {\n    writer.writeInt64(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.ParticipateAssetIssueContract.prototype.getOwnerAddress = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.ParticipateAssetIssueContract.prototype.getOwnerAddress_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.ParticipateAssetIssueContract.prototype.getOwnerAddress_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.ParticipateAssetIssueContract} returns this\n */\nTronWebProto.ParticipateAssetIssueContract.prototype.setOwnerAddress = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional bytes to_address = 2;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.ParticipateAssetIssueContract.prototype.getToAddress = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes to_address = 2;\n * This is a type-conversion wrapper around `getToAddress()`\n * @return {string}\n */\nTronWebProto.ParticipateAssetIssueContract.prototype.getToAddress_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getToAddress()));\n};\n\n\n/**\n * optional bytes to_address = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getToAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.ParticipateAssetIssueContract.prototype.getToAddress_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getToAddress()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.ParticipateAssetIssueContract} returns this\n */\nTronWebProto.ParticipateAssetIssueContract.prototype.setToAddress = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n/**\n * optional bytes asset_name = 3;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.ParticipateAssetIssueContract.prototype.getAssetName = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes asset_name = 3;\n * This is a type-conversion wrapper around `getAssetName()`\n * @return {string}\n */\nTronWebProto.ParticipateAssetIssueContract.prototype.getAssetName_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getAssetName()));\n};\n\n\n/**\n * optional bytes asset_name = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getAssetName()`\n * @return {!Uint8Array}\n */\nTronWebProto.ParticipateAssetIssueContract.prototype.getAssetName_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getAssetName()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.ParticipateAssetIssueContract} returns this\n */\nTronWebProto.ParticipateAssetIssueContract.prototype.setAssetName = function(value) {\n  return jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n/**\n * optional int64 amount = 4;\n * @return {number}\n */\nTronWebProto.ParticipateAssetIssueContract.prototype.getAmount = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.ParticipateAssetIssueContract} returns this\n */\nTronWebProto.ParticipateAssetIssueContract.prototype.setAmount = function(value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\ngoog.object.extend(exports, TronWebProto);\n","// source: core/contract/balance_contract.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('@tronweb3/google-protobuf');\nvar goog = jspb;\nvar global =\n    (typeof globalThis !== 'undefined' && globalThis) ||\n    (typeof window !== 'undefined' && window) ||\n    (typeof global !== 'undefined' && global) ||\n    (typeof self !== 'undefined' && self) ||\n    function () {\n        return this;\n    }.call(null) ||\n    Function('return this')();\n\nvar core_contract_common_pb = require('../../core/contract/common_pb.cjs');\ngoog.object.extend(proto, core_contract_common_pb);\ngoog.exportSymbol('TronWebProto.AccountBalanceRequest', null, global);\ngoog.exportSymbol('TronWebProto.AccountBalanceResponse', null, global);\ngoog.exportSymbol('TronWebProto.AccountIdentifier', null, global);\ngoog.exportSymbol('TronWebProto.AccountTrace', null, global);\ngoog.exportSymbol('TronWebProto.BlockBalanceTrace', null, global);\ngoog.exportSymbol('TronWebProto.BlockBalanceTrace.BlockIdentifier', null, global);\ngoog.exportSymbol('TronWebProto.CancelAllUnfreezeV2Contract', null, global);\ngoog.exportSymbol('TronWebProto.DelegateResourceContract', null, global);\ngoog.exportSymbol('TronWebProto.FreezeBalanceContract', null, global);\ngoog.exportSymbol('TronWebProto.FreezeBalanceV2Contract', null, global);\ngoog.exportSymbol('TronWebProto.TransactionBalanceTrace', null, global);\ngoog.exportSymbol('TronWebProto.TransactionBalanceTrace.Operation', null, global);\ngoog.exportSymbol('TronWebProto.TransferContract', null, global);\ngoog.exportSymbol('TronWebProto.UnDelegateResourceContract', null, global);\ngoog.exportSymbol('TronWebProto.UnfreezeBalanceContract', null, global);\ngoog.exportSymbol('TronWebProto.UnfreezeBalanceV2Contract', null, global);\ngoog.exportSymbol('TronWebProto.WithdrawBalanceContract', null, global);\ngoog.exportSymbol('TronWebProto.WithdrawExpireUnfreezeContract', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.FreezeBalanceContract = function (opt_data) {\n    jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.FreezeBalanceContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n    /**\n     * @public\n     * @override\n     */\n    TronWebProto.FreezeBalanceContract.displayName = 'TronWebProto.FreezeBalanceContract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.UnfreezeBalanceContract = function (opt_data) {\n    jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.UnfreezeBalanceContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n    /**\n     * @public\n     * @override\n     */\n    TronWebProto.UnfreezeBalanceContract.displayName = 'TronWebProto.UnfreezeBalanceContract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.WithdrawBalanceContract = function (opt_data) {\n    jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.WithdrawBalanceContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n    /**\n     * @public\n     * @override\n     */\n    TronWebProto.WithdrawBalanceContract.displayName = 'TronWebProto.WithdrawBalanceContract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.TransferContract = function (opt_data) {\n    jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.TransferContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n    /**\n     * @public\n     * @override\n     */\n    TronWebProto.TransferContract.displayName = 'TronWebProto.TransferContract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.TransactionBalanceTrace = function (opt_data) {\n    jspb.Message.initialize(this, opt_data, 0, -1, TronWebProto.TransactionBalanceTrace.repeatedFields_, null);\n};\ngoog.inherits(TronWebProto.TransactionBalanceTrace, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n    /**\n     * @public\n     * @override\n     */\n    TronWebProto.TransactionBalanceTrace.displayName = 'TronWebProto.TransactionBalanceTrace';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.TransactionBalanceTrace.Operation = function (opt_data) {\n    jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.TransactionBalanceTrace.Operation, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n    /**\n     * @public\n     * @override\n     */\n    TronWebProto.TransactionBalanceTrace.Operation.displayName = 'TronWebProto.TransactionBalanceTrace.Operation';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.BlockBalanceTrace = function (opt_data) {\n    jspb.Message.initialize(this, opt_data, 0, -1, TronWebProto.BlockBalanceTrace.repeatedFields_, null);\n};\ngoog.inherits(TronWebProto.BlockBalanceTrace, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n    /**\n     * @public\n     * @override\n     */\n    TronWebProto.BlockBalanceTrace.displayName = 'TronWebProto.BlockBalanceTrace';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.BlockBalanceTrace.BlockIdentifier = function (opt_data) {\n    jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.BlockBalanceTrace.BlockIdentifier, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n    /**\n     * @public\n     * @override\n     */\n    TronWebProto.BlockBalanceTrace.BlockIdentifier.displayName = 'TronWebProto.BlockBalanceTrace.BlockIdentifier';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.AccountTrace = function (opt_data) {\n    jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.AccountTrace, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n    /**\n     * @public\n     * @override\n     */\n    TronWebProto.AccountTrace.displayName = 'TronWebProto.AccountTrace';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.AccountIdentifier = function (opt_data) {\n    jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.AccountIdentifier, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n    /**\n     * @public\n     * @override\n     */\n    TronWebProto.AccountIdentifier.displayName = 'TronWebProto.AccountIdentifier';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.AccountBalanceRequest = function (opt_data) {\n    jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.AccountBalanceRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n    /**\n     * @public\n     * @override\n     */\n    TronWebProto.AccountBalanceRequest.displayName = 'TronWebProto.AccountBalanceRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.AccountBalanceResponse = function (opt_data) {\n    jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.AccountBalanceResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n    /**\n     * @public\n     * @override\n     */\n    TronWebProto.AccountBalanceResponse.displayName = 'TronWebProto.AccountBalanceResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.FreezeBalanceV2Contract = function (opt_data) {\n    jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.FreezeBalanceV2Contract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n    /**\n     * @public\n     * @override\n     */\n    TronWebProto.FreezeBalanceV2Contract.displayName = 'TronWebProto.FreezeBalanceV2Contract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.UnfreezeBalanceV2Contract = function (opt_data) {\n    jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.UnfreezeBalanceV2Contract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n    /**\n     * @public\n     * @override\n     */\n    TronWebProto.UnfreezeBalanceV2Contract.displayName = 'TronWebProto.UnfreezeBalanceV2Contract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.WithdrawExpireUnfreezeContract = function (opt_data) {\n    jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.WithdrawExpireUnfreezeContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n    /**\n     * @public\n     * @override\n     */\n    TronWebProto.WithdrawExpireUnfreezeContract.displayName = 'TronWebProto.WithdrawExpireUnfreezeContract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.DelegateResourceContract = function (opt_data) {\n    jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.DelegateResourceContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n    /**\n     * @public\n     * @override\n     */\n    TronWebProto.DelegateResourceContract.displayName = 'TronWebProto.DelegateResourceContract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.UnDelegateResourceContract = function (opt_data) {\n    jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.UnDelegateResourceContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n    /**\n     * @public\n     * @override\n     */\n    TronWebProto.UnDelegateResourceContract.displayName = 'TronWebProto.UnDelegateResourceContract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.CancelAllUnfreezeV2Contract = function (opt_data) {\n    jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.CancelAllUnfreezeV2Contract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n    /**\n     * @public\n     * @override\n     */\n    TronWebProto.CancelAllUnfreezeV2Contract.displayName = 'TronWebProto.CancelAllUnfreezeV2Contract';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n    /**\n     * Creates an object representation of this proto.\n     * Field names that are reserved in JavaScript and will be renamed to pb_name.\n     * Optional fields that are not set will be set to undefined.\n     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n     * For the list of reserved names please see:\n     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n     * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n     *     JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @return {!Object}\n     */\n    TronWebProto.FreezeBalanceContract.prototype.toObject = function (opt_includeInstance) {\n        return TronWebProto.FreezeBalanceContract.toObject(opt_includeInstance, this);\n    };\n\n    /**\n     * Static version of the {@see toObject} method.\n     * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n     *     the JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @param {!TronWebProto.FreezeBalanceContract} msg The msg instance to transform.\n     * @return {!Object}\n     * @suppress {unusedLocalVariables} f is only used for nested messages\n     */\n    TronWebProto.FreezeBalanceContract.toObject = function (includeInstance, msg) {\n        var f,\n            obj = {\n                ownerAddress: msg.getOwnerAddress_asB64(),\n                frozenBalance: jspb.Message.getFieldWithDefault(msg, 2, 0),\n                frozenDuration: jspb.Message.getFieldWithDefault(msg, 3, 0),\n                resource: jspb.Message.getFieldWithDefault(msg, 10, 0),\n                receiverAddress: msg.getReceiverAddress_asB64(),\n            };\n\n        if (includeInstance) {\n            obj.$jspbMessageInstance = msg;\n        }\n        return obj;\n    };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.FreezeBalanceContract}\n */\nTronWebProto.FreezeBalanceContract.deserializeBinary = function (bytes) {\n    var reader = new jspb.BinaryReader(bytes);\n    var msg = new TronWebProto.FreezeBalanceContract();\n    return TronWebProto.FreezeBalanceContract.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.FreezeBalanceContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.FreezeBalanceContract}\n */\nTronWebProto.FreezeBalanceContract.deserializeBinaryFromReader = function (msg, reader) {\n    while (reader.nextField()) {\n        if (reader.isEndGroup()) {\n            break;\n        }\n        var field = reader.getFieldNumber();\n        switch (field) {\n            case 1:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setOwnerAddress(value);\n                break;\n            case 2:\n                var value = /** @type {number} */ (reader.readInt64());\n                msg.setFrozenBalance(value);\n                break;\n            case 3:\n                var value = /** @type {number} */ (reader.readInt64());\n                msg.setFrozenDuration(value);\n                break;\n            case 10:\n                var value = /** @type {!TronWebProto.ResourceCode} */ (reader.readEnum());\n                msg.setResource(value);\n                break;\n            case 15:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setReceiverAddress(value);\n                break;\n            default:\n                reader.skipField();\n                break;\n        }\n    }\n    return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.FreezeBalanceContract.prototype.serializeBinary = function () {\n    var writer = new jspb.BinaryWriter();\n    TronWebProto.FreezeBalanceContract.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.FreezeBalanceContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.FreezeBalanceContract.serializeBinaryToWriter = function (message, writer) {\n    var f = undefined;\n    f = message.getOwnerAddress_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(1, f);\n    }\n    f = message.getFrozenBalance();\n    if (f !== 0) {\n        writer.writeInt64(2, f);\n    }\n    f = message.getFrozenDuration();\n    if (f !== 0) {\n        writer.writeInt64(3, f);\n    }\n    f = message.getResource();\n    if (f !== 0.0) {\n        writer.writeEnum(10, f);\n    }\n    f = message.getReceiverAddress_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(15, f);\n    }\n};\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.FreezeBalanceContract.prototype.getOwnerAddress = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));\n};\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.FreezeBalanceContract.prototype.getOwnerAddress_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getOwnerAddress()));\n};\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.FreezeBalanceContract.prototype.getOwnerAddress_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getOwnerAddress()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.FreezeBalanceContract} returns this\n */\nTronWebProto.FreezeBalanceContract.prototype.setOwnerAddress = function (value) {\n    return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n/**\n * optional int64 frozen_balance = 2;\n * @return {number}\n */\nTronWebProto.FreezeBalanceContract.prototype.getFrozenBalance = function () {\n    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n/**\n * @param {number} value\n * @return {!TronWebProto.FreezeBalanceContract} returns this\n */\nTronWebProto.FreezeBalanceContract.prototype.setFrozenBalance = function (value) {\n    return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n/**\n * optional int64 frozen_duration = 3;\n * @return {number}\n */\nTronWebProto.FreezeBalanceContract.prototype.getFrozenDuration = function () {\n    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n/**\n * @param {number} value\n * @return {!TronWebProto.FreezeBalanceContract} returns this\n */\nTronWebProto.FreezeBalanceContract.prototype.setFrozenDuration = function (value) {\n    return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n/**\n * optional ResourceCode resource = 10;\n * @return {!TronWebProto.ResourceCode}\n */\nTronWebProto.FreezeBalanceContract.prototype.getResource = function () {\n    return /** @type {!TronWebProto.ResourceCode} */ (jspb.Message.getFieldWithDefault(this, 10, 0));\n};\n\n/**\n * @param {!TronWebProto.ResourceCode} value\n * @return {!TronWebProto.FreezeBalanceContract} returns this\n */\nTronWebProto.FreezeBalanceContract.prototype.setResource = function (value) {\n    return jspb.Message.setProto3EnumField(this, 10, value);\n};\n\n/**\n * optional bytes receiver_address = 15;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.FreezeBalanceContract.prototype.getReceiverAddress = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 15, ''));\n};\n\n/**\n * optional bytes receiver_address = 15;\n * This is a type-conversion wrapper around `getReceiverAddress()`\n * @return {string}\n */\nTronWebProto.FreezeBalanceContract.prototype.getReceiverAddress_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getReceiverAddress()));\n};\n\n/**\n * optional bytes receiver_address = 15;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getReceiverAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.FreezeBalanceContract.prototype.getReceiverAddress_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getReceiverAddress()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.FreezeBalanceContract} returns this\n */\nTronWebProto.FreezeBalanceContract.prototype.setReceiverAddress = function (value) {\n    return jspb.Message.setProto3BytesField(this, 15, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n    /**\n     * Creates an object representation of this proto.\n     * Field names that are reserved in JavaScript and will be renamed to pb_name.\n     * Optional fields that are not set will be set to undefined.\n     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n     * For the list of reserved names please see:\n     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n     * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n     *     JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @return {!Object}\n     */\n    TronWebProto.UnfreezeBalanceContract.prototype.toObject = function (opt_includeInstance) {\n        return TronWebProto.UnfreezeBalanceContract.toObject(opt_includeInstance, this);\n    };\n\n    /**\n     * Static version of the {@see toObject} method.\n     * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n     *     the JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @param {!TronWebProto.UnfreezeBalanceContract} msg The msg instance to transform.\n     * @return {!Object}\n     * @suppress {unusedLocalVariables} f is only used for nested messages\n     */\n    TronWebProto.UnfreezeBalanceContract.toObject = function (includeInstance, msg) {\n        var f,\n            obj = {\n                ownerAddress: msg.getOwnerAddress_asB64(),\n                resource: jspb.Message.getFieldWithDefault(msg, 10, 0),\n                receiverAddress: msg.getReceiverAddress_asB64(),\n            };\n\n        if (includeInstance) {\n            obj.$jspbMessageInstance = msg;\n        }\n        return obj;\n    };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.UnfreezeBalanceContract}\n */\nTronWebProto.UnfreezeBalanceContract.deserializeBinary = function (bytes) {\n    var reader = new jspb.BinaryReader(bytes);\n    var msg = new TronWebProto.UnfreezeBalanceContract();\n    return TronWebProto.UnfreezeBalanceContract.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.UnfreezeBalanceContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.UnfreezeBalanceContract}\n */\nTronWebProto.UnfreezeBalanceContract.deserializeBinaryFromReader = function (msg, reader) {\n    while (reader.nextField()) {\n        if (reader.isEndGroup()) {\n            break;\n        }\n        var field = reader.getFieldNumber();\n        switch (field) {\n            case 1:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setOwnerAddress(value);\n                break;\n            case 10:\n                var value = /** @type {!TronWebProto.ResourceCode} */ (reader.readEnum());\n                msg.setResource(value);\n                break;\n            case 15:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setReceiverAddress(value);\n                break;\n            default:\n                reader.skipField();\n                break;\n        }\n    }\n    return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.UnfreezeBalanceContract.prototype.serializeBinary = function () {\n    var writer = new jspb.BinaryWriter();\n    TronWebProto.UnfreezeBalanceContract.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.UnfreezeBalanceContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.UnfreezeBalanceContract.serializeBinaryToWriter = function (message, writer) {\n    var f = undefined;\n    f = message.getOwnerAddress_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(1, f);\n    }\n    f = message.getResource();\n    if (f !== 0.0) {\n        writer.writeEnum(10, f);\n    }\n    f = message.getReceiverAddress_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(15, f);\n    }\n};\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.UnfreezeBalanceContract.prototype.getOwnerAddress = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));\n};\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.UnfreezeBalanceContract.prototype.getOwnerAddress_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getOwnerAddress()));\n};\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.UnfreezeBalanceContract.prototype.getOwnerAddress_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getOwnerAddress()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.UnfreezeBalanceContract} returns this\n */\nTronWebProto.UnfreezeBalanceContract.prototype.setOwnerAddress = function (value) {\n    return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n/**\n * optional ResourceCode resource = 10;\n * @return {!TronWebProto.ResourceCode}\n */\nTronWebProto.UnfreezeBalanceContract.prototype.getResource = function () {\n    return /** @type {!TronWebProto.ResourceCode} */ (jspb.Message.getFieldWithDefault(this, 10, 0));\n};\n\n/**\n * @param {!TronWebProto.ResourceCode} value\n * @return {!TronWebProto.UnfreezeBalanceContract} returns this\n */\nTronWebProto.UnfreezeBalanceContract.prototype.setResource = function (value) {\n    return jspb.Message.setProto3EnumField(this, 10, value);\n};\n\n/**\n * optional bytes receiver_address = 15;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.UnfreezeBalanceContract.prototype.getReceiverAddress = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 15, ''));\n};\n\n/**\n * optional bytes receiver_address = 15;\n * This is a type-conversion wrapper around `getReceiverAddress()`\n * @return {string}\n */\nTronWebProto.UnfreezeBalanceContract.prototype.getReceiverAddress_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getReceiverAddress()));\n};\n\n/**\n * optional bytes receiver_address = 15;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getReceiverAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.UnfreezeBalanceContract.prototype.getReceiverAddress_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getReceiverAddress()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.UnfreezeBalanceContract} returns this\n */\nTronWebProto.UnfreezeBalanceContract.prototype.setReceiverAddress = function (value) {\n    return jspb.Message.setProto3BytesField(this, 15, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n    /**\n     * Creates an object representation of this proto.\n     * Field names that are reserved in JavaScript and will be renamed to pb_name.\n     * Optional fields that are not set will be set to undefined.\n     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n     * For the list of reserved names please see:\n     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n     * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n     *     JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @return {!Object}\n     */\n    TronWebProto.WithdrawBalanceContract.prototype.toObject = function (opt_includeInstance) {\n        return TronWebProto.WithdrawBalanceContract.toObject(opt_includeInstance, this);\n    };\n\n    /**\n     * Static version of the {@see toObject} method.\n     * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n     *     the JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @param {!TronWebProto.WithdrawBalanceContract} msg The msg instance to transform.\n     * @return {!Object}\n     * @suppress {unusedLocalVariables} f is only used for nested messages\n     */\n    TronWebProto.WithdrawBalanceContract.toObject = function (includeInstance, msg) {\n        var f,\n            obj = {\n                ownerAddress: msg.getOwnerAddress_asB64(),\n            };\n\n        if (includeInstance) {\n            obj.$jspbMessageInstance = msg;\n        }\n        return obj;\n    };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.WithdrawBalanceContract}\n */\nTronWebProto.WithdrawBalanceContract.deserializeBinary = function (bytes) {\n    var reader = new jspb.BinaryReader(bytes);\n    var msg = new TronWebProto.WithdrawBalanceContract();\n    return TronWebProto.WithdrawBalanceContract.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.WithdrawBalanceContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.WithdrawBalanceContract}\n */\nTronWebProto.WithdrawBalanceContract.deserializeBinaryFromReader = function (msg, reader) {\n    while (reader.nextField()) {\n        if (reader.isEndGroup()) {\n            break;\n        }\n        var field = reader.getFieldNumber();\n        switch (field) {\n            case 1:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setOwnerAddress(value);\n                break;\n            default:\n                reader.skipField();\n                break;\n        }\n    }\n    return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.WithdrawBalanceContract.prototype.serializeBinary = function () {\n    var writer = new jspb.BinaryWriter();\n    TronWebProto.WithdrawBalanceContract.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.WithdrawBalanceContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.WithdrawBalanceContract.serializeBinaryToWriter = function (message, writer) {\n    var f = undefined;\n    f = message.getOwnerAddress_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(1, f);\n    }\n};\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.WithdrawBalanceContract.prototype.getOwnerAddress = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));\n};\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.WithdrawBalanceContract.prototype.getOwnerAddress_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getOwnerAddress()));\n};\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.WithdrawBalanceContract.prototype.getOwnerAddress_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getOwnerAddress()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.WithdrawBalanceContract} returns this\n */\nTronWebProto.WithdrawBalanceContract.prototype.setOwnerAddress = function (value) {\n    return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n    /**\n     * Creates an object representation of this proto.\n     * Field names that are reserved in JavaScript and will be renamed to pb_name.\n     * Optional fields that are not set will be set to undefined.\n     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n     * For the list of reserved names please see:\n     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n     * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n     *     JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @return {!Object}\n     */\n    TronWebProto.TransferContract.prototype.toObject = function (opt_includeInstance) {\n        return TronWebProto.TransferContract.toObject(opt_includeInstance, this);\n    };\n\n    /**\n     * Static version of the {@see toObject} method.\n     * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n     *     the JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @param {!TronWebProto.TransferContract} msg The msg instance to transform.\n     * @return {!Object}\n     * @suppress {unusedLocalVariables} f is only used for nested messages\n     */\n    TronWebProto.TransferContract.toObject = function (includeInstance, msg) {\n        var f,\n            obj = {\n                ownerAddress: msg.getOwnerAddress_asB64(),\n                toAddress: msg.getToAddress_asB64(),\n                amount: jspb.Message.getFieldWithDefault(msg, 3, 0),\n            };\n\n        if (includeInstance) {\n            obj.$jspbMessageInstance = msg;\n        }\n        return obj;\n    };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.TransferContract}\n */\nTronWebProto.TransferContract.deserializeBinary = function (bytes) {\n    var reader = new jspb.BinaryReader(bytes);\n    var msg = new TronWebProto.TransferContract();\n    return TronWebProto.TransferContract.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.TransferContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.TransferContract}\n */\nTronWebProto.TransferContract.deserializeBinaryFromReader = function (msg, reader) {\n    while (reader.nextField()) {\n        if (reader.isEndGroup()) {\n            break;\n        }\n        var field = reader.getFieldNumber();\n        switch (field) {\n            case 1:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setOwnerAddress(value);\n                break;\n            case 2:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setToAddress(value);\n                break;\n            case 3:\n                var value = /** @type {number} */ (reader.readInt64());\n                msg.setAmount(value);\n                break;\n            default:\n                reader.skipField();\n                break;\n        }\n    }\n    return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.TransferContract.prototype.serializeBinary = function () {\n    var writer = new jspb.BinaryWriter();\n    TronWebProto.TransferContract.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.TransferContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.TransferContract.serializeBinaryToWriter = function (message, writer) {\n    var f = undefined;\n    f = message.getOwnerAddress_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(1, f);\n    }\n    f = message.getToAddress_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(2, f);\n    }\n    f = message.getAmount();\n    if (f !== 0) {\n        writer.writeInt64(3, f);\n    }\n};\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.TransferContract.prototype.getOwnerAddress = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));\n};\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.TransferContract.prototype.getOwnerAddress_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getOwnerAddress()));\n};\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.TransferContract.prototype.getOwnerAddress_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getOwnerAddress()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.TransferContract} returns this\n */\nTronWebProto.TransferContract.prototype.setOwnerAddress = function (value) {\n    return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n/**\n * optional bytes to_address = 2;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.TransferContract.prototype.getToAddress = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ''));\n};\n\n/**\n * optional bytes to_address = 2;\n * This is a type-conversion wrapper around `getToAddress()`\n * @return {string}\n */\nTronWebProto.TransferContract.prototype.getToAddress_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getToAddress()));\n};\n\n/**\n * optional bytes to_address = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getToAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.TransferContract.prototype.getToAddress_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getToAddress()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.TransferContract} returns this\n */\nTronWebProto.TransferContract.prototype.setToAddress = function (value) {\n    return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n/**\n * optional int64 amount = 3;\n * @return {number}\n */\nTronWebProto.TransferContract.prototype.getAmount = function () {\n    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n/**\n * @param {number} value\n * @return {!TronWebProto.TransferContract} returns this\n */\nTronWebProto.TransferContract.prototype.setAmount = function (value) {\n    return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nTronWebProto.TransactionBalanceTrace.repeatedFields_ = [2];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n    /**\n     * Creates an object representation of this proto.\n     * Field names that are reserved in JavaScript and will be renamed to pb_name.\n     * Optional fields that are not set will be set to undefined.\n     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n     * For the list of reserved names please see:\n     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n     * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n     *     JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @return {!Object}\n     */\n    TronWebProto.TransactionBalanceTrace.prototype.toObject = function (opt_includeInstance) {\n        return TronWebProto.TransactionBalanceTrace.toObject(opt_includeInstance, this);\n    };\n\n    /**\n     * Static version of the {@see toObject} method.\n     * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n     *     the JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @param {!TronWebProto.TransactionBalanceTrace} msg The msg instance to transform.\n     * @return {!Object}\n     * @suppress {unusedLocalVariables} f is only used for nested messages\n     */\n    TronWebProto.TransactionBalanceTrace.toObject = function (includeInstance, msg) {\n        var f,\n            obj = {\n                transactionIdentifier: msg.getTransactionIdentifier_asB64(),\n                operationList: jspb.Message.toObjectList(\n                    msg.getOperationList(),\n                    TronWebProto.TransactionBalanceTrace.Operation.toObject,\n                    includeInstance\n                ),\n                type: jspb.Message.getFieldWithDefault(msg, 3, ''),\n                status: jspb.Message.getFieldWithDefault(msg, 4, ''),\n            };\n\n        if (includeInstance) {\n            obj.$jspbMessageInstance = msg;\n        }\n        return obj;\n    };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.TransactionBalanceTrace}\n */\nTronWebProto.TransactionBalanceTrace.deserializeBinary = function (bytes) {\n    var reader = new jspb.BinaryReader(bytes);\n    var msg = new TronWebProto.TransactionBalanceTrace();\n    return TronWebProto.TransactionBalanceTrace.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.TransactionBalanceTrace} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.TransactionBalanceTrace}\n */\nTronWebProto.TransactionBalanceTrace.deserializeBinaryFromReader = function (msg, reader) {\n    while (reader.nextField()) {\n        if (reader.isEndGroup()) {\n            break;\n        }\n        var field = reader.getFieldNumber();\n        switch (field) {\n            case 1:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setTransactionIdentifier(value);\n                break;\n            case 2:\n                var value = new TronWebProto.TransactionBalanceTrace.Operation();\n                reader.readMessage(value, TronWebProto.TransactionBalanceTrace.Operation.deserializeBinaryFromReader);\n                msg.addOperation(value);\n                break;\n            case 3:\n                var value = /** @type {string} */ (reader.readString());\n                msg.setType(value);\n                break;\n            case 4:\n                var value = /** @type {string} */ (reader.readString());\n                msg.setStatus(value);\n                break;\n            default:\n                reader.skipField();\n                break;\n        }\n    }\n    return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.TransactionBalanceTrace.prototype.serializeBinary = function () {\n    var writer = new jspb.BinaryWriter();\n    TronWebProto.TransactionBalanceTrace.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.TransactionBalanceTrace} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.TransactionBalanceTrace.serializeBinaryToWriter = function (message, writer) {\n    var f = undefined;\n    f = message.getTransactionIdentifier_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(1, f);\n    }\n    f = message.getOperationList();\n    if (f.length > 0) {\n        writer.writeRepeatedMessage(2, f, TronWebProto.TransactionBalanceTrace.Operation.serializeBinaryToWriter);\n    }\n    f = message.getType();\n    if (f.length > 0) {\n        writer.writeString(3, f);\n    }\n    f = message.getStatus();\n    if (f.length > 0) {\n        writer.writeString(4, f);\n    }\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n    /**\n     * Creates an object representation of this proto.\n     * Field names that are reserved in JavaScript and will be renamed to pb_name.\n     * Optional fields that are not set will be set to undefined.\n     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n     * For the list of reserved names please see:\n     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n     * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n     *     JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @return {!Object}\n     */\n    TronWebProto.TransactionBalanceTrace.Operation.prototype.toObject = function (opt_includeInstance) {\n        return TronWebProto.TransactionBalanceTrace.Operation.toObject(opt_includeInstance, this);\n    };\n\n    /**\n     * Static version of the {@see toObject} method.\n     * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n     *     the JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @param {!TronWebProto.TransactionBalanceTrace.Operation} msg The msg instance to transform.\n     * @return {!Object}\n     * @suppress {unusedLocalVariables} f is only used for nested messages\n     */\n    TronWebProto.TransactionBalanceTrace.Operation.toObject = function (includeInstance, msg) {\n        var f,\n            obj = {\n                operationIdentifier: jspb.Message.getFieldWithDefault(msg, 1, 0),\n                address: msg.getAddress_asB64(),\n                amount: jspb.Message.getFieldWithDefault(msg, 3, 0),\n            };\n\n        if (includeInstance) {\n            obj.$jspbMessageInstance = msg;\n        }\n        return obj;\n    };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.TransactionBalanceTrace.Operation}\n */\nTronWebProto.TransactionBalanceTrace.Operation.deserializeBinary = function (bytes) {\n    var reader = new jspb.BinaryReader(bytes);\n    var msg = new TronWebProto.TransactionBalanceTrace.Operation();\n    return TronWebProto.TransactionBalanceTrace.Operation.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.TransactionBalanceTrace.Operation} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.TransactionBalanceTrace.Operation}\n */\nTronWebProto.TransactionBalanceTrace.Operation.deserializeBinaryFromReader = function (msg, reader) {\n    while (reader.nextField()) {\n        if (reader.isEndGroup()) {\n            break;\n        }\n        var field = reader.getFieldNumber();\n        switch (field) {\n            case 1:\n                var value = /** @type {number} */ (reader.readInt64());\n                msg.setOperationIdentifier(value);\n                break;\n            case 2:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setAddress(value);\n                break;\n            case 3:\n                var value = /** @type {number} */ (reader.readInt64());\n                msg.setAmount(value);\n                break;\n            default:\n                reader.skipField();\n                break;\n        }\n    }\n    return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.TransactionBalanceTrace.Operation.prototype.serializeBinary = function () {\n    var writer = new jspb.BinaryWriter();\n    TronWebProto.TransactionBalanceTrace.Operation.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.TransactionBalanceTrace.Operation} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.TransactionBalanceTrace.Operation.serializeBinaryToWriter = function (message, writer) {\n    var f = undefined;\n    f = message.getOperationIdentifier();\n    if (f !== 0) {\n        writer.writeInt64(1, f);\n    }\n    f = message.getAddress_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(2, f);\n    }\n    f = message.getAmount();\n    if (f !== 0) {\n        writer.writeInt64(3, f);\n    }\n};\n\n/**\n * optional int64 operation_identifier = 1;\n * @return {number}\n */\nTronWebProto.TransactionBalanceTrace.Operation.prototype.getOperationIdentifier = function () {\n    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n/**\n * @param {number} value\n * @return {!TronWebProto.TransactionBalanceTrace.Operation} returns this\n */\nTronWebProto.TransactionBalanceTrace.Operation.prototype.setOperationIdentifier = function (value) {\n    return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n/**\n * optional bytes address = 2;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.TransactionBalanceTrace.Operation.prototype.getAddress = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ''));\n};\n\n/**\n * optional bytes address = 2;\n * This is a type-conversion wrapper around `getAddress()`\n * @return {string}\n */\nTronWebProto.TransactionBalanceTrace.Operation.prototype.getAddress_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getAddress()));\n};\n\n/**\n * optional bytes address = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.TransactionBalanceTrace.Operation.prototype.getAddress_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getAddress()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.TransactionBalanceTrace.Operation} returns this\n */\nTronWebProto.TransactionBalanceTrace.Operation.prototype.setAddress = function (value) {\n    return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n/**\n * optional int64 amount = 3;\n * @return {number}\n */\nTronWebProto.TransactionBalanceTrace.Operation.prototype.getAmount = function () {\n    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n/**\n * @param {number} value\n * @return {!TronWebProto.TransactionBalanceTrace.Operation} returns this\n */\nTronWebProto.TransactionBalanceTrace.Operation.prototype.setAmount = function (value) {\n    return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n/**\n * optional bytes transaction_identifier = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.TransactionBalanceTrace.prototype.getTransactionIdentifier = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));\n};\n\n/**\n * optional bytes transaction_identifier = 1;\n * This is a type-conversion wrapper around `getTransactionIdentifier()`\n * @return {string}\n */\nTronWebProto.TransactionBalanceTrace.prototype.getTransactionIdentifier_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getTransactionIdentifier()));\n};\n\n/**\n * optional bytes transaction_identifier = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getTransactionIdentifier()`\n * @return {!Uint8Array}\n */\nTronWebProto.TransactionBalanceTrace.prototype.getTransactionIdentifier_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getTransactionIdentifier()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.TransactionBalanceTrace} returns this\n */\nTronWebProto.TransactionBalanceTrace.prototype.setTransactionIdentifier = function (value) {\n    return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n/**\n * repeated Operation operation = 2;\n * @return {!Array<!TronWebProto.TransactionBalanceTrace.Operation>}\n */\nTronWebProto.TransactionBalanceTrace.prototype.getOperationList = function () {\n    return /** @type{!Array<!TronWebProto.TransactionBalanceTrace.Operation>} */ (\n        jspb.Message.getRepeatedWrapperField(this, TronWebProto.TransactionBalanceTrace.Operation, 2)\n    );\n};\n\n/**\n * @param {!Array<!TronWebProto.TransactionBalanceTrace.Operation>} value\n * @return {!TronWebProto.TransactionBalanceTrace} returns this\n */\nTronWebProto.TransactionBalanceTrace.prototype.setOperationList = function (value) {\n    return jspb.Message.setRepeatedWrapperField(this, 2, value);\n};\n\n/**\n * @param {!TronWebProto.TransactionBalanceTrace.Operation=} opt_value\n * @param {number=} opt_index\n * @return {!TronWebProto.TransactionBalanceTrace.Operation}\n */\nTronWebProto.TransactionBalanceTrace.prototype.addOperation = function (opt_value, opt_index) {\n    return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, TronWebProto.TransactionBalanceTrace.Operation, opt_index);\n};\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!TronWebProto.TransactionBalanceTrace} returns this\n */\nTronWebProto.TransactionBalanceTrace.prototype.clearOperationList = function () {\n    return this.setOperationList([]);\n};\n\n/**\n * optional string type = 3;\n * @return {string}\n */\nTronWebProto.TransactionBalanceTrace.prototype.getType = function () {\n    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));\n};\n\n/**\n * @param {string} value\n * @return {!TronWebProto.TransactionBalanceTrace} returns this\n */\nTronWebProto.TransactionBalanceTrace.prototype.setType = function (value) {\n    return jspb.Message.setProto3StringField(this, 3, value);\n};\n\n/**\n * optional string status = 4;\n * @return {string}\n */\nTronWebProto.TransactionBalanceTrace.prototype.getStatus = function () {\n    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));\n};\n\n/**\n * @param {string} value\n * @return {!TronWebProto.TransactionBalanceTrace} returns this\n */\nTronWebProto.TransactionBalanceTrace.prototype.setStatus = function (value) {\n    return jspb.Message.setProto3StringField(this, 4, value);\n};\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nTronWebProto.BlockBalanceTrace.repeatedFields_ = [3];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n    /**\n     * Creates an object representation of this proto.\n     * Field names that are reserved in JavaScript and will be renamed to pb_name.\n     * Optional fields that are not set will be set to undefined.\n     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n     * For the list of reserved names please see:\n     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n     * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n     *     JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @return {!Object}\n     */\n    TronWebProto.BlockBalanceTrace.prototype.toObject = function (opt_includeInstance) {\n        return TronWebProto.BlockBalanceTrace.toObject(opt_includeInstance, this);\n    };\n\n    /**\n     * Static version of the {@see toObject} method.\n     * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n     *     the JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @param {!TronWebProto.BlockBalanceTrace} msg The msg instance to transform.\n     * @return {!Object}\n     * @suppress {unusedLocalVariables} f is only used for nested messages\n     */\n    TronWebProto.BlockBalanceTrace.toObject = function (includeInstance, msg) {\n        var f,\n            obj = {\n                blockIdentifier:\n                    (f = msg.getBlockIdentifier()) && TronWebProto.BlockBalanceTrace.BlockIdentifier.toObject(includeInstance, f),\n                timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),\n                transactionBalanceTraceList: jspb.Message.toObjectList(\n                    msg.getTransactionBalanceTraceList(),\n                    TronWebProto.TransactionBalanceTrace.toObject,\n                    includeInstance\n                ),\n            };\n\n        if (includeInstance) {\n            obj.$jspbMessageInstance = msg;\n        }\n        return obj;\n    };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.BlockBalanceTrace}\n */\nTronWebProto.BlockBalanceTrace.deserializeBinary = function (bytes) {\n    var reader = new jspb.BinaryReader(bytes);\n    var msg = new TronWebProto.BlockBalanceTrace();\n    return TronWebProto.BlockBalanceTrace.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.BlockBalanceTrace} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.BlockBalanceTrace}\n */\nTronWebProto.BlockBalanceTrace.deserializeBinaryFromReader = function (msg, reader) {\n    while (reader.nextField()) {\n        if (reader.isEndGroup()) {\n            break;\n        }\n        var field = reader.getFieldNumber();\n        switch (field) {\n            case 1:\n                var value = new TronWebProto.BlockBalanceTrace.BlockIdentifier();\n                reader.readMessage(value, TronWebProto.BlockBalanceTrace.BlockIdentifier.deserializeBinaryFromReader);\n                msg.setBlockIdentifier(value);\n                break;\n            case 2:\n                var value = /** @type {number} */ (reader.readInt64());\n                msg.setTimestamp(value);\n                break;\n            case 3:\n                var value = new TronWebProto.TransactionBalanceTrace();\n                reader.readMessage(value, TronWebProto.TransactionBalanceTrace.deserializeBinaryFromReader);\n                msg.addTransactionBalanceTrace(value);\n                break;\n            default:\n                reader.skipField();\n                break;\n        }\n    }\n    return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.BlockBalanceTrace.prototype.serializeBinary = function () {\n    var writer = new jspb.BinaryWriter();\n    TronWebProto.BlockBalanceTrace.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.BlockBalanceTrace} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.BlockBalanceTrace.serializeBinaryToWriter = function (message, writer) {\n    var f = undefined;\n    f = message.getBlockIdentifier();\n    if (f != null) {\n        writer.writeMessage(1, f, TronWebProto.BlockBalanceTrace.BlockIdentifier.serializeBinaryToWriter);\n    }\n    f = message.getTimestamp();\n    if (f !== 0) {\n        writer.writeInt64(2, f);\n    }\n    f = message.getTransactionBalanceTraceList();\n    if (f.length > 0) {\n        writer.writeRepeatedMessage(3, f, TronWebProto.TransactionBalanceTrace.serializeBinaryToWriter);\n    }\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n    /**\n     * Creates an object representation of this proto.\n     * Field names that are reserved in JavaScript and will be renamed to pb_name.\n     * Optional fields that are not set will be set to undefined.\n     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n     * For the list of reserved names please see:\n     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n     * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n     *     JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @return {!Object}\n     */\n    TronWebProto.BlockBalanceTrace.BlockIdentifier.prototype.toObject = function (opt_includeInstance) {\n        return TronWebProto.BlockBalanceTrace.BlockIdentifier.toObject(opt_includeInstance, this);\n    };\n\n    /**\n     * Static version of the {@see toObject} method.\n     * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n     *     the JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @param {!TronWebProto.BlockBalanceTrace.BlockIdentifier} msg The msg instance to transform.\n     * @return {!Object}\n     * @suppress {unusedLocalVariables} f is only used for nested messages\n     */\n    TronWebProto.BlockBalanceTrace.BlockIdentifier.toObject = function (includeInstance, msg) {\n        var f,\n            obj = {\n                hash: msg.getHash_asB64(),\n                number: jspb.Message.getFieldWithDefault(msg, 2, 0),\n            };\n\n        if (includeInstance) {\n            obj.$jspbMessageInstance = msg;\n        }\n        return obj;\n    };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.BlockBalanceTrace.BlockIdentifier}\n */\nTronWebProto.BlockBalanceTrace.BlockIdentifier.deserializeBinary = function (bytes) {\n    var reader = new jspb.BinaryReader(bytes);\n    var msg = new TronWebProto.BlockBalanceTrace.BlockIdentifier();\n    return TronWebProto.BlockBalanceTrace.BlockIdentifier.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.BlockBalanceTrace.BlockIdentifier} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.BlockBalanceTrace.BlockIdentifier}\n */\nTronWebProto.BlockBalanceTrace.BlockIdentifier.deserializeBinaryFromReader = function (msg, reader) {\n    while (reader.nextField()) {\n        if (reader.isEndGroup()) {\n            break;\n        }\n        var field = reader.getFieldNumber();\n        switch (field) {\n            case 1:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setHash(value);\n                break;\n            case 2:\n                var value = /** @type {number} */ (reader.readInt64());\n                msg.setNumber(value);\n                break;\n            default:\n                reader.skipField();\n                break;\n        }\n    }\n    return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.BlockBalanceTrace.BlockIdentifier.prototype.serializeBinary = function () {\n    var writer = new jspb.BinaryWriter();\n    TronWebProto.BlockBalanceTrace.BlockIdentifier.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.BlockBalanceTrace.BlockIdentifier} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.BlockBalanceTrace.BlockIdentifier.serializeBinaryToWriter = function (message, writer) {\n    var f = undefined;\n    f = message.getHash_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(1, f);\n    }\n    f = message.getNumber();\n    if (f !== 0) {\n        writer.writeInt64(2, f);\n    }\n};\n\n/**\n * optional bytes hash = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.BlockBalanceTrace.BlockIdentifier.prototype.getHash = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));\n};\n\n/**\n * optional bytes hash = 1;\n * This is a type-conversion wrapper around `getHash()`\n * @return {string}\n */\nTronWebProto.BlockBalanceTrace.BlockIdentifier.prototype.getHash_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getHash()));\n};\n\n/**\n * optional bytes hash = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getHash()`\n * @return {!Uint8Array}\n */\nTronWebProto.BlockBalanceTrace.BlockIdentifier.prototype.getHash_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getHash()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.BlockBalanceTrace.BlockIdentifier} returns this\n */\nTronWebProto.BlockBalanceTrace.BlockIdentifier.prototype.setHash = function (value) {\n    return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n/**\n * optional int64 number = 2;\n * @return {number}\n */\nTronWebProto.BlockBalanceTrace.BlockIdentifier.prototype.getNumber = function () {\n    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n/**\n * @param {number} value\n * @return {!TronWebProto.BlockBalanceTrace.BlockIdentifier} returns this\n */\nTronWebProto.BlockBalanceTrace.BlockIdentifier.prototype.setNumber = function (value) {\n    return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n/**\n * optional BlockIdentifier block_identifier = 1;\n * @return {?TronWebProto.BlockBalanceTrace.BlockIdentifier}\n */\nTronWebProto.BlockBalanceTrace.prototype.getBlockIdentifier = function () {\n    return /** @type{?TronWebProto.BlockBalanceTrace.BlockIdentifier} */ (\n        jspb.Message.getWrapperField(this, TronWebProto.BlockBalanceTrace.BlockIdentifier, 1)\n    );\n};\n\n/**\n * @param {?TronWebProto.BlockBalanceTrace.BlockIdentifier|undefined} value\n * @return {!TronWebProto.BlockBalanceTrace} returns this\n */\nTronWebProto.BlockBalanceTrace.prototype.setBlockIdentifier = function (value) {\n    return jspb.Message.setWrapperField(this, 1, value);\n};\n\n/**\n * Clears the message field making it undefined.\n * @return {!TronWebProto.BlockBalanceTrace} returns this\n */\nTronWebProto.BlockBalanceTrace.prototype.clearBlockIdentifier = function () {\n    return this.setBlockIdentifier(undefined);\n};\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nTronWebProto.BlockBalanceTrace.prototype.hasBlockIdentifier = function () {\n    return jspb.Message.getField(this, 1) != null;\n};\n\n/**\n * optional int64 timestamp = 2;\n * @return {number}\n */\nTronWebProto.BlockBalanceTrace.prototype.getTimestamp = function () {\n    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n/**\n * @param {number} value\n * @return {!TronWebProto.BlockBalanceTrace} returns this\n */\nTronWebProto.BlockBalanceTrace.prototype.setTimestamp = function (value) {\n    return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n/**\n * repeated TransactionBalanceTrace transaction_balance_trace = 3;\n * @return {!Array<!TronWebProto.TransactionBalanceTrace>}\n */\nTronWebProto.BlockBalanceTrace.prototype.getTransactionBalanceTraceList = function () {\n    return /** @type{!Array<!TronWebProto.TransactionBalanceTrace>} */ (\n        jspb.Message.getRepeatedWrapperField(this, TronWebProto.TransactionBalanceTrace, 3)\n    );\n};\n\n/**\n * @param {!Array<!TronWebProto.TransactionBalanceTrace>} value\n * @return {!TronWebProto.BlockBalanceTrace} returns this\n */\nTronWebProto.BlockBalanceTrace.prototype.setTransactionBalanceTraceList = function (value) {\n    return jspb.Message.setRepeatedWrapperField(this, 3, value);\n};\n\n/**\n * @param {!TronWebProto.TransactionBalanceTrace=} opt_value\n * @param {number=} opt_index\n * @return {!TronWebProto.TransactionBalanceTrace}\n */\nTronWebProto.BlockBalanceTrace.prototype.addTransactionBalanceTrace = function (opt_value, opt_index) {\n    return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, TronWebProto.TransactionBalanceTrace, opt_index);\n};\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!TronWebProto.BlockBalanceTrace} returns this\n */\nTronWebProto.BlockBalanceTrace.prototype.clearTransactionBalanceTraceList = function () {\n    return this.setTransactionBalanceTraceList([]);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n    /**\n     * Creates an object representation of this proto.\n     * Field names that are reserved in JavaScript and will be renamed to pb_name.\n     * Optional fields that are not set will be set to undefined.\n     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n     * For the list of reserved names please see:\n     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n     * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n     *     JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @return {!Object}\n     */\n    TronWebProto.AccountTrace.prototype.toObject = function (opt_includeInstance) {\n        return TronWebProto.AccountTrace.toObject(opt_includeInstance, this);\n    };\n\n    /**\n     * Static version of the {@see toObject} method.\n     * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n     *     the JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @param {!TronWebProto.AccountTrace} msg The msg instance to transform.\n     * @return {!Object}\n     * @suppress {unusedLocalVariables} f is only used for nested messages\n     */\n    TronWebProto.AccountTrace.toObject = function (includeInstance, msg) {\n        var f,\n            obj = {\n                balance: jspb.Message.getFieldWithDefault(msg, 1, 0),\n                placeholder: jspb.Message.getFieldWithDefault(msg, 99, 0),\n            };\n\n        if (includeInstance) {\n            obj.$jspbMessageInstance = msg;\n        }\n        return obj;\n    };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.AccountTrace}\n */\nTronWebProto.AccountTrace.deserializeBinary = function (bytes) {\n    var reader = new jspb.BinaryReader(bytes);\n    var msg = new TronWebProto.AccountTrace();\n    return TronWebProto.AccountTrace.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.AccountTrace} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.AccountTrace}\n */\nTronWebProto.AccountTrace.deserializeBinaryFromReader = function (msg, reader) {\n    while (reader.nextField()) {\n        if (reader.isEndGroup()) {\n            break;\n        }\n        var field = reader.getFieldNumber();\n        switch (field) {\n            case 1:\n                var value = /** @type {number} */ (reader.readInt64());\n                msg.setBalance(value);\n                break;\n            case 99:\n                var value = /** @type {number} */ (reader.readInt64());\n                msg.setPlaceholder(value);\n                break;\n            default:\n                reader.skipField();\n                break;\n        }\n    }\n    return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.AccountTrace.prototype.serializeBinary = function () {\n    var writer = new jspb.BinaryWriter();\n    TronWebProto.AccountTrace.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.AccountTrace} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.AccountTrace.serializeBinaryToWriter = function (message, writer) {\n    var f = undefined;\n    f = message.getBalance();\n    if (f !== 0) {\n        writer.writeInt64(1, f);\n    }\n    f = message.getPlaceholder();\n    if (f !== 0) {\n        writer.writeInt64(99, f);\n    }\n};\n\n/**\n * optional int64 balance = 1;\n * @return {number}\n */\nTronWebProto.AccountTrace.prototype.getBalance = function () {\n    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n/**\n * @param {number} value\n * @return {!TronWebProto.AccountTrace} returns this\n */\nTronWebProto.AccountTrace.prototype.setBalance = function (value) {\n    return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n/**\n * optional int64 placeholder = 99;\n * @return {number}\n */\nTronWebProto.AccountTrace.prototype.getPlaceholder = function () {\n    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 99, 0));\n};\n\n/**\n * @param {number} value\n * @return {!TronWebProto.AccountTrace} returns this\n */\nTronWebProto.AccountTrace.prototype.setPlaceholder = function (value) {\n    return jspb.Message.setProto3IntField(this, 99, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n    /**\n     * Creates an object representation of this proto.\n     * Field names that are reserved in JavaScript and will be renamed to pb_name.\n     * Optional fields that are not set will be set to undefined.\n     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n     * For the list of reserved names please see:\n     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n     * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n     *     JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @return {!Object}\n     */\n    TronWebProto.AccountIdentifier.prototype.toObject = function (opt_includeInstance) {\n        return TronWebProto.AccountIdentifier.toObject(opt_includeInstance, this);\n    };\n\n    /**\n     * Static version of the {@see toObject} method.\n     * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n     *     the JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @param {!TronWebProto.AccountIdentifier} msg The msg instance to transform.\n     * @return {!Object}\n     * @suppress {unusedLocalVariables} f is only used for nested messages\n     */\n    TronWebProto.AccountIdentifier.toObject = function (includeInstance, msg) {\n        var f,\n            obj = {\n                address: msg.getAddress_asB64(),\n            };\n\n        if (includeInstance) {\n            obj.$jspbMessageInstance = msg;\n        }\n        return obj;\n    };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.AccountIdentifier}\n */\nTronWebProto.AccountIdentifier.deserializeBinary = function (bytes) {\n    var reader = new jspb.BinaryReader(bytes);\n    var msg = new TronWebProto.AccountIdentifier();\n    return TronWebProto.AccountIdentifier.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.AccountIdentifier} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.AccountIdentifier}\n */\nTronWebProto.AccountIdentifier.deserializeBinaryFromReader = function (msg, reader) {\n    while (reader.nextField()) {\n        if (reader.isEndGroup()) {\n            break;\n        }\n        var field = reader.getFieldNumber();\n        switch (field) {\n            case 1:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setAddress(value);\n                break;\n            default:\n                reader.skipField();\n                break;\n        }\n    }\n    return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.AccountIdentifier.prototype.serializeBinary = function () {\n    var writer = new jspb.BinaryWriter();\n    TronWebProto.AccountIdentifier.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.AccountIdentifier} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.AccountIdentifier.serializeBinaryToWriter = function (message, writer) {\n    var f = undefined;\n    f = message.getAddress_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(1, f);\n    }\n};\n\n/**\n * optional bytes address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.AccountIdentifier.prototype.getAddress = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));\n};\n\n/**\n * optional bytes address = 1;\n * This is a type-conversion wrapper around `getAddress()`\n * @return {string}\n */\nTronWebProto.AccountIdentifier.prototype.getAddress_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getAddress()));\n};\n\n/**\n * optional bytes address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.AccountIdentifier.prototype.getAddress_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getAddress()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.AccountIdentifier} returns this\n */\nTronWebProto.AccountIdentifier.prototype.setAddress = function (value) {\n    return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n    /**\n     * Creates an object representation of this proto.\n     * Field names that are reserved in JavaScript and will be renamed to pb_name.\n     * Optional fields that are not set will be set to undefined.\n     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n     * For the list of reserved names please see:\n     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n     * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n     *     JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @return {!Object}\n     */\n    TronWebProto.AccountBalanceRequest.prototype.toObject = function (opt_includeInstance) {\n        return TronWebProto.AccountBalanceRequest.toObject(opt_includeInstance, this);\n    };\n\n    /**\n     * Static version of the {@see toObject} method.\n     * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n     *     the JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @param {!TronWebProto.AccountBalanceRequest} msg The msg instance to transform.\n     * @return {!Object}\n     * @suppress {unusedLocalVariables} f is only used for nested messages\n     */\n    TronWebProto.AccountBalanceRequest.toObject = function (includeInstance, msg) {\n        var f,\n            obj = {\n                accountIdentifier:\n                    (f = msg.getAccountIdentifier()) && TronWebProto.AccountIdentifier.toObject(includeInstance, f),\n                blockIdentifier:\n                    (f = msg.getBlockIdentifier()) && TronWebProto.BlockBalanceTrace.BlockIdentifier.toObject(includeInstance, f),\n            };\n\n        if (includeInstance) {\n            obj.$jspbMessageInstance = msg;\n        }\n        return obj;\n    };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.AccountBalanceRequest}\n */\nTronWebProto.AccountBalanceRequest.deserializeBinary = function (bytes) {\n    var reader = new jspb.BinaryReader(bytes);\n    var msg = new TronWebProto.AccountBalanceRequest();\n    return TronWebProto.AccountBalanceRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.AccountBalanceRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.AccountBalanceRequest}\n */\nTronWebProto.AccountBalanceRequest.deserializeBinaryFromReader = function (msg, reader) {\n    while (reader.nextField()) {\n        if (reader.isEndGroup()) {\n            break;\n        }\n        var field = reader.getFieldNumber();\n        switch (field) {\n            case 1:\n                var value = new TronWebProto.AccountIdentifier();\n                reader.readMessage(value, TronWebProto.AccountIdentifier.deserializeBinaryFromReader);\n                msg.setAccountIdentifier(value);\n                break;\n            case 2:\n                var value = new TronWebProto.BlockBalanceTrace.BlockIdentifier();\n                reader.readMessage(value, TronWebProto.BlockBalanceTrace.BlockIdentifier.deserializeBinaryFromReader);\n                msg.setBlockIdentifier(value);\n                break;\n            default:\n                reader.skipField();\n                break;\n        }\n    }\n    return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.AccountBalanceRequest.prototype.serializeBinary = function () {\n    var writer = new jspb.BinaryWriter();\n    TronWebProto.AccountBalanceRequest.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.AccountBalanceRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.AccountBalanceRequest.serializeBinaryToWriter = function (message, writer) {\n    var f = undefined;\n    f = message.getAccountIdentifier();\n    if (f != null) {\n        writer.writeMessage(1, f, TronWebProto.AccountIdentifier.serializeBinaryToWriter);\n    }\n    f = message.getBlockIdentifier();\n    if (f != null) {\n        writer.writeMessage(2, f, TronWebProto.BlockBalanceTrace.BlockIdentifier.serializeBinaryToWriter);\n    }\n};\n\n/**\n * optional AccountIdentifier account_identifier = 1;\n * @return {?TronWebProto.AccountIdentifier}\n */\nTronWebProto.AccountBalanceRequest.prototype.getAccountIdentifier = function () {\n    return /** @type{?TronWebProto.AccountIdentifier} */ (jspb.Message.getWrapperField(this, TronWebProto.AccountIdentifier, 1));\n};\n\n/**\n * @param {?TronWebProto.AccountIdentifier|undefined} value\n * @return {!TronWebProto.AccountBalanceRequest} returns this\n */\nTronWebProto.AccountBalanceRequest.prototype.setAccountIdentifier = function (value) {\n    return jspb.Message.setWrapperField(this, 1, value);\n};\n\n/**\n * Clears the message field making it undefined.\n * @return {!TronWebProto.AccountBalanceRequest} returns this\n */\nTronWebProto.AccountBalanceRequest.prototype.clearAccountIdentifier = function () {\n    return this.setAccountIdentifier(undefined);\n};\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nTronWebProto.AccountBalanceRequest.prototype.hasAccountIdentifier = function () {\n    return jspb.Message.getField(this, 1) != null;\n};\n\n/**\n * optional BlockBalanceTrace.BlockIdentifier block_identifier = 2;\n * @return {?TronWebProto.BlockBalanceTrace.BlockIdentifier}\n */\nTronWebProto.AccountBalanceRequest.prototype.getBlockIdentifier = function () {\n    return /** @type{?TronWebProto.BlockBalanceTrace.BlockIdentifier} */ (\n        jspb.Message.getWrapperField(this, TronWebProto.BlockBalanceTrace.BlockIdentifier, 2)\n    );\n};\n\n/**\n * @param {?TronWebProto.BlockBalanceTrace.BlockIdentifier|undefined} value\n * @return {!TronWebProto.AccountBalanceRequest} returns this\n */\nTronWebProto.AccountBalanceRequest.prototype.setBlockIdentifier = function (value) {\n    return jspb.Message.setWrapperField(this, 2, value);\n};\n\n/**\n * Clears the message field making it undefined.\n * @return {!TronWebProto.AccountBalanceRequest} returns this\n */\nTronWebProto.AccountBalanceRequest.prototype.clearBlockIdentifier = function () {\n    return this.setBlockIdentifier(undefined);\n};\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nTronWebProto.AccountBalanceRequest.prototype.hasBlockIdentifier = function () {\n    return jspb.Message.getField(this, 2) != null;\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n    /**\n     * Creates an object representation of this proto.\n     * Field names that are reserved in JavaScript and will be renamed to pb_name.\n     * Optional fields that are not set will be set to undefined.\n     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n     * For the list of reserved names please see:\n     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n     * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n     *     JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @return {!Object}\n     */\n    TronWebProto.AccountBalanceResponse.prototype.toObject = function (opt_includeInstance) {\n        return TronWebProto.AccountBalanceResponse.toObject(opt_includeInstance, this);\n    };\n\n    /**\n     * Static version of the {@see toObject} method.\n     * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n     *     the JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @param {!TronWebProto.AccountBalanceResponse} msg The msg instance to transform.\n     * @return {!Object}\n     * @suppress {unusedLocalVariables} f is only used for nested messages\n     */\n    TronWebProto.AccountBalanceResponse.toObject = function (includeInstance, msg) {\n        var f,\n            obj = {\n                balance: jspb.Message.getFieldWithDefault(msg, 1, 0),\n                blockIdentifier:\n                    (f = msg.getBlockIdentifier()) && TronWebProto.BlockBalanceTrace.BlockIdentifier.toObject(includeInstance, f),\n            };\n\n        if (includeInstance) {\n            obj.$jspbMessageInstance = msg;\n        }\n        return obj;\n    };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.AccountBalanceResponse}\n */\nTronWebProto.AccountBalanceResponse.deserializeBinary = function (bytes) {\n    var reader = new jspb.BinaryReader(bytes);\n    var msg = new TronWebProto.AccountBalanceResponse();\n    return TronWebProto.AccountBalanceResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.AccountBalanceResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.AccountBalanceResponse}\n */\nTronWebProto.AccountBalanceResponse.deserializeBinaryFromReader = function (msg, reader) {\n    while (reader.nextField()) {\n        if (reader.isEndGroup()) {\n            break;\n        }\n        var field = reader.getFieldNumber();\n        switch (field) {\n            case 1:\n                var value = /** @type {number} */ (reader.readInt64());\n                msg.setBalance(value);\n                break;\n            case 2:\n                var value = new TronWebProto.BlockBalanceTrace.BlockIdentifier();\n                reader.readMessage(value, TronWebProto.BlockBalanceTrace.BlockIdentifier.deserializeBinaryFromReader);\n                msg.setBlockIdentifier(value);\n                break;\n            default:\n                reader.skipField();\n                break;\n        }\n    }\n    return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.AccountBalanceResponse.prototype.serializeBinary = function () {\n    var writer = new jspb.BinaryWriter();\n    TronWebProto.AccountBalanceResponse.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.AccountBalanceResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.AccountBalanceResponse.serializeBinaryToWriter = function (message, writer) {\n    var f = undefined;\n    f = message.getBalance();\n    if (f !== 0) {\n        writer.writeInt64(1, f);\n    }\n    f = message.getBlockIdentifier();\n    if (f != null) {\n        writer.writeMessage(2, f, TronWebProto.BlockBalanceTrace.BlockIdentifier.serializeBinaryToWriter);\n    }\n};\n\n/**\n * optional int64 balance = 1;\n * @return {number}\n */\nTronWebProto.AccountBalanceResponse.prototype.getBalance = function () {\n    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n/**\n * @param {number} value\n * @return {!TronWebProto.AccountBalanceResponse} returns this\n */\nTronWebProto.AccountBalanceResponse.prototype.setBalance = function (value) {\n    return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n/**\n * optional BlockBalanceTrace.BlockIdentifier block_identifier = 2;\n * @return {?TronWebProto.BlockBalanceTrace.BlockIdentifier}\n */\nTronWebProto.AccountBalanceResponse.prototype.getBlockIdentifier = function () {\n    return /** @type{?TronWebProto.BlockBalanceTrace.BlockIdentifier} */ (\n        jspb.Message.getWrapperField(this, TronWebProto.BlockBalanceTrace.BlockIdentifier, 2)\n    );\n};\n\n/**\n * @param {?TronWebProto.BlockBalanceTrace.BlockIdentifier|undefined} value\n * @return {!TronWebProto.AccountBalanceResponse} returns this\n */\nTronWebProto.AccountBalanceResponse.prototype.setBlockIdentifier = function (value) {\n    return jspb.Message.setWrapperField(this, 2, value);\n};\n\n/**\n * Clears the message field making it undefined.\n * @return {!TronWebProto.AccountBalanceResponse} returns this\n */\nTronWebProto.AccountBalanceResponse.prototype.clearBlockIdentifier = function () {\n    return this.setBlockIdentifier(undefined);\n};\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nTronWebProto.AccountBalanceResponse.prototype.hasBlockIdentifier = function () {\n    return jspb.Message.getField(this, 2) != null;\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n    /**\n     * Creates an object representation of this proto.\n     * Field names that are reserved in JavaScript and will be renamed to pb_name.\n     * Optional fields that are not set will be set to undefined.\n     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n     * For the list of reserved names please see:\n     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n     * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n     *     JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @return {!Object}\n     */\n    TronWebProto.FreezeBalanceV2Contract.prototype.toObject = function (opt_includeInstance) {\n        return TronWebProto.FreezeBalanceV2Contract.toObject(opt_includeInstance, this);\n    };\n\n    /**\n     * Static version of the {@see toObject} method.\n     * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n     *     the JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @param {!TronWebProto.FreezeBalanceV2Contract} msg The msg instance to transform.\n     * @return {!Object}\n     * @suppress {unusedLocalVariables} f is only used for nested messages\n     */\n    TronWebProto.FreezeBalanceV2Contract.toObject = function (includeInstance, msg) {\n        var f,\n            obj = {\n                ownerAddress: msg.getOwnerAddress_asB64(),\n                frozenBalance: jspb.Message.getFieldWithDefault(msg, 2, 0),\n                resource: jspb.Message.getFieldWithDefault(msg, 3, 0),\n            };\n\n        if (includeInstance) {\n            obj.$jspbMessageInstance = msg;\n        }\n        return obj;\n    };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.FreezeBalanceV2Contract}\n */\nTronWebProto.FreezeBalanceV2Contract.deserializeBinary = function (bytes) {\n    var reader = new jspb.BinaryReader(bytes);\n    var msg = new TronWebProto.FreezeBalanceV2Contract();\n    return TronWebProto.FreezeBalanceV2Contract.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.FreezeBalanceV2Contract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.FreezeBalanceV2Contract}\n */\nTronWebProto.FreezeBalanceV2Contract.deserializeBinaryFromReader = function (msg, reader) {\n    while (reader.nextField()) {\n        if (reader.isEndGroup()) {\n            break;\n        }\n        var field = reader.getFieldNumber();\n        switch (field) {\n            case 1:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setOwnerAddress(value);\n                break;\n            case 2:\n                var value = /** @type {number} */ (reader.readInt64());\n                msg.setFrozenBalance(value);\n                break;\n            case 3:\n                var value = /** @type {!TronWebProto.ResourceCode} */ (reader.readEnum());\n                msg.setResource(value);\n                break;\n            default:\n                reader.skipField();\n                break;\n        }\n    }\n    return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.FreezeBalanceV2Contract.prototype.serializeBinary = function () {\n    var writer = new jspb.BinaryWriter();\n    TronWebProto.FreezeBalanceV2Contract.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.FreezeBalanceV2Contract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.FreezeBalanceV2Contract.serializeBinaryToWriter = function (message, writer) {\n    var f = undefined;\n    f = message.getOwnerAddress_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(1, f);\n    }\n    f = message.getFrozenBalance();\n    if (f !== 0) {\n        writer.writeInt64(2, f);\n    }\n    f = message.getResource();\n    if (f !== 0.0) {\n        writer.writeEnum(3, f);\n    }\n};\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.FreezeBalanceV2Contract.prototype.getOwnerAddress = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));\n};\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.FreezeBalanceV2Contract.prototype.getOwnerAddress_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getOwnerAddress()));\n};\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.FreezeBalanceV2Contract.prototype.getOwnerAddress_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getOwnerAddress()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.FreezeBalanceV2Contract} returns this\n */\nTronWebProto.FreezeBalanceV2Contract.prototype.setOwnerAddress = function (value) {\n    return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n/**\n * optional int64 frozen_balance = 2;\n * @return {number}\n */\nTronWebProto.FreezeBalanceV2Contract.prototype.getFrozenBalance = function () {\n    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n/**\n * @param {number} value\n * @return {!TronWebProto.FreezeBalanceV2Contract} returns this\n */\nTronWebProto.FreezeBalanceV2Contract.prototype.setFrozenBalance = function (value) {\n    return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n/**\n * optional ResourceCode resource = 3;\n * @return {!TronWebProto.ResourceCode}\n */\nTronWebProto.FreezeBalanceV2Contract.prototype.getResource = function () {\n    return /** @type {!TronWebProto.ResourceCode} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n/**\n * @param {!TronWebProto.ResourceCode} value\n * @return {!TronWebProto.FreezeBalanceV2Contract} returns this\n */\nTronWebProto.FreezeBalanceV2Contract.prototype.setResource = function (value) {\n    return jspb.Message.setProto3EnumField(this, 3, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n    /**\n     * Creates an object representation of this proto.\n     * Field names that are reserved in JavaScript and will be renamed to pb_name.\n     * Optional fields that are not set will be set to undefined.\n     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n     * For the list of reserved names please see:\n     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n     * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n     *     JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @return {!Object}\n     */\n    TronWebProto.UnfreezeBalanceV2Contract.prototype.toObject = function (opt_includeInstance) {\n        return TronWebProto.UnfreezeBalanceV2Contract.toObject(opt_includeInstance, this);\n    };\n\n    /**\n     * Static version of the {@see toObject} method.\n     * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n     *     the JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @param {!TronWebProto.UnfreezeBalanceV2Contract} msg The msg instance to transform.\n     * @return {!Object}\n     * @suppress {unusedLocalVariables} f is only used for nested messages\n     */\n    TronWebProto.UnfreezeBalanceV2Contract.toObject = function (includeInstance, msg) {\n        var f,\n            obj = {\n                ownerAddress: msg.getOwnerAddress_asB64(),\n                unfreezeBalance: jspb.Message.getFieldWithDefault(msg, 2, 0),\n                resource: jspb.Message.getFieldWithDefault(msg, 3, 0),\n            };\n\n        if (includeInstance) {\n            obj.$jspbMessageInstance = msg;\n        }\n        return obj;\n    };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.UnfreezeBalanceV2Contract}\n */\nTronWebProto.UnfreezeBalanceV2Contract.deserializeBinary = function (bytes) {\n    var reader = new jspb.BinaryReader(bytes);\n    var msg = new TronWebProto.UnfreezeBalanceV2Contract();\n    return TronWebProto.UnfreezeBalanceV2Contract.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.UnfreezeBalanceV2Contract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.UnfreezeBalanceV2Contract}\n */\nTronWebProto.UnfreezeBalanceV2Contract.deserializeBinaryFromReader = function (msg, reader) {\n    while (reader.nextField()) {\n        if (reader.isEndGroup()) {\n            break;\n        }\n        var field = reader.getFieldNumber();\n        switch (field) {\n            case 1:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setOwnerAddress(value);\n                break;\n            case 2:\n                var value = /** @type {number} */ (reader.readInt64());\n                msg.setUnfreezeBalance(value);\n                break;\n            case 3:\n                var value = /** @type {!TronWebProto.ResourceCode} */ (reader.readEnum());\n                msg.setResource(value);\n                break;\n            default:\n                reader.skipField();\n                break;\n        }\n    }\n    return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.UnfreezeBalanceV2Contract.prototype.serializeBinary = function () {\n    var writer = new jspb.BinaryWriter();\n    TronWebProto.UnfreezeBalanceV2Contract.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.UnfreezeBalanceV2Contract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.UnfreezeBalanceV2Contract.serializeBinaryToWriter = function (message, writer) {\n    var f = undefined;\n    f = message.getOwnerAddress_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(1, f);\n    }\n    f = message.getUnfreezeBalance();\n    if (f !== 0) {\n        writer.writeInt64(2, f);\n    }\n    f = message.getResource();\n    if (f !== 0.0) {\n        writer.writeEnum(3, f);\n    }\n};\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.UnfreezeBalanceV2Contract.prototype.getOwnerAddress = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));\n};\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.UnfreezeBalanceV2Contract.prototype.getOwnerAddress_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getOwnerAddress()));\n};\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.UnfreezeBalanceV2Contract.prototype.getOwnerAddress_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getOwnerAddress()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.UnfreezeBalanceV2Contract} returns this\n */\nTronWebProto.UnfreezeBalanceV2Contract.prototype.setOwnerAddress = function (value) {\n    return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n/**\n * optional int64 unfreeze_balance = 2;\n * @return {number}\n */\nTronWebProto.UnfreezeBalanceV2Contract.prototype.getUnfreezeBalance = function () {\n    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n/**\n * @param {number} value\n * @return {!TronWebProto.UnfreezeBalanceV2Contract} returns this\n */\nTronWebProto.UnfreezeBalanceV2Contract.prototype.setUnfreezeBalance = function (value) {\n    return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n/**\n * optional ResourceCode resource = 3;\n * @return {!TronWebProto.ResourceCode}\n */\nTronWebProto.UnfreezeBalanceV2Contract.prototype.getResource = function () {\n    return /** @type {!TronWebProto.ResourceCode} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n/**\n * @param {!TronWebProto.ResourceCode} value\n * @return {!TronWebProto.UnfreezeBalanceV2Contract} returns this\n */\nTronWebProto.UnfreezeBalanceV2Contract.prototype.setResource = function (value) {\n    return jspb.Message.setProto3EnumField(this, 3, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n    /**\n     * Creates an object representation of this proto.\n     * Field names that are reserved in JavaScript and will be renamed to pb_name.\n     * Optional fields that are not set will be set to undefined.\n     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n     * For the list of reserved names please see:\n     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n     * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n     *     JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @return {!Object}\n     */\n    TronWebProto.WithdrawExpireUnfreezeContract.prototype.toObject = function (opt_includeInstance) {\n        return TronWebProto.WithdrawExpireUnfreezeContract.toObject(opt_includeInstance, this);\n    };\n\n    /**\n     * Static version of the {@see toObject} method.\n     * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n     *     the JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @param {!TronWebProto.WithdrawExpireUnfreezeContract} msg The msg instance to transform.\n     * @return {!Object}\n     * @suppress {unusedLocalVariables} f is only used for nested messages\n     */\n    TronWebProto.WithdrawExpireUnfreezeContract.toObject = function (includeInstance, msg) {\n        var f,\n            obj = {\n                ownerAddress: msg.getOwnerAddress_asB64(),\n            };\n\n        if (includeInstance) {\n            obj.$jspbMessageInstance = msg;\n        }\n        return obj;\n    };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.WithdrawExpireUnfreezeContract}\n */\nTronWebProto.WithdrawExpireUnfreezeContract.deserializeBinary = function (bytes) {\n    var reader = new jspb.BinaryReader(bytes);\n    var msg = new TronWebProto.WithdrawExpireUnfreezeContract();\n    return TronWebProto.WithdrawExpireUnfreezeContract.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.WithdrawExpireUnfreezeContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.WithdrawExpireUnfreezeContract}\n */\nTronWebProto.WithdrawExpireUnfreezeContract.deserializeBinaryFromReader = function (msg, reader) {\n    while (reader.nextField()) {\n        if (reader.isEndGroup()) {\n            break;\n        }\n        var field = reader.getFieldNumber();\n        switch (field) {\n            case 1:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setOwnerAddress(value);\n                break;\n            default:\n                reader.skipField();\n                break;\n        }\n    }\n    return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.WithdrawExpireUnfreezeContract.prototype.serializeBinary = function () {\n    var writer = new jspb.BinaryWriter();\n    TronWebProto.WithdrawExpireUnfreezeContract.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.WithdrawExpireUnfreezeContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.WithdrawExpireUnfreezeContract.serializeBinaryToWriter = function (message, writer) {\n    var f = undefined;\n    f = message.getOwnerAddress_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(1, f);\n    }\n};\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.WithdrawExpireUnfreezeContract.prototype.getOwnerAddress = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));\n};\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.WithdrawExpireUnfreezeContract.prototype.getOwnerAddress_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getOwnerAddress()));\n};\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.WithdrawExpireUnfreezeContract.prototype.getOwnerAddress_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getOwnerAddress()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.WithdrawExpireUnfreezeContract} returns this\n */\nTronWebProto.WithdrawExpireUnfreezeContract.prototype.setOwnerAddress = function (value) {\n    return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n    /**\n     * Creates an object representation of this proto.\n     * Field names that are reserved in JavaScript and will be renamed to pb_name.\n     * Optional fields that are not set will be set to undefined.\n     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n     * For the list of reserved names please see:\n     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n     * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n     *     JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @return {!Object}\n     */\n    TronWebProto.DelegateResourceContract.prototype.toObject = function (opt_includeInstance) {\n        return TronWebProto.DelegateResourceContract.toObject(opt_includeInstance, this);\n    };\n\n    /**\n     * Static version of the {@see toObject} method.\n     * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n     *     the JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @param {!TronWebProto.DelegateResourceContract} msg The msg instance to transform.\n     * @return {!Object}\n     * @suppress {unusedLocalVariables} f is only used for nested messages\n     */\n    TronWebProto.DelegateResourceContract.toObject = function (includeInstance, msg) {\n        var f,\n            obj = {\n                ownerAddress: msg.getOwnerAddress_asB64(),\n                resource: jspb.Message.getFieldWithDefault(msg, 2, 0),\n                balance: jspb.Message.getFieldWithDefault(msg, 3, 0),\n                receiverAddress: msg.getReceiverAddress_asB64(),\n                lock: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),\n                lockPeriod: jspb.Message.getFieldWithDefault(msg, 6, 0),\n            };\n\n        if (includeInstance) {\n            obj.$jspbMessageInstance = msg;\n        }\n        return obj;\n    };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.DelegateResourceContract}\n */\nTronWebProto.DelegateResourceContract.deserializeBinary = function (bytes) {\n    var reader = new jspb.BinaryReader(bytes);\n    var msg = new TronWebProto.DelegateResourceContract();\n    return TronWebProto.DelegateResourceContract.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.DelegateResourceContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.DelegateResourceContract}\n */\nTronWebProto.DelegateResourceContract.deserializeBinaryFromReader = function (msg, reader) {\n    while (reader.nextField()) {\n        if (reader.isEndGroup()) {\n            break;\n        }\n        var field = reader.getFieldNumber();\n        switch (field) {\n            case 1:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setOwnerAddress(value);\n                break;\n            case 2:\n                var value = /** @type {!TronWebProto.ResourceCode} */ (reader.readEnum());\n                msg.setResource(value);\n                break;\n            case 3:\n                var value = /** @type {number} */ (reader.readInt64());\n                msg.setBalance(value);\n                break;\n            case 4:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setReceiverAddress(value);\n                break;\n            case 5:\n                var value = /** @type {boolean} */ (reader.readBool());\n                msg.setLock(value);\n                break;\n            case 6:\n                var value = /** @type {number} */ (reader.readInt64());\n                msg.setLockPeriod(value);\n                break;\n            default:\n                reader.skipField();\n                break;\n        }\n    }\n    return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.DelegateResourceContract.prototype.serializeBinary = function () {\n    var writer = new jspb.BinaryWriter();\n    TronWebProto.DelegateResourceContract.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.DelegateResourceContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.DelegateResourceContract.serializeBinaryToWriter = function (message, writer) {\n    var f = undefined;\n    f = message.getOwnerAddress_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(1, f);\n    }\n    f = message.getResource();\n    if (f !== 0.0) {\n        writer.writeEnum(2, f);\n    }\n    f = message.getBalance();\n    if (f !== 0) {\n        writer.writeInt64(3, f);\n    }\n    f = message.getReceiverAddress_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(4, f);\n    }\n    f = message.getLock();\n    if (f) {\n        writer.writeBool(5, f);\n    }\n    f = message.getLockPeriod();\n    if (f !== 0) {\n        writer.writeInt64(6, f);\n    }\n};\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.DelegateResourceContract.prototype.getOwnerAddress = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));\n};\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.DelegateResourceContract.prototype.getOwnerAddress_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getOwnerAddress()));\n};\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.DelegateResourceContract.prototype.getOwnerAddress_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getOwnerAddress()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.DelegateResourceContract} returns this\n */\nTronWebProto.DelegateResourceContract.prototype.setOwnerAddress = function (value) {\n    return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n/**\n * optional ResourceCode resource = 2;\n * @return {!TronWebProto.ResourceCode}\n */\nTronWebProto.DelegateResourceContract.prototype.getResource = function () {\n    return /** @type {!TronWebProto.ResourceCode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n/**\n * @param {!TronWebProto.ResourceCode} value\n * @return {!TronWebProto.DelegateResourceContract} returns this\n */\nTronWebProto.DelegateResourceContract.prototype.setResource = function (value) {\n    return jspb.Message.setProto3EnumField(this, 2, value);\n};\n\n/**\n * optional int64 balance = 3;\n * @return {number}\n */\nTronWebProto.DelegateResourceContract.prototype.getBalance = function () {\n    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n/**\n * @param {number} value\n * @return {!TronWebProto.DelegateResourceContract} returns this\n */\nTronWebProto.DelegateResourceContract.prototype.setBalance = function (value) {\n    return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n/**\n * optional bytes receiver_address = 4;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.DelegateResourceContract.prototype.getReceiverAddress = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ''));\n};\n\n/**\n * optional bytes receiver_address = 4;\n * This is a type-conversion wrapper around `getReceiverAddress()`\n * @return {string}\n */\nTronWebProto.DelegateResourceContract.prototype.getReceiverAddress_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getReceiverAddress()));\n};\n\n/**\n * optional bytes receiver_address = 4;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getReceiverAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.DelegateResourceContract.prototype.getReceiverAddress_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getReceiverAddress()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.DelegateResourceContract} returns this\n */\nTronWebProto.DelegateResourceContract.prototype.setReceiverAddress = function (value) {\n    return jspb.Message.setProto3BytesField(this, 4, value);\n};\n\n/**\n * optional bool lock = 5;\n * @return {boolean}\n */\nTronWebProto.DelegateResourceContract.prototype.getLock = function () {\n    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));\n};\n\n/**\n * @param {boolean} value\n * @return {!TronWebProto.DelegateResourceContract} returns this\n */\nTronWebProto.DelegateResourceContract.prototype.setLock = function (value) {\n    return jspb.Message.setProto3BooleanField(this, 5, value);\n};\n\n/**\n * optional int64 lock_period = 6;\n * @return {number}\n */\nTronWebProto.DelegateResourceContract.prototype.getLockPeriod = function () {\n    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));\n};\n\n/**\n * @param {number} value\n * @return {!TronWebProto.DelegateResourceContract} returns this\n */\nTronWebProto.DelegateResourceContract.prototype.setLockPeriod = function (value) {\n    return jspb.Message.setProto3IntField(this, 6, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n    /**\n     * Creates an object representation of this proto.\n     * Field names that are reserved in JavaScript and will be renamed to pb_name.\n     * Optional fields that are not set will be set to undefined.\n     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n     * For the list of reserved names please see:\n     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n     * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n     *     JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @return {!Object}\n     */\n    TronWebProto.UnDelegateResourceContract.prototype.toObject = function (opt_includeInstance) {\n        return TronWebProto.UnDelegateResourceContract.toObject(opt_includeInstance, this);\n    };\n\n    /**\n     * Static version of the {@see toObject} method.\n     * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n     *     the JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @param {!TronWebProto.UnDelegateResourceContract} msg The msg instance to transform.\n     * @return {!Object}\n     * @suppress {unusedLocalVariables} f is only used for nested messages\n     */\n    TronWebProto.UnDelegateResourceContract.toObject = function (includeInstance, msg) {\n        var f,\n            obj = {\n                ownerAddress: msg.getOwnerAddress_asB64(),\n                resource: jspb.Message.getFieldWithDefault(msg, 2, 0),\n                balance: jspb.Message.getFieldWithDefault(msg, 3, 0),\n                receiverAddress: msg.getReceiverAddress_asB64(),\n            };\n\n        if (includeInstance) {\n            obj.$jspbMessageInstance = msg;\n        }\n        return obj;\n    };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.UnDelegateResourceContract}\n */\nTronWebProto.UnDelegateResourceContract.deserializeBinary = function (bytes) {\n    var reader = new jspb.BinaryReader(bytes);\n    var msg = new TronWebProto.UnDelegateResourceContract();\n    return TronWebProto.UnDelegateResourceContract.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.UnDelegateResourceContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.UnDelegateResourceContract}\n */\nTronWebProto.UnDelegateResourceContract.deserializeBinaryFromReader = function (msg, reader) {\n    while (reader.nextField()) {\n        if (reader.isEndGroup()) {\n            break;\n        }\n        var field = reader.getFieldNumber();\n        switch (field) {\n            case 1:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setOwnerAddress(value);\n                break;\n            case 2:\n                var value = /** @type {!TronWebProto.ResourceCode} */ (reader.readEnum());\n                msg.setResource(value);\n                break;\n            case 3:\n                var value = /** @type {number} */ (reader.readInt64());\n                msg.setBalance(value);\n                break;\n            case 4:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setReceiverAddress(value);\n                break;\n            default:\n                reader.skipField();\n                break;\n        }\n    }\n    return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.UnDelegateResourceContract.prototype.serializeBinary = function () {\n    var writer = new jspb.BinaryWriter();\n    TronWebProto.UnDelegateResourceContract.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.UnDelegateResourceContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.UnDelegateResourceContract.serializeBinaryToWriter = function (message, writer) {\n    var f = undefined;\n    f = message.getOwnerAddress_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(1, f);\n    }\n    f = message.getResource();\n    if (f !== 0.0) {\n        writer.writeEnum(2, f);\n    }\n    f = message.getBalance();\n    if (f !== 0) {\n        writer.writeInt64(3, f);\n    }\n    f = message.getReceiverAddress_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(4, f);\n    }\n};\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.UnDelegateResourceContract.prototype.getOwnerAddress = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));\n};\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.UnDelegateResourceContract.prototype.getOwnerAddress_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getOwnerAddress()));\n};\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.UnDelegateResourceContract.prototype.getOwnerAddress_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getOwnerAddress()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.UnDelegateResourceContract} returns this\n */\nTronWebProto.UnDelegateResourceContract.prototype.setOwnerAddress = function (value) {\n    return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n/**\n * optional ResourceCode resource = 2;\n * @return {!TronWebProto.ResourceCode}\n */\nTronWebProto.UnDelegateResourceContract.prototype.getResource = function () {\n    return /** @type {!TronWebProto.ResourceCode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n/**\n * @param {!TronWebProto.ResourceCode} value\n * @return {!TronWebProto.UnDelegateResourceContract} returns this\n */\nTronWebProto.UnDelegateResourceContract.prototype.setResource = function (value) {\n    return jspb.Message.setProto3EnumField(this, 2, value);\n};\n\n/**\n * optional int64 balance = 3;\n * @return {number}\n */\nTronWebProto.UnDelegateResourceContract.prototype.getBalance = function () {\n    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n/**\n * @param {number} value\n * @return {!TronWebProto.UnDelegateResourceContract} returns this\n */\nTronWebProto.UnDelegateResourceContract.prototype.setBalance = function (value) {\n    return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n/**\n * optional bytes receiver_address = 4;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.UnDelegateResourceContract.prototype.getReceiverAddress = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ''));\n};\n\n/**\n * optional bytes receiver_address = 4;\n * This is a type-conversion wrapper around `getReceiverAddress()`\n * @return {string}\n */\nTronWebProto.UnDelegateResourceContract.prototype.getReceiverAddress_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getReceiverAddress()));\n};\n\n/**\n * optional bytes receiver_address = 4;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getReceiverAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.UnDelegateResourceContract.prototype.getReceiverAddress_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getReceiverAddress()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.UnDelegateResourceContract} returns this\n */\nTronWebProto.UnDelegateResourceContract.prototype.setReceiverAddress = function (value) {\n    return jspb.Message.setProto3BytesField(this, 4, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n    /**\n     * Creates an object representation of this proto.\n     * Field names that are reserved in JavaScript and will be renamed to pb_name.\n     * Optional fields that are not set will be set to undefined.\n     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n     * For the list of reserved names please see:\n     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n     * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n     *     JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @return {!Object}\n     */\n    TronWebProto.CancelAllUnfreezeV2Contract.prototype.toObject = function (opt_includeInstance) {\n        return TronWebProto.CancelAllUnfreezeV2Contract.toObject(opt_includeInstance, this);\n    };\n\n    /**\n     * Static version of the {@see toObject} method.\n     * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n     *     the JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @param {!TronWebProto.CancelAllUnfreezeV2Contract} msg The msg instance to transform.\n     * @return {!Object}\n     * @suppress {unusedLocalVariables} f is only used for nested messages\n     */\n    TronWebProto.CancelAllUnfreezeV2Contract.toObject = function (includeInstance, msg) {\n        var f,\n            obj = {\n                ownerAddress: msg.getOwnerAddress_asB64(),\n            };\n\n        if (includeInstance) {\n            obj.$jspbMessageInstance = msg;\n        }\n        return obj;\n    };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.CancelAllUnfreezeV2Contract}\n */\nTronWebProto.CancelAllUnfreezeV2Contract.deserializeBinary = function (bytes) {\n    var reader = new jspb.BinaryReader(bytes);\n    var msg = new TronWebProto.CancelAllUnfreezeV2Contract();\n    return TronWebProto.CancelAllUnfreezeV2Contract.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.CancelAllUnfreezeV2Contract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.CancelAllUnfreezeV2Contract}\n */\nTronWebProto.CancelAllUnfreezeV2Contract.deserializeBinaryFromReader = function (msg, reader) {\n    while (reader.nextField()) {\n        if (reader.isEndGroup()) {\n            break;\n        }\n        var field = reader.getFieldNumber();\n        switch (field) {\n            case 1:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setOwnerAddress(value);\n                break;\n            default:\n                reader.skipField();\n                break;\n        }\n    }\n    return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.CancelAllUnfreezeV2Contract.prototype.serializeBinary = function () {\n    var writer = new jspb.BinaryWriter();\n    TronWebProto.CancelAllUnfreezeV2Contract.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.CancelAllUnfreezeV2Contract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.CancelAllUnfreezeV2Contract.serializeBinaryToWriter = function (message, writer) {\n    var f = undefined;\n    f = message.getOwnerAddress_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(1, f);\n    }\n};\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.CancelAllUnfreezeV2Contract.prototype.getOwnerAddress = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));\n};\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.CancelAllUnfreezeV2Contract.prototype.getOwnerAddress_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getOwnerAddress()));\n};\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.CancelAllUnfreezeV2Contract.prototype.getOwnerAddress_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getOwnerAddress()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.CancelAllUnfreezeV2Contract} returns this\n */\nTronWebProto.CancelAllUnfreezeV2Contract.prototype.setOwnerAddress = function (value) {\n    return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\ngoog.object.extend(exports, TronWebProto);\n","// source: core/contract/common.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('@tronweb3/google-protobuf');\nvar goog = jspb;\nvar global =\n  (typeof globalThis !== 'undefined' && globalThis) ||\n  (typeof window !== 'undefined' && window) ||\n  (typeof global !== 'undefined' && global) ||\n  (typeof self !== 'undefined' && self) ||\n  (function () { return this; }).call(null) ||\n  Function('return this')();\n\ngoog.exportSymbol('TronWebProto.ResourceCode', null, global);\n/**\n * @enum {number}\n */\nTronWebProto.ResourceCode = {\n  BANDWIDTH: 0,\n  ENERGY: 1,\n  TRON_POWER: 2\n};\n\ngoog.object.extend(exports, TronWebProto);\n","// source: core/contract/exchange_contract.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('@tronweb3/google-protobuf');\nvar goog = jspb;\nvar global =\n  (typeof globalThis !== 'undefined' && globalThis) ||\n  (typeof window !== 'undefined' && window) ||\n  (typeof global !== 'undefined' && global) ||\n  (typeof self !== 'undefined' && self) ||\n  (function () { return this; }).call(null) ||\n  Function('return this')();\n\ngoog.exportSymbol('TronWebProto.ExchangeCreateContract', null, global);\ngoog.exportSymbol('TronWebProto.ExchangeInjectContract', null, global);\ngoog.exportSymbol('TronWebProto.ExchangeTransactionContract', null, global);\ngoog.exportSymbol('TronWebProto.ExchangeWithdrawContract', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.ExchangeCreateContract = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.ExchangeCreateContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.ExchangeCreateContract.displayName = 'TronWebProto.ExchangeCreateContract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.ExchangeInjectContract = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.ExchangeInjectContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.ExchangeInjectContract.displayName = 'TronWebProto.ExchangeInjectContract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.ExchangeWithdrawContract = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.ExchangeWithdrawContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.ExchangeWithdrawContract.displayName = 'TronWebProto.ExchangeWithdrawContract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.ExchangeTransactionContract = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.ExchangeTransactionContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.ExchangeTransactionContract.displayName = 'TronWebProto.ExchangeTransactionContract';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.ExchangeCreateContract.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.ExchangeCreateContract.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.ExchangeCreateContract} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.ExchangeCreateContract.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    ownerAddress: msg.getOwnerAddress_asB64(),\n    firstTokenId: msg.getFirstTokenId_asB64(),\n    firstTokenBalance: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    secondTokenId: msg.getSecondTokenId_asB64(),\n    secondTokenBalance: jspb.Message.getFieldWithDefault(msg, 5, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.ExchangeCreateContract}\n */\nTronWebProto.ExchangeCreateContract.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.ExchangeCreateContract;\n  return TronWebProto.ExchangeCreateContract.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.ExchangeCreateContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.ExchangeCreateContract}\n */\nTronWebProto.ExchangeCreateContract.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setOwnerAddress(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setFirstTokenId(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setFirstTokenBalance(value);\n      break;\n    case 4:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setSecondTokenId(value);\n      break;\n    case 5:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setSecondTokenBalance(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.ExchangeCreateContract.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.ExchangeCreateContract.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.ExchangeCreateContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.ExchangeCreateContract.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getOwnerAddress_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getFirstTokenId_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n  f = message.getFirstTokenBalance();\n  if (f !== 0) {\n    writer.writeInt64(\n      3,\n      f\n    );\n  }\n  f = message.getSecondTokenId_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      4,\n      f\n    );\n  }\n  f = message.getSecondTokenBalance();\n  if (f !== 0) {\n    writer.writeInt64(\n      5,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.ExchangeCreateContract.prototype.getOwnerAddress = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.ExchangeCreateContract.prototype.getOwnerAddress_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.ExchangeCreateContract.prototype.getOwnerAddress_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.ExchangeCreateContract} returns this\n */\nTronWebProto.ExchangeCreateContract.prototype.setOwnerAddress = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional bytes first_token_id = 2;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.ExchangeCreateContract.prototype.getFirstTokenId = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes first_token_id = 2;\n * This is a type-conversion wrapper around `getFirstTokenId()`\n * @return {string}\n */\nTronWebProto.ExchangeCreateContract.prototype.getFirstTokenId_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getFirstTokenId()));\n};\n\n\n/**\n * optional bytes first_token_id = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getFirstTokenId()`\n * @return {!Uint8Array}\n */\nTronWebProto.ExchangeCreateContract.prototype.getFirstTokenId_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getFirstTokenId()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.ExchangeCreateContract} returns this\n */\nTronWebProto.ExchangeCreateContract.prototype.setFirstTokenId = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n/**\n * optional int64 first_token_balance = 3;\n * @return {number}\n */\nTronWebProto.ExchangeCreateContract.prototype.getFirstTokenBalance = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.ExchangeCreateContract} returns this\n */\nTronWebProto.ExchangeCreateContract.prototype.setFirstTokenBalance = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n/**\n * optional bytes second_token_id = 4;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.ExchangeCreateContract.prototype.getSecondTokenId = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * optional bytes second_token_id = 4;\n * This is a type-conversion wrapper around `getSecondTokenId()`\n * @return {string}\n */\nTronWebProto.ExchangeCreateContract.prototype.getSecondTokenId_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getSecondTokenId()));\n};\n\n\n/**\n * optional bytes second_token_id = 4;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getSecondTokenId()`\n * @return {!Uint8Array}\n */\nTronWebProto.ExchangeCreateContract.prototype.getSecondTokenId_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getSecondTokenId()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.ExchangeCreateContract} returns this\n */\nTronWebProto.ExchangeCreateContract.prototype.setSecondTokenId = function(value) {\n  return jspb.Message.setProto3BytesField(this, 4, value);\n};\n\n\n/**\n * optional int64 second_token_balance = 5;\n * @return {number}\n */\nTronWebProto.ExchangeCreateContract.prototype.getSecondTokenBalance = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.ExchangeCreateContract} returns this\n */\nTronWebProto.ExchangeCreateContract.prototype.setSecondTokenBalance = function(value) {\n  return jspb.Message.setProto3IntField(this, 5, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.ExchangeInjectContract.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.ExchangeInjectContract.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.ExchangeInjectContract} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.ExchangeInjectContract.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    ownerAddress: msg.getOwnerAddress_asB64(),\n    exchangeId: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    tokenId: msg.getTokenId_asB64(),\n    quant: jspb.Message.getFieldWithDefault(msg, 4, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.ExchangeInjectContract}\n */\nTronWebProto.ExchangeInjectContract.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.ExchangeInjectContract;\n  return TronWebProto.ExchangeInjectContract.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.ExchangeInjectContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.ExchangeInjectContract}\n */\nTronWebProto.ExchangeInjectContract.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setOwnerAddress(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setExchangeId(value);\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setTokenId(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setQuant(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.ExchangeInjectContract.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.ExchangeInjectContract.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.ExchangeInjectContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.ExchangeInjectContract.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getOwnerAddress_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getExchangeId();\n  if (f !== 0) {\n    writer.writeInt64(\n      2,\n      f\n    );\n  }\n  f = message.getTokenId_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n  f = message.getQuant();\n  if (f !== 0) {\n    writer.writeInt64(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.ExchangeInjectContract.prototype.getOwnerAddress = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.ExchangeInjectContract.prototype.getOwnerAddress_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.ExchangeInjectContract.prototype.getOwnerAddress_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.ExchangeInjectContract} returns this\n */\nTronWebProto.ExchangeInjectContract.prototype.setOwnerAddress = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional int64 exchange_id = 2;\n * @return {number}\n */\nTronWebProto.ExchangeInjectContract.prototype.getExchangeId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.ExchangeInjectContract} returns this\n */\nTronWebProto.ExchangeInjectContract.prototype.setExchangeId = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional bytes token_id = 3;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.ExchangeInjectContract.prototype.getTokenId = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes token_id = 3;\n * This is a type-conversion wrapper around `getTokenId()`\n * @return {string}\n */\nTronWebProto.ExchangeInjectContract.prototype.getTokenId_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getTokenId()));\n};\n\n\n/**\n * optional bytes token_id = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getTokenId()`\n * @return {!Uint8Array}\n */\nTronWebProto.ExchangeInjectContract.prototype.getTokenId_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getTokenId()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.ExchangeInjectContract} returns this\n */\nTronWebProto.ExchangeInjectContract.prototype.setTokenId = function(value) {\n  return jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n/**\n * optional int64 quant = 4;\n * @return {number}\n */\nTronWebProto.ExchangeInjectContract.prototype.getQuant = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.ExchangeInjectContract} returns this\n */\nTronWebProto.ExchangeInjectContract.prototype.setQuant = function(value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.ExchangeWithdrawContract.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.ExchangeWithdrawContract.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.ExchangeWithdrawContract} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.ExchangeWithdrawContract.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    ownerAddress: msg.getOwnerAddress_asB64(),\n    exchangeId: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    tokenId: msg.getTokenId_asB64(),\n    quant: jspb.Message.getFieldWithDefault(msg, 4, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.ExchangeWithdrawContract}\n */\nTronWebProto.ExchangeWithdrawContract.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.ExchangeWithdrawContract;\n  return TronWebProto.ExchangeWithdrawContract.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.ExchangeWithdrawContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.ExchangeWithdrawContract}\n */\nTronWebProto.ExchangeWithdrawContract.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setOwnerAddress(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setExchangeId(value);\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setTokenId(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setQuant(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.ExchangeWithdrawContract.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.ExchangeWithdrawContract.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.ExchangeWithdrawContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.ExchangeWithdrawContract.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getOwnerAddress_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getExchangeId();\n  if (f !== 0) {\n    writer.writeInt64(\n      2,\n      f\n    );\n  }\n  f = message.getTokenId_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n  f = message.getQuant();\n  if (f !== 0) {\n    writer.writeInt64(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.ExchangeWithdrawContract.prototype.getOwnerAddress = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.ExchangeWithdrawContract.prototype.getOwnerAddress_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.ExchangeWithdrawContract.prototype.getOwnerAddress_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.ExchangeWithdrawContract} returns this\n */\nTronWebProto.ExchangeWithdrawContract.prototype.setOwnerAddress = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional int64 exchange_id = 2;\n * @return {number}\n */\nTronWebProto.ExchangeWithdrawContract.prototype.getExchangeId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.ExchangeWithdrawContract} returns this\n */\nTronWebProto.ExchangeWithdrawContract.prototype.setExchangeId = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional bytes token_id = 3;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.ExchangeWithdrawContract.prototype.getTokenId = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes token_id = 3;\n * This is a type-conversion wrapper around `getTokenId()`\n * @return {string}\n */\nTronWebProto.ExchangeWithdrawContract.prototype.getTokenId_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getTokenId()));\n};\n\n\n/**\n * optional bytes token_id = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getTokenId()`\n * @return {!Uint8Array}\n */\nTronWebProto.ExchangeWithdrawContract.prototype.getTokenId_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getTokenId()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.ExchangeWithdrawContract} returns this\n */\nTronWebProto.ExchangeWithdrawContract.prototype.setTokenId = function(value) {\n  return jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n/**\n * optional int64 quant = 4;\n * @return {number}\n */\nTronWebProto.ExchangeWithdrawContract.prototype.getQuant = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.ExchangeWithdrawContract} returns this\n */\nTronWebProto.ExchangeWithdrawContract.prototype.setQuant = function(value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.ExchangeTransactionContract.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.ExchangeTransactionContract.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.ExchangeTransactionContract} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.ExchangeTransactionContract.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    ownerAddress: msg.getOwnerAddress_asB64(),\n    exchangeId: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    tokenId: msg.getTokenId_asB64(),\n    quant: jspb.Message.getFieldWithDefault(msg, 4, 0),\n    expected: jspb.Message.getFieldWithDefault(msg, 5, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.ExchangeTransactionContract}\n */\nTronWebProto.ExchangeTransactionContract.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.ExchangeTransactionContract;\n  return TronWebProto.ExchangeTransactionContract.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.ExchangeTransactionContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.ExchangeTransactionContract}\n */\nTronWebProto.ExchangeTransactionContract.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setOwnerAddress(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setExchangeId(value);\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setTokenId(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setQuant(value);\n      break;\n    case 5:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setExpected(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.ExchangeTransactionContract.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.ExchangeTransactionContract.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.ExchangeTransactionContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.ExchangeTransactionContract.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getOwnerAddress_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getExchangeId();\n  if (f !== 0) {\n    writer.writeInt64(\n      2,\n      f\n    );\n  }\n  f = message.getTokenId_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n  f = message.getQuant();\n  if (f !== 0) {\n    writer.writeInt64(\n      4,\n      f\n    );\n  }\n  f = message.getExpected();\n  if (f !== 0) {\n    writer.writeInt64(\n      5,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.ExchangeTransactionContract.prototype.getOwnerAddress = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.ExchangeTransactionContract.prototype.getOwnerAddress_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.ExchangeTransactionContract.prototype.getOwnerAddress_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.ExchangeTransactionContract} returns this\n */\nTronWebProto.ExchangeTransactionContract.prototype.setOwnerAddress = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional int64 exchange_id = 2;\n * @return {number}\n */\nTronWebProto.ExchangeTransactionContract.prototype.getExchangeId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.ExchangeTransactionContract} returns this\n */\nTronWebProto.ExchangeTransactionContract.prototype.setExchangeId = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional bytes token_id = 3;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.ExchangeTransactionContract.prototype.getTokenId = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes token_id = 3;\n * This is a type-conversion wrapper around `getTokenId()`\n * @return {string}\n */\nTronWebProto.ExchangeTransactionContract.prototype.getTokenId_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getTokenId()));\n};\n\n\n/**\n * optional bytes token_id = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getTokenId()`\n * @return {!Uint8Array}\n */\nTronWebProto.ExchangeTransactionContract.prototype.getTokenId_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getTokenId()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.ExchangeTransactionContract} returns this\n */\nTronWebProto.ExchangeTransactionContract.prototype.setTokenId = function(value) {\n  return jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n/**\n * optional int64 quant = 4;\n * @return {number}\n */\nTronWebProto.ExchangeTransactionContract.prototype.getQuant = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.ExchangeTransactionContract} returns this\n */\nTronWebProto.ExchangeTransactionContract.prototype.setQuant = function(value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\n/**\n * optional int64 expected = 5;\n * @return {number}\n */\nTronWebProto.ExchangeTransactionContract.prototype.getExpected = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.ExchangeTransactionContract} returns this\n */\nTronWebProto.ExchangeTransactionContract.prototype.setExpected = function(value) {\n  return jspb.Message.setProto3IntField(this, 5, value);\n};\n\n\ngoog.object.extend(exports, TronWebProto);\n","// source: core/contract/proposal_contract.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('@tronweb3/google-protobuf');\nvar goog = jspb;\nvar global =\n  (typeof globalThis !== 'undefined' && globalThis) ||\n  (typeof window !== 'undefined' && window) ||\n  (typeof global !== 'undefined' && global) ||\n  (typeof self !== 'undefined' && self) ||\n  (function () { return this; }).call(null) ||\n  Function('return this')();\n\ngoog.exportSymbol('TronWebProto.ProposalApproveContract', null, global);\ngoog.exportSymbol('TronWebProto.ProposalCreateContract', null, global);\ngoog.exportSymbol('TronWebProto.ProposalDeleteContract', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.ProposalApproveContract = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.ProposalApproveContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.ProposalApproveContract.displayName = 'TronWebProto.ProposalApproveContract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.ProposalCreateContract = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.ProposalCreateContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.ProposalCreateContract.displayName = 'TronWebProto.ProposalCreateContract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.ProposalDeleteContract = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.ProposalDeleteContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.ProposalDeleteContract.displayName = 'TronWebProto.ProposalDeleteContract';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.ProposalApproveContract.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.ProposalApproveContract.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.ProposalApproveContract} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.ProposalApproveContract.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    ownerAddress: msg.getOwnerAddress_asB64(),\n    proposalId: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    isAddApproval: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.ProposalApproveContract}\n */\nTronWebProto.ProposalApproveContract.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.ProposalApproveContract;\n  return TronWebProto.ProposalApproveContract.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.ProposalApproveContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.ProposalApproveContract}\n */\nTronWebProto.ProposalApproveContract.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setOwnerAddress(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setProposalId(value);\n      break;\n    case 3:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setIsAddApproval(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.ProposalApproveContract.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.ProposalApproveContract.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.ProposalApproveContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.ProposalApproveContract.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getOwnerAddress_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getProposalId();\n  if (f !== 0) {\n    writer.writeInt64(\n      2,\n      f\n    );\n  }\n  f = message.getIsAddApproval();\n  if (f) {\n    writer.writeBool(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.ProposalApproveContract.prototype.getOwnerAddress = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.ProposalApproveContract.prototype.getOwnerAddress_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.ProposalApproveContract.prototype.getOwnerAddress_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.ProposalApproveContract} returns this\n */\nTronWebProto.ProposalApproveContract.prototype.setOwnerAddress = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional int64 proposal_id = 2;\n * @return {number}\n */\nTronWebProto.ProposalApproveContract.prototype.getProposalId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.ProposalApproveContract} returns this\n */\nTronWebProto.ProposalApproveContract.prototype.setProposalId = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional bool is_add_approval = 3;\n * @return {boolean}\n */\nTronWebProto.ProposalApproveContract.prototype.getIsAddApproval = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!TronWebProto.ProposalApproveContract} returns this\n */\nTronWebProto.ProposalApproveContract.prototype.setIsAddApproval = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 3, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.ProposalCreateContract.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.ProposalCreateContract.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.ProposalCreateContract} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.ProposalCreateContract.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    ownerAddress: msg.getOwnerAddress_asB64(),\n    parametersMap: (f = msg.getParametersMap()) ? f.toObject(includeInstance, undefined) : []\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.ProposalCreateContract}\n */\nTronWebProto.ProposalCreateContract.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.ProposalCreateContract;\n  return TronWebProto.ProposalCreateContract.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.ProposalCreateContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.ProposalCreateContract}\n */\nTronWebProto.ProposalCreateContract.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setOwnerAddress(value);\n      break;\n    case 2:\n      var value = msg.getParametersMap();\n      reader.readMessage(value, function(message, reader) {\n        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt64, jspb.BinaryReader.prototype.readInt64, null, 0, 0);\n         });\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.ProposalCreateContract.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.ProposalCreateContract.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.ProposalCreateContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.ProposalCreateContract.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getOwnerAddress_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getParametersMap(true);\n  if (f && f.getLength() > 0) {\n    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeInt64, jspb.BinaryWriter.prototype.writeInt64);\n  }\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.ProposalCreateContract.prototype.getOwnerAddress = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.ProposalCreateContract.prototype.getOwnerAddress_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.ProposalCreateContract.prototype.getOwnerAddress_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.ProposalCreateContract} returns this\n */\nTronWebProto.ProposalCreateContract.prototype.setOwnerAddress = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * map<int64, int64> parameters = 2;\n * @param {boolean=} opt_noLazyCreate Do not create the map if\n * empty, instead returning `undefined`\n * @return {!jspb.Map<number,number>}\n */\nTronWebProto.ProposalCreateContract.prototype.getParametersMap = function(opt_noLazyCreate) {\n  return /** @type {!jspb.Map<number,number>} */ (\n      jspb.Message.getMapField(this, 2, opt_noLazyCreate,\n      null));\n};\n\n\n/**\n * Clears values from the map. The map will be non-null.\n * @return {!TronWebProto.ProposalCreateContract} returns this\n */\nTronWebProto.ProposalCreateContract.prototype.clearParametersMap = function() {\n  this.getParametersMap().clear();\n  return this;};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.ProposalDeleteContract.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.ProposalDeleteContract.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.ProposalDeleteContract} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.ProposalDeleteContract.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    ownerAddress: msg.getOwnerAddress_asB64(),\n    proposalId: jspb.Message.getFieldWithDefault(msg, 2, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.ProposalDeleteContract}\n */\nTronWebProto.ProposalDeleteContract.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.ProposalDeleteContract;\n  return TronWebProto.ProposalDeleteContract.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.ProposalDeleteContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.ProposalDeleteContract}\n */\nTronWebProto.ProposalDeleteContract.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setOwnerAddress(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setProposalId(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.ProposalDeleteContract.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.ProposalDeleteContract.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.ProposalDeleteContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.ProposalDeleteContract.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getOwnerAddress_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getProposalId();\n  if (f !== 0) {\n    writer.writeInt64(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.ProposalDeleteContract.prototype.getOwnerAddress = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.ProposalDeleteContract.prototype.getOwnerAddress_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.ProposalDeleteContract.prototype.getOwnerAddress_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.ProposalDeleteContract} returns this\n */\nTronWebProto.ProposalDeleteContract.prototype.setOwnerAddress = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional int64 proposal_id = 2;\n * @return {number}\n */\nTronWebProto.ProposalDeleteContract.prototype.getProposalId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.ProposalDeleteContract} returns this\n */\nTronWebProto.ProposalDeleteContract.prototype.setProposalId = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\ngoog.object.extend(exports, TronWebProto);\n","// source: core/contract/smart_contract.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('@tronweb3/google-protobuf');\nvar goog = jspb;\nvar global =\n    (typeof globalThis !== 'undefined' && globalThis) ||\n    (typeof window !== 'undefined' && window) ||\n    (typeof global !== 'undefined' && global) ||\n    (typeof self !== 'undefined' && self) ||\n    function () {\n        return this;\n    }.call(null) ||\n    Function('return this')();\n\nvar core_Tron_pb = require('../../core/Tron_pb.cjs');\ngoog.object.extend(proto, core_Tron_pb);\ngoog.exportSymbol('TronWebProto.ClearABIContract', null, global);\ngoog.exportSymbol('TronWebProto.ContractState', null, global);\ngoog.exportSymbol('TronWebProto.CreateSmartContract', null, global);\ngoog.exportSymbol('TronWebProto.SmartContract', null, global);\ngoog.exportSymbol('TronWebProto.SmartContract.ABI', null, global);\ngoog.exportSymbol('TronWebProto.SmartContract.ABI.Entry', null, global);\ngoog.exportSymbol('TronWebProto.SmartContract.ABI.Entry.EntryType', null, global);\ngoog.exportSymbol('TronWebProto.SmartContract.ABI.Entry.Param', null, global);\ngoog.exportSymbol('TronWebProto.SmartContract.ABI.Entry.StateMutabilityType', null, global);\ngoog.exportSymbol('TronWebProto.SmartContractDataWrapper', null, global);\ngoog.exportSymbol('TronWebProto.TriggerSmartContract', null, global);\ngoog.exportSymbol('TronWebProto.UpdateEnergyLimitContract', null, global);\ngoog.exportSymbol('TronWebProto.UpdateSettingContract', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.SmartContract = function (opt_data) {\n    jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.SmartContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n    /**\n     * @public\n     * @override\n     */\n    TronWebProto.SmartContract.displayName = 'TronWebProto.SmartContract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.SmartContract.ABI = function (opt_data) {\n    jspb.Message.initialize(this, opt_data, 0, -1, TronWebProto.SmartContract.ABI.repeatedFields_, null);\n};\ngoog.inherits(TronWebProto.SmartContract.ABI, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n    /**\n     * @public\n     * @override\n     */\n    TronWebProto.SmartContract.ABI.displayName = 'TronWebProto.SmartContract.ABI';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.SmartContract.ABI.Entry = function (opt_data) {\n    jspb.Message.initialize(this, opt_data, 0, -1, TronWebProto.SmartContract.ABI.Entry.repeatedFields_, null);\n};\ngoog.inherits(TronWebProto.SmartContract.ABI.Entry, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n    /**\n     * @public\n     * @override\n     */\n    TronWebProto.SmartContract.ABI.Entry.displayName = 'TronWebProto.SmartContract.ABI.Entry';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.SmartContract.ABI.Entry.Param = function (opt_data) {\n    jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.SmartContract.ABI.Entry.Param, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n    /**\n     * @public\n     * @override\n     */\n    TronWebProto.SmartContract.ABI.Entry.Param.displayName = 'TronWebProto.SmartContract.ABI.Entry.Param';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.ContractState = function (opt_data) {\n    jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.ContractState, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n    /**\n     * @public\n     * @override\n     */\n    TronWebProto.ContractState.displayName = 'TronWebProto.ContractState';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.CreateSmartContract = function (opt_data) {\n    jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.CreateSmartContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n    /**\n     * @public\n     * @override\n     */\n    TronWebProto.CreateSmartContract.displayName = 'TronWebProto.CreateSmartContract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.TriggerSmartContract = function (opt_data) {\n    jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.TriggerSmartContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n    /**\n     * @public\n     * @override\n     */\n    TronWebProto.TriggerSmartContract.displayName = 'TronWebProto.TriggerSmartContract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.ClearABIContract = function (opt_data) {\n    jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.ClearABIContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n    /**\n     * @public\n     * @override\n     */\n    TronWebProto.ClearABIContract.displayName = 'TronWebProto.ClearABIContract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.UpdateSettingContract = function (opt_data) {\n    jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.UpdateSettingContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n    /**\n     * @public\n     * @override\n     */\n    TronWebProto.UpdateSettingContract.displayName = 'TronWebProto.UpdateSettingContract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.UpdateEnergyLimitContract = function (opt_data) {\n    jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.UpdateEnergyLimitContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n    /**\n     * @public\n     * @override\n     */\n    TronWebProto.UpdateEnergyLimitContract.displayName = 'TronWebProto.UpdateEnergyLimitContract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.SmartContractDataWrapper = function (opt_data) {\n    jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.SmartContractDataWrapper, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n    /**\n     * @public\n     * @override\n     */\n    TronWebProto.SmartContractDataWrapper.displayName = 'TronWebProto.SmartContractDataWrapper';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n    /**\n     * Creates an object representation of this proto.\n     * Field names that are reserved in JavaScript and will be renamed to pb_name.\n     * Optional fields that are not set will be set to undefined.\n     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n     * For the list of reserved names please see:\n     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n     * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n     *     JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @return {!Object}\n     */\n    TronWebProto.SmartContract.prototype.toObject = function (opt_includeInstance) {\n        return TronWebProto.SmartContract.toObject(opt_includeInstance, this);\n    };\n\n    /**\n     * Static version of the {@see toObject} method.\n     * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n     *     the JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @param {!TronWebProto.SmartContract} msg The msg instance to transform.\n     * @return {!Object}\n     * @suppress {unusedLocalVariables} f is only used for nested messages\n     */\n    TronWebProto.SmartContract.toObject = function (includeInstance, msg) {\n        var f,\n            obj = {\n                originAddress: msg.getOriginAddress_asB64(),\n                contractAddress: msg.getContractAddress_asB64(),\n                abi: (f = msg.getAbi()) && TronWebProto.SmartContract.ABI.toObject(includeInstance, f),\n                bytecode: msg.getBytecode_asB64(),\n                callValue: jspb.Message.getFieldWithDefault(msg, 5, 0),\n                consumeUserResourcePercent: jspb.Message.getFieldWithDefault(msg, 6, 0),\n                name: jspb.Message.getFieldWithDefault(msg, 7, ''),\n                originEnergyLimit: jspb.Message.getFieldWithDefault(msg, 8, 0),\n                codeHash: msg.getCodeHash_asB64(),\n                trxHash: msg.getTrxHash_asB64(),\n                version: jspb.Message.getFieldWithDefault(msg, 11, 0),\n            };\n\n        if (includeInstance) {\n            obj.$jspbMessageInstance = msg;\n        }\n        return obj;\n    };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.SmartContract}\n */\nTronWebProto.SmartContract.deserializeBinary = function (bytes) {\n    var reader = new jspb.BinaryReader(bytes);\n    var msg = new TronWebProto.SmartContract();\n    return TronWebProto.SmartContract.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.SmartContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.SmartContract}\n */\nTronWebProto.SmartContract.deserializeBinaryFromReader = function (msg, reader) {\n    while (reader.nextField()) {\n        if (reader.isEndGroup()) {\n            break;\n        }\n        var field = reader.getFieldNumber();\n        switch (field) {\n            case 1:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setOriginAddress(value);\n                break;\n            case 2:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setContractAddress(value);\n                break;\n            case 3:\n                var value = new TronWebProto.SmartContract.ABI();\n                reader.readMessage(value, TronWebProto.SmartContract.ABI.deserializeBinaryFromReader);\n                msg.setAbi(value);\n                break;\n            case 4:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setBytecode(value);\n                break;\n            case 5:\n                var value = /** @type {number} */ (reader.readInt64());\n                msg.setCallValue(value);\n                break;\n            case 6:\n                var value = /** @type {number} */ (reader.readInt64());\n                msg.setConsumeUserResourcePercent(value);\n                break;\n            case 7:\n                var value = /** @type {string} */ (reader.readString());\n                msg.setName(value);\n                break;\n            case 8:\n                var value = /** @type {number} */ (reader.readInt64());\n                msg.setOriginEnergyLimit(value);\n                break;\n            case 9:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setCodeHash(value);\n                break;\n            case 10:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setTrxHash(value);\n                break;\n            case 11:\n                var value = /** @type {number} */ (reader.readInt32());\n                msg.setVersion(value);\n                break;\n            default:\n                reader.skipField();\n                break;\n        }\n    }\n    return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.SmartContract.prototype.serializeBinary = function () {\n    var writer = new jspb.BinaryWriter();\n    TronWebProto.SmartContract.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.SmartContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.SmartContract.serializeBinaryToWriter = function (message, writer) {\n    var f = undefined;\n    f = message.getOriginAddress_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(1, f);\n    }\n    f = message.getContractAddress_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(2, f);\n    }\n    f = message.getAbi();\n    if (f != null) {\n        writer.writeMessage(3, f, TronWebProto.SmartContract.ABI.serializeBinaryToWriter);\n    }\n    f = message.getBytecode_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(4, f);\n    }\n    f = message.getCallValue();\n    if (f !== 0) {\n        writer.writeInt64(5, f);\n    }\n    f = message.getConsumeUserResourcePercent();\n    if (f !== 0) {\n        writer.writeInt64(6, f);\n    }\n    f = message.getName();\n    if (f.length > 0) {\n        writer.writeString(7, f);\n    }\n    f = message.getOriginEnergyLimit();\n    if (f !== 0) {\n        writer.writeInt64(8, f);\n    }\n    f = message.getCodeHash_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(9, f);\n    }\n    f = message.getTrxHash_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(10, f);\n    }\n    f = message.getVersion();\n    if (f !== 0) {\n        writer.writeInt32(11, f);\n    }\n};\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nTronWebProto.SmartContract.ABI.repeatedFields_ = [1];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n    /**\n     * Creates an object representation of this proto.\n     * Field names that are reserved in JavaScript and will be renamed to pb_name.\n     * Optional fields that are not set will be set to undefined.\n     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n     * For the list of reserved names please see:\n     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n     * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n     *     JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @return {!Object}\n     */\n    TronWebProto.SmartContract.ABI.prototype.toObject = function (opt_includeInstance) {\n        return TronWebProto.SmartContract.ABI.toObject(opt_includeInstance, this);\n    };\n\n    /**\n     * Static version of the {@see toObject} method.\n     * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n     *     the JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @param {!TronWebProto.SmartContract.ABI} msg The msg instance to transform.\n     * @return {!Object}\n     * @suppress {unusedLocalVariables} f is only used for nested messages\n     */\n    TronWebProto.SmartContract.ABI.toObject = function (includeInstance, msg) {\n        var f,\n            obj = {\n                entrysList: jspb.Message.toObjectList(\n                    msg.getEntrysList(),\n                    TronWebProto.SmartContract.ABI.Entry.toObject,\n                    includeInstance\n                ),\n            };\n\n        if (includeInstance) {\n            obj.$jspbMessageInstance = msg;\n        }\n        return obj;\n    };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.SmartContract.ABI}\n */\nTronWebProto.SmartContract.ABI.deserializeBinary = function (bytes) {\n    var reader = new jspb.BinaryReader(bytes);\n    var msg = new TronWebProto.SmartContract.ABI();\n    return TronWebProto.SmartContract.ABI.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.SmartContract.ABI} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.SmartContract.ABI}\n */\nTronWebProto.SmartContract.ABI.deserializeBinaryFromReader = function (msg, reader) {\n    while (reader.nextField()) {\n        if (reader.isEndGroup()) {\n            break;\n        }\n        var field = reader.getFieldNumber();\n        switch (field) {\n            case 1:\n                var value = new TronWebProto.SmartContract.ABI.Entry();\n                reader.readMessage(value, TronWebProto.SmartContract.ABI.Entry.deserializeBinaryFromReader);\n                msg.addEntrys(value);\n                break;\n            default:\n                reader.skipField();\n                break;\n        }\n    }\n    return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.SmartContract.ABI.prototype.serializeBinary = function () {\n    var writer = new jspb.BinaryWriter();\n    TronWebProto.SmartContract.ABI.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.SmartContract.ABI} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.SmartContract.ABI.serializeBinaryToWriter = function (message, writer) {\n    var f = undefined;\n    f = message.getEntrysList();\n    if (f.length > 0) {\n        writer.writeRepeatedMessage(1, f, TronWebProto.SmartContract.ABI.Entry.serializeBinaryToWriter);\n    }\n};\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nTronWebProto.SmartContract.ABI.Entry.repeatedFields_ = [4, 5];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n    /**\n     * Creates an object representation of this proto.\n     * Field names that are reserved in JavaScript and will be renamed to pb_name.\n     * Optional fields that are not set will be set to undefined.\n     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n     * For the list of reserved names please see:\n     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n     * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n     *     JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @return {!Object}\n     */\n    TronWebProto.SmartContract.ABI.Entry.prototype.toObject = function (opt_includeInstance) {\n        return TronWebProto.SmartContract.ABI.Entry.toObject(opt_includeInstance, this);\n    };\n\n    /**\n     * Static version of the {@see toObject} method.\n     * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n     *     the JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @param {!TronWebProto.SmartContract.ABI.Entry} msg The msg instance to transform.\n     * @return {!Object}\n     * @suppress {unusedLocalVariables} f is only used for nested messages\n     */\n    TronWebProto.SmartContract.ABI.Entry.toObject = function (includeInstance, msg) {\n        var f,\n            obj = {\n                anonymous: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),\n                constant: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),\n                name: jspb.Message.getFieldWithDefault(msg, 3, ''),\n                inputsList: jspb.Message.toObjectList(\n                    msg.getInputsList(),\n                    TronWebProto.SmartContract.ABI.Entry.Param.toObject,\n                    includeInstance\n                ),\n                outputsList: jspb.Message.toObjectList(\n                    msg.getOutputsList(),\n                    TronWebProto.SmartContract.ABI.Entry.Param.toObject,\n                    includeInstance\n                ),\n                type: jspb.Message.getFieldWithDefault(msg, 6, 0),\n                payable: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),\n                statemutability: jspb.Message.getFieldWithDefault(msg, 8, 0),\n            };\n\n        if (includeInstance) {\n            obj.$jspbMessageInstance = msg;\n        }\n        return obj;\n    };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.SmartContract.ABI.Entry}\n */\nTronWebProto.SmartContract.ABI.Entry.deserializeBinary = function (bytes) {\n    var reader = new jspb.BinaryReader(bytes);\n    var msg = new TronWebProto.SmartContract.ABI.Entry();\n    return TronWebProto.SmartContract.ABI.Entry.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.SmartContract.ABI.Entry} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.SmartContract.ABI.Entry}\n */\nTronWebProto.SmartContract.ABI.Entry.deserializeBinaryFromReader = function (msg, reader) {\n    while (reader.nextField()) {\n        if (reader.isEndGroup()) {\n            break;\n        }\n        var field = reader.getFieldNumber();\n        switch (field) {\n            case 1:\n                var value = /** @type {boolean} */ (reader.readBool());\n                msg.setAnonymous(value);\n                break;\n            case 2:\n                var value = /** @type {boolean} */ (reader.readBool());\n                msg.setConstant(value);\n                break;\n            case 3:\n                var value = /** @type {string} */ (reader.readString());\n                msg.setName(value);\n                break;\n            case 4:\n                var value = new TronWebProto.SmartContract.ABI.Entry.Param();\n                reader.readMessage(value, TronWebProto.SmartContract.ABI.Entry.Param.deserializeBinaryFromReader);\n                msg.addInputs(value);\n                break;\n            case 5:\n                var value = new TronWebProto.SmartContract.ABI.Entry.Param();\n                reader.readMessage(value, TronWebProto.SmartContract.ABI.Entry.Param.deserializeBinaryFromReader);\n                msg.addOutputs(value);\n                break;\n            case 6:\n                var value = /** @type {!TronWebProto.SmartContract.ABI.Entry.EntryType} */ (reader.readEnum());\n                msg.setType(value);\n                break;\n            case 7:\n                var value = /** @type {boolean} */ (reader.readBool());\n                msg.setPayable(value);\n                break;\n            case 8:\n                var value = /** @type {!TronWebProto.SmartContract.ABI.Entry.StateMutabilityType} */ (reader.readEnum());\n                msg.setStatemutability(value);\n                break;\n            default:\n                reader.skipField();\n                break;\n        }\n    }\n    return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.SmartContract.ABI.Entry.prototype.serializeBinary = function () {\n    var writer = new jspb.BinaryWriter();\n    TronWebProto.SmartContract.ABI.Entry.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.SmartContract.ABI.Entry} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.SmartContract.ABI.Entry.serializeBinaryToWriter = function (message, writer) {\n    var f = undefined;\n    f = message.getAnonymous();\n    if (f) {\n        writer.writeBool(1, f);\n    }\n    f = message.getConstant();\n    if (f) {\n        writer.writeBool(2, f);\n    }\n    f = message.getName();\n    if (f.length > 0) {\n        writer.writeString(3, f);\n    }\n    f = message.getInputsList();\n    if (f.length > 0) {\n        writer.writeRepeatedMessage(4, f, TronWebProto.SmartContract.ABI.Entry.Param.serializeBinaryToWriter);\n    }\n    f = message.getOutputsList();\n    if (f.length > 0) {\n        writer.writeRepeatedMessage(5, f, TronWebProto.SmartContract.ABI.Entry.Param.serializeBinaryToWriter);\n    }\n    f = message.getType();\n    if (f !== 0.0) {\n        writer.writeEnum(6, f);\n    }\n    f = message.getPayable();\n    if (f) {\n        writer.writeBool(7, f);\n    }\n    f = message.getStatemutability();\n    if (f !== 0.0) {\n        writer.writeEnum(8, f);\n    }\n};\n\n/**\n * @enum {number}\n */\nTronWebProto.SmartContract.ABI.Entry.EntryType = {\n    UNKNOWNENTRYTYPE: 0,\n    CONSTRUCTOR: 1,\n    FUNCTION: 2,\n    EVENT: 3,\n    FALLBACK: 4,\n    RECEIVE: 5,\n    ERROR: 6,\n};\n\n/**\n * @enum {number}\n */\nTronWebProto.SmartContract.ABI.Entry.StateMutabilityType = {\n    UNKNOWNMUTABILITYTYPE: 0,\n    PURE: 1,\n    VIEW: 2,\n    NONPAYABLE: 3,\n    PAYABLE: 4,\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n    /**\n     * Creates an object representation of this proto.\n     * Field names that are reserved in JavaScript and will be renamed to pb_name.\n     * Optional fields that are not set will be set to undefined.\n     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n     * For the list of reserved names please see:\n     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n     * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n     *     JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @return {!Object}\n     */\n    TronWebProto.SmartContract.ABI.Entry.Param.prototype.toObject = function (opt_includeInstance) {\n        return TronWebProto.SmartContract.ABI.Entry.Param.toObject(opt_includeInstance, this);\n    };\n\n    /**\n     * Static version of the {@see toObject} method.\n     * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n     *     the JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @param {!TronWebProto.SmartContract.ABI.Entry.Param} msg The msg instance to transform.\n     * @return {!Object}\n     * @suppress {unusedLocalVariables} f is only used for nested messages\n     */\n    TronWebProto.SmartContract.ABI.Entry.Param.toObject = function (includeInstance, msg) {\n        var f,\n            obj = {\n                indexed: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),\n                name: jspb.Message.getFieldWithDefault(msg, 2, ''),\n                type: jspb.Message.getFieldWithDefault(msg, 3, ''),\n            };\n\n        if (includeInstance) {\n            obj.$jspbMessageInstance = msg;\n        }\n        return obj;\n    };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.SmartContract.ABI.Entry.Param}\n */\nTronWebProto.SmartContract.ABI.Entry.Param.deserializeBinary = function (bytes) {\n    var reader = new jspb.BinaryReader(bytes);\n    var msg = new TronWebProto.SmartContract.ABI.Entry.Param();\n    return TronWebProto.SmartContract.ABI.Entry.Param.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.SmartContract.ABI.Entry.Param} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.SmartContract.ABI.Entry.Param}\n */\nTronWebProto.SmartContract.ABI.Entry.Param.deserializeBinaryFromReader = function (msg, reader) {\n    while (reader.nextField()) {\n        if (reader.isEndGroup()) {\n            break;\n        }\n        var field = reader.getFieldNumber();\n        switch (field) {\n            case 1:\n                var value = /** @type {boolean} */ (reader.readBool());\n                msg.setIndexed(value);\n                break;\n            case 2:\n                var value = /** @type {string} */ (reader.readString());\n                msg.setName(value);\n                break;\n            case 3:\n                var value = /** @type {string} */ (reader.readString());\n                msg.setType(value);\n                break;\n            default:\n                reader.skipField();\n                break;\n        }\n    }\n    return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.SmartContract.ABI.Entry.Param.prototype.serializeBinary = function () {\n    var writer = new jspb.BinaryWriter();\n    TronWebProto.SmartContract.ABI.Entry.Param.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.SmartContract.ABI.Entry.Param} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.SmartContract.ABI.Entry.Param.serializeBinaryToWriter = function (message, writer) {\n    var f = undefined;\n    f = message.getIndexed();\n    if (f) {\n        writer.writeBool(1, f);\n    }\n    f = message.getName();\n    if (f.length > 0) {\n        writer.writeString(2, f);\n    }\n    f = message.getType();\n    if (f.length > 0) {\n        writer.writeString(3, f);\n    }\n};\n\n/**\n * optional bool indexed = 1;\n * @return {boolean}\n */\nTronWebProto.SmartContract.ABI.Entry.Param.prototype.getIndexed = function () {\n    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));\n};\n\n/**\n * @param {boolean} value\n * @return {!TronWebProto.SmartContract.ABI.Entry.Param} returns this\n */\nTronWebProto.SmartContract.ABI.Entry.Param.prototype.setIndexed = function (value) {\n    return jspb.Message.setProto3BooleanField(this, 1, value);\n};\n\n/**\n * optional string name = 2;\n * @return {string}\n */\nTronWebProto.SmartContract.ABI.Entry.Param.prototype.getName = function () {\n    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));\n};\n\n/**\n * @param {string} value\n * @return {!TronWebProto.SmartContract.ABI.Entry.Param} returns this\n */\nTronWebProto.SmartContract.ABI.Entry.Param.prototype.setName = function (value) {\n    return jspb.Message.setProto3StringField(this, 2, value);\n};\n\n/**\n * optional string type = 3;\n * @return {string}\n */\nTronWebProto.SmartContract.ABI.Entry.Param.prototype.getType = function () {\n    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));\n};\n\n/**\n * @param {string} value\n * @return {!TronWebProto.SmartContract.ABI.Entry.Param} returns this\n */\nTronWebProto.SmartContract.ABI.Entry.Param.prototype.setType = function (value) {\n    return jspb.Message.setProto3StringField(this, 3, value);\n};\n\n/**\n * optional bool anonymous = 1;\n * @return {boolean}\n */\nTronWebProto.SmartContract.ABI.Entry.prototype.getAnonymous = function () {\n    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));\n};\n\n/**\n * @param {boolean} value\n * @return {!TronWebProto.SmartContract.ABI.Entry} returns this\n */\nTronWebProto.SmartContract.ABI.Entry.prototype.setAnonymous = function (value) {\n    return jspb.Message.setProto3BooleanField(this, 1, value);\n};\n\n/**\n * optional bool constant = 2;\n * @return {boolean}\n */\nTronWebProto.SmartContract.ABI.Entry.prototype.getConstant = function () {\n    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));\n};\n\n/**\n * @param {boolean} value\n * @return {!TronWebProto.SmartContract.ABI.Entry} returns this\n */\nTronWebProto.SmartContract.ABI.Entry.prototype.setConstant = function (value) {\n    return jspb.Message.setProto3BooleanField(this, 2, value);\n};\n\n/**\n * optional string name = 3;\n * @return {string}\n */\nTronWebProto.SmartContract.ABI.Entry.prototype.getName = function () {\n    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));\n};\n\n/**\n * @param {string} value\n * @return {!TronWebProto.SmartContract.ABI.Entry} returns this\n */\nTronWebProto.SmartContract.ABI.Entry.prototype.setName = function (value) {\n    return jspb.Message.setProto3StringField(this, 3, value);\n};\n\n/**\n * repeated Param inputs = 4;\n * @return {!Array<!TronWebProto.SmartContract.ABI.Entry.Param>}\n */\nTronWebProto.SmartContract.ABI.Entry.prototype.getInputsList = function () {\n    return /** @type{!Array<!TronWebProto.SmartContract.ABI.Entry.Param>} */ (\n        jspb.Message.getRepeatedWrapperField(this, TronWebProto.SmartContract.ABI.Entry.Param, 4)\n    );\n};\n\n/**\n * @param {!Array<!TronWebProto.SmartContract.ABI.Entry.Param>} value\n * @return {!TronWebProto.SmartContract.ABI.Entry} returns this\n */\nTronWebProto.SmartContract.ABI.Entry.prototype.setInputsList = function (value) {\n    return jspb.Message.setRepeatedWrapperField(this, 4, value);\n};\n\n/**\n * @param {!TronWebProto.SmartContract.ABI.Entry.Param=} opt_value\n * @param {number=} opt_index\n * @return {!TronWebProto.SmartContract.ABI.Entry.Param}\n */\nTronWebProto.SmartContract.ABI.Entry.prototype.addInputs = function (opt_value, opt_index) {\n    return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, TronWebProto.SmartContract.ABI.Entry.Param, opt_index);\n};\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!TronWebProto.SmartContract.ABI.Entry} returns this\n */\nTronWebProto.SmartContract.ABI.Entry.prototype.clearInputsList = function () {\n    return this.setInputsList([]);\n};\n\n/**\n * repeated Param outputs = 5;\n * @return {!Array<!TronWebProto.SmartContract.ABI.Entry.Param>}\n */\nTronWebProto.SmartContract.ABI.Entry.prototype.getOutputsList = function () {\n    return /** @type{!Array<!TronWebProto.SmartContract.ABI.Entry.Param>} */ (\n        jspb.Message.getRepeatedWrapperField(this, TronWebProto.SmartContract.ABI.Entry.Param, 5)\n    );\n};\n\n/**\n * @param {!Array<!TronWebProto.SmartContract.ABI.Entry.Param>} value\n * @return {!TronWebProto.SmartContract.ABI.Entry} returns this\n */\nTronWebProto.SmartContract.ABI.Entry.prototype.setOutputsList = function (value) {\n    return jspb.Message.setRepeatedWrapperField(this, 5, value);\n};\n\n/**\n * @param {!TronWebProto.SmartContract.ABI.Entry.Param=} opt_value\n * @param {number=} opt_index\n * @return {!TronWebProto.SmartContract.ABI.Entry.Param}\n */\nTronWebProto.SmartContract.ABI.Entry.prototype.addOutputs = function (opt_value, opt_index) {\n    return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, TronWebProto.SmartContract.ABI.Entry.Param, opt_index);\n};\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!TronWebProto.SmartContract.ABI.Entry} returns this\n */\nTronWebProto.SmartContract.ABI.Entry.prototype.clearOutputsList = function () {\n    return this.setOutputsList([]);\n};\n\n/**\n * optional EntryType type = 6;\n * @return {!TronWebProto.SmartContract.ABI.Entry.EntryType}\n */\nTronWebProto.SmartContract.ABI.Entry.prototype.getType = function () {\n    return /** @type {!TronWebProto.SmartContract.ABI.Entry.EntryType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));\n};\n\n/**\n * @param {!TronWebProto.SmartContract.ABI.Entry.EntryType} value\n * @return {!TronWebProto.SmartContract.ABI.Entry} returns this\n */\nTronWebProto.SmartContract.ABI.Entry.prototype.setType = function (value) {\n    return jspb.Message.setProto3EnumField(this, 6, value);\n};\n\n/**\n * optional bool payable = 7;\n * @return {boolean}\n */\nTronWebProto.SmartContract.ABI.Entry.prototype.getPayable = function () {\n    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));\n};\n\n/**\n * @param {boolean} value\n * @return {!TronWebProto.SmartContract.ABI.Entry} returns this\n */\nTronWebProto.SmartContract.ABI.Entry.prototype.setPayable = function (value) {\n    return jspb.Message.setProto3BooleanField(this, 7, value);\n};\n\n/**\n * optional StateMutabilityType stateMutability = 8;\n * @return {!TronWebProto.SmartContract.ABI.Entry.StateMutabilityType}\n */\nTronWebProto.SmartContract.ABI.Entry.prototype.getStatemutability = function () {\n    return /** @type {!TronWebProto.SmartContract.ABI.Entry.StateMutabilityType} */ (\n        jspb.Message.getFieldWithDefault(this, 8, 0)\n    );\n};\n\n/**\n * @param {!TronWebProto.SmartContract.ABI.Entry.StateMutabilityType} value\n * @return {!TronWebProto.SmartContract.ABI.Entry} returns this\n */\nTronWebProto.SmartContract.ABI.Entry.prototype.setStatemutability = function (value) {\n    return jspb.Message.setProto3EnumField(this, 8, value);\n};\n\n/**\n * repeated Entry entrys = 1;\n * @return {!Array<!TronWebProto.SmartContract.ABI.Entry>}\n */\nTronWebProto.SmartContract.ABI.prototype.getEntrysList = function () {\n    return /** @type{!Array<!TronWebProto.SmartContract.ABI.Entry>} */ (\n        jspb.Message.getRepeatedWrapperField(this, TronWebProto.SmartContract.ABI.Entry, 1)\n    );\n};\n\n/**\n * @param {!Array<!TronWebProto.SmartContract.ABI.Entry>} value\n * @return {!TronWebProto.SmartContract.ABI} returns this\n */\nTronWebProto.SmartContract.ABI.prototype.setEntrysList = function (value) {\n    return jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n\n/**\n * @param {!TronWebProto.SmartContract.ABI.Entry=} opt_value\n * @param {number=} opt_index\n * @return {!TronWebProto.SmartContract.ABI.Entry}\n */\nTronWebProto.SmartContract.ABI.prototype.addEntrys = function (opt_value, opt_index) {\n    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, TronWebProto.SmartContract.ABI.Entry, opt_index);\n};\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!TronWebProto.SmartContract.ABI} returns this\n */\nTronWebProto.SmartContract.ABI.prototype.clearEntrysList = function () {\n    return this.setEntrysList([]);\n};\n\n/**\n * optional bytes origin_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.SmartContract.prototype.getOriginAddress = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));\n};\n\n/**\n * optional bytes origin_address = 1;\n * This is a type-conversion wrapper around `getOriginAddress()`\n * @return {string}\n */\nTronWebProto.SmartContract.prototype.getOriginAddress_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getOriginAddress()));\n};\n\n/**\n * optional bytes origin_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOriginAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.SmartContract.prototype.getOriginAddress_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getOriginAddress()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.SmartContract} returns this\n */\nTronWebProto.SmartContract.prototype.setOriginAddress = function (value) {\n    return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n/**\n * optional bytes contract_address = 2;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.SmartContract.prototype.getContractAddress = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ''));\n};\n\n/**\n * optional bytes contract_address = 2;\n * This is a type-conversion wrapper around `getContractAddress()`\n * @return {string}\n */\nTronWebProto.SmartContract.prototype.getContractAddress_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getContractAddress()));\n};\n\n/**\n * optional bytes contract_address = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getContractAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.SmartContract.prototype.getContractAddress_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getContractAddress()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.SmartContract} returns this\n */\nTronWebProto.SmartContract.prototype.setContractAddress = function (value) {\n    return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n/**\n * optional ABI abi = 3;\n * @return {?TronWebProto.SmartContract.ABI}\n */\nTronWebProto.SmartContract.prototype.getAbi = function () {\n    return /** @type{?TronWebProto.SmartContract.ABI} */ (jspb.Message.getWrapperField(this, TronWebProto.SmartContract.ABI, 3));\n};\n\n/**\n * @param {?TronWebProto.SmartContract.ABI|undefined} value\n * @return {!TronWebProto.SmartContract} returns this\n */\nTronWebProto.SmartContract.prototype.setAbi = function (value) {\n    return jspb.Message.setWrapperField(this, 3, value);\n};\n\n/**\n * Clears the message field making it undefined.\n * @return {!TronWebProto.SmartContract} returns this\n */\nTronWebProto.SmartContract.prototype.clearAbi = function () {\n    return this.setAbi(undefined);\n};\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nTronWebProto.SmartContract.prototype.hasAbi = function () {\n    return jspb.Message.getField(this, 3) != null;\n};\n\n/**\n * optional bytes bytecode = 4;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.SmartContract.prototype.getBytecode = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ''));\n};\n\n/**\n * optional bytes bytecode = 4;\n * This is a type-conversion wrapper around `getBytecode()`\n * @return {string}\n */\nTronWebProto.SmartContract.prototype.getBytecode_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getBytecode()));\n};\n\n/**\n * optional bytes bytecode = 4;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getBytecode()`\n * @return {!Uint8Array}\n */\nTronWebProto.SmartContract.prototype.getBytecode_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getBytecode()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.SmartContract} returns this\n */\nTronWebProto.SmartContract.prototype.setBytecode = function (value) {\n    return jspb.Message.setProto3BytesField(this, 4, value);\n};\n\n/**\n * optional int64 call_value = 5;\n * @return {number}\n */\nTronWebProto.SmartContract.prototype.getCallValue = function () {\n    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));\n};\n\n/**\n * @param {number} value\n * @return {!TronWebProto.SmartContract} returns this\n */\nTronWebProto.SmartContract.prototype.setCallValue = function (value) {\n    return jspb.Message.setProto3IntField(this, 5, value);\n};\n\n/**\n * optional int64 consume_user_resource_percent = 6;\n * @return {number}\n */\nTronWebProto.SmartContract.prototype.getConsumeUserResourcePercent = function () {\n    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));\n};\n\n/**\n * @param {number} value\n * @return {!TronWebProto.SmartContract} returns this\n */\nTronWebProto.SmartContract.prototype.setConsumeUserResourcePercent = function (value) {\n    return jspb.Message.setProto3IntField(this, 6, value);\n};\n\n/**\n * optional string name = 7;\n * @return {string}\n */\nTronWebProto.SmartContract.prototype.getName = function () {\n    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''));\n};\n\n/**\n * @param {string} value\n * @return {!TronWebProto.SmartContract} returns this\n */\nTronWebProto.SmartContract.prototype.setName = function (value) {\n    return jspb.Message.setProto3StringField(this, 7, value);\n};\n\n/**\n * optional int64 origin_energy_limit = 8;\n * @return {number}\n */\nTronWebProto.SmartContract.prototype.getOriginEnergyLimit = function () {\n    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));\n};\n\n/**\n * @param {number} value\n * @return {!TronWebProto.SmartContract} returns this\n */\nTronWebProto.SmartContract.prototype.setOriginEnergyLimit = function (value) {\n    return jspb.Message.setProto3IntField(this, 8, value);\n};\n\n/**\n * optional bytes code_hash = 9;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.SmartContract.prototype.getCodeHash = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ''));\n};\n\n/**\n * optional bytes code_hash = 9;\n * This is a type-conversion wrapper around `getCodeHash()`\n * @return {string}\n */\nTronWebProto.SmartContract.prototype.getCodeHash_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getCodeHash()));\n};\n\n/**\n * optional bytes code_hash = 9;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getCodeHash()`\n * @return {!Uint8Array}\n */\nTronWebProto.SmartContract.prototype.getCodeHash_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getCodeHash()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.SmartContract} returns this\n */\nTronWebProto.SmartContract.prototype.setCodeHash = function (value) {\n    return jspb.Message.setProto3BytesField(this, 9, value);\n};\n\n/**\n * optional bytes trx_hash = 10;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.SmartContract.prototype.getTrxHash = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ''));\n};\n\n/**\n * optional bytes trx_hash = 10;\n * This is a type-conversion wrapper around `getTrxHash()`\n * @return {string}\n */\nTronWebProto.SmartContract.prototype.getTrxHash_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getTrxHash()));\n};\n\n/**\n * optional bytes trx_hash = 10;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getTrxHash()`\n * @return {!Uint8Array}\n */\nTronWebProto.SmartContract.prototype.getTrxHash_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getTrxHash()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.SmartContract} returns this\n */\nTronWebProto.SmartContract.prototype.setTrxHash = function (value) {\n    return jspb.Message.setProto3BytesField(this, 10, value);\n};\n\n/**\n * optional int32 version = 11;\n * @return {number}\n */\nTronWebProto.SmartContract.prototype.getVersion = function () {\n    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));\n};\n\n/**\n * @param {number} value\n * @return {!TronWebProto.SmartContract} returns this\n */\nTronWebProto.SmartContract.prototype.setVersion = function (value) {\n    return jspb.Message.setProto3IntField(this, 11, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n    /**\n     * Creates an object representation of this proto.\n     * Field names that are reserved in JavaScript and will be renamed to pb_name.\n     * Optional fields that are not set will be set to undefined.\n     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n     * For the list of reserved names please see:\n     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n     * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n     *     JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @return {!Object}\n     */\n    TronWebProto.ContractState.prototype.toObject = function (opt_includeInstance) {\n        return TronWebProto.ContractState.toObject(opt_includeInstance, this);\n    };\n\n    /**\n     * Static version of the {@see toObject} method.\n     * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n     *     the JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @param {!TronWebProto.ContractState} msg The msg instance to transform.\n     * @return {!Object}\n     * @suppress {unusedLocalVariables} f is only used for nested messages\n     */\n    TronWebProto.ContractState.toObject = function (includeInstance, msg) {\n        var f,\n            obj = {\n                energyUsage: jspb.Message.getFieldWithDefault(msg, 1, 0),\n                energyFactor: jspb.Message.getFieldWithDefault(msg, 2, 0),\n                updateCycle: jspb.Message.getFieldWithDefault(msg, 3, 0),\n            };\n\n        if (includeInstance) {\n            obj.$jspbMessageInstance = msg;\n        }\n        return obj;\n    };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.ContractState}\n */\nTronWebProto.ContractState.deserializeBinary = function (bytes) {\n    var reader = new jspb.BinaryReader(bytes);\n    var msg = new TronWebProto.ContractState();\n    return TronWebProto.ContractState.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.ContractState} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.ContractState}\n */\nTronWebProto.ContractState.deserializeBinaryFromReader = function (msg, reader) {\n    while (reader.nextField()) {\n        if (reader.isEndGroup()) {\n            break;\n        }\n        var field = reader.getFieldNumber();\n        switch (field) {\n            case 1:\n                var value = /** @type {number} */ (reader.readInt64());\n                msg.setEnergyUsage(value);\n                break;\n            case 2:\n                var value = /** @type {number} */ (reader.readInt64());\n                msg.setEnergyFactor(value);\n                break;\n            case 3:\n                var value = /** @type {number} */ (reader.readInt64());\n                msg.setUpdateCycle(value);\n                break;\n            default:\n                reader.skipField();\n                break;\n        }\n    }\n    return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.ContractState.prototype.serializeBinary = function () {\n    var writer = new jspb.BinaryWriter();\n    TronWebProto.ContractState.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.ContractState} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.ContractState.serializeBinaryToWriter = function (message, writer) {\n    var f = undefined;\n    f = message.getEnergyUsage();\n    if (f !== 0) {\n        writer.writeInt64(1, f);\n    }\n    f = message.getEnergyFactor();\n    if (f !== 0) {\n        writer.writeInt64(2, f);\n    }\n    f = message.getUpdateCycle();\n    if (f !== 0) {\n        writer.writeInt64(3, f);\n    }\n};\n\n/**\n * optional int64 energy_usage = 1;\n * @return {number}\n */\nTronWebProto.ContractState.prototype.getEnergyUsage = function () {\n    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n/**\n * @param {number} value\n * @return {!TronWebProto.ContractState} returns this\n */\nTronWebProto.ContractState.prototype.setEnergyUsage = function (value) {\n    return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n/**\n * optional int64 energy_factor = 2;\n * @return {number}\n */\nTronWebProto.ContractState.prototype.getEnergyFactor = function () {\n    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n/**\n * @param {number} value\n * @return {!TronWebProto.ContractState} returns this\n */\nTronWebProto.ContractState.prototype.setEnergyFactor = function (value) {\n    return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n/**\n * optional int64 update_cycle = 3;\n * @return {number}\n */\nTronWebProto.ContractState.prototype.getUpdateCycle = function () {\n    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n/**\n * @param {number} value\n * @return {!TronWebProto.ContractState} returns this\n */\nTronWebProto.ContractState.prototype.setUpdateCycle = function (value) {\n    return jspb.Message.setProto3IntField(this, 3, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n    /**\n     * Creates an object representation of this proto.\n     * Field names that are reserved in JavaScript and will be renamed to pb_name.\n     * Optional fields that are not set will be set to undefined.\n     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n     * For the list of reserved names please see:\n     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n     * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n     *     JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @return {!Object}\n     */\n    TronWebProto.CreateSmartContract.prototype.toObject = function (opt_includeInstance) {\n        return TronWebProto.CreateSmartContract.toObject(opt_includeInstance, this);\n    };\n\n    /**\n     * Static version of the {@see toObject} method.\n     * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n     *     the JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @param {!TronWebProto.CreateSmartContract} msg The msg instance to transform.\n     * @return {!Object}\n     * @suppress {unusedLocalVariables} f is only used for nested messages\n     */\n    TronWebProto.CreateSmartContract.toObject = function (includeInstance, msg) {\n        var f,\n            obj = {\n                ownerAddress: msg.getOwnerAddress_asB64(),\n                newContract: (f = msg.getNewContract()) && TronWebProto.SmartContract.toObject(includeInstance, f),\n                callTokenValue: jspb.Message.getFieldWithDefault(msg, 3, 0),\n                tokenId: jspb.Message.getFieldWithDefault(msg, 4, 0),\n            };\n\n        if (includeInstance) {\n            obj.$jspbMessageInstance = msg;\n        }\n        return obj;\n    };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.CreateSmartContract}\n */\nTronWebProto.CreateSmartContract.deserializeBinary = function (bytes) {\n    var reader = new jspb.BinaryReader(bytes);\n    var msg = new TronWebProto.CreateSmartContract();\n    return TronWebProto.CreateSmartContract.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.CreateSmartContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.CreateSmartContract}\n */\nTronWebProto.CreateSmartContract.deserializeBinaryFromReader = function (msg, reader) {\n    while (reader.nextField()) {\n        if (reader.isEndGroup()) {\n            break;\n        }\n        var field = reader.getFieldNumber();\n        switch (field) {\n            case 1:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setOwnerAddress(value);\n                break;\n            case 2:\n                var value = new TronWebProto.SmartContract();\n                reader.readMessage(value, TronWebProto.SmartContract.deserializeBinaryFromReader);\n                msg.setNewContract(value);\n                break;\n            case 3:\n                var value = /** @type {number} */ (reader.readInt64());\n                msg.setCallTokenValue(value);\n                break;\n            case 4:\n                var value = /** @type {number} */ (reader.readInt64());\n                msg.setTokenId(value);\n                break;\n            default:\n                reader.skipField();\n                break;\n        }\n    }\n    return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.CreateSmartContract.prototype.serializeBinary = function () {\n    var writer = new jspb.BinaryWriter();\n    TronWebProto.CreateSmartContract.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.CreateSmartContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.CreateSmartContract.serializeBinaryToWriter = function (message, writer) {\n    var f = undefined;\n    f = message.getOwnerAddress_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(1, f);\n    }\n    f = message.getNewContract();\n    if (f != null) {\n        writer.writeMessage(2, f, TronWebProto.SmartContract.serializeBinaryToWriter);\n    }\n    f = message.getCallTokenValue();\n    if (f !== 0) {\n        writer.writeInt64(3, f);\n    }\n    f = message.getTokenId();\n    if (f !== 0) {\n        writer.writeInt64(4, f);\n    }\n};\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.CreateSmartContract.prototype.getOwnerAddress = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));\n};\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.CreateSmartContract.prototype.getOwnerAddress_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getOwnerAddress()));\n};\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.CreateSmartContract.prototype.getOwnerAddress_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getOwnerAddress()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.CreateSmartContract} returns this\n */\nTronWebProto.CreateSmartContract.prototype.setOwnerAddress = function (value) {\n    return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n/**\n * optional SmartContract new_contract = 2;\n * @return {?TronWebProto.SmartContract}\n */\nTronWebProto.CreateSmartContract.prototype.getNewContract = function () {\n    return /** @type{?TronWebProto.SmartContract} */ (jspb.Message.getWrapperField(this, TronWebProto.SmartContract, 2));\n};\n\n/**\n * @param {?TronWebProto.SmartContract|undefined} value\n * @return {!TronWebProto.CreateSmartContract} returns this\n */\nTronWebProto.CreateSmartContract.prototype.setNewContract = function (value) {\n    return jspb.Message.setWrapperField(this, 2, value);\n};\n\n/**\n * Clears the message field making it undefined.\n * @return {!TronWebProto.CreateSmartContract} returns this\n */\nTronWebProto.CreateSmartContract.prototype.clearNewContract = function () {\n    return this.setNewContract(undefined);\n};\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nTronWebProto.CreateSmartContract.prototype.hasNewContract = function () {\n    return jspb.Message.getField(this, 2) != null;\n};\n\n/**\n * optional int64 call_token_value = 3;\n * @return {number}\n */\nTronWebProto.CreateSmartContract.prototype.getCallTokenValue = function () {\n    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n/**\n * @param {number} value\n * @return {!TronWebProto.CreateSmartContract} returns this\n */\nTronWebProto.CreateSmartContract.prototype.setCallTokenValue = function (value) {\n    return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n/**\n * optional int64 token_id = 4;\n * @return {number}\n */\nTronWebProto.CreateSmartContract.prototype.getTokenId = function () {\n    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n/**\n * @param {number} value\n * @return {!TronWebProto.CreateSmartContract} returns this\n */\nTronWebProto.CreateSmartContract.prototype.setTokenId = function (value) {\n    return jspb.Message.setProto3IntField(this, 4, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n    /**\n     * Creates an object representation of this proto.\n     * Field names that are reserved in JavaScript and will be renamed to pb_name.\n     * Optional fields that are not set will be set to undefined.\n     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n     * For the list of reserved names please see:\n     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n     * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n     *     JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @return {!Object}\n     */\n    TronWebProto.TriggerSmartContract.prototype.toObject = function (opt_includeInstance) {\n        return TronWebProto.TriggerSmartContract.toObject(opt_includeInstance, this);\n    };\n\n    /**\n     * Static version of the {@see toObject} method.\n     * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n     *     the JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @param {!TronWebProto.TriggerSmartContract} msg The msg instance to transform.\n     * @return {!Object}\n     * @suppress {unusedLocalVariables} f is only used for nested messages\n     */\n    TronWebProto.TriggerSmartContract.toObject = function (includeInstance, msg) {\n        var f,\n            obj = {\n                ownerAddress: msg.getOwnerAddress_asB64(),\n                contractAddress: msg.getContractAddress_asB64(),\n                callValue: jspb.Message.getFieldWithDefault(msg, 3, 0),\n                data: msg.getData_asB64(),\n                callTokenValue: jspb.Message.getFieldWithDefault(msg, 5, 0),\n                tokenId: jspb.Message.getFieldWithDefault(msg, 6, 0),\n            };\n\n        if (includeInstance) {\n            obj.$jspbMessageInstance = msg;\n        }\n        return obj;\n    };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.TriggerSmartContract}\n */\nTronWebProto.TriggerSmartContract.deserializeBinary = function (bytes) {\n    var reader = new jspb.BinaryReader(bytes);\n    var msg = new TronWebProto.TriggerSmartContract();\n    return TronWebProto.TriggerSmartContract.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.TriggerSmartContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.TriggerSmartContract}\n */\nTronWebProto.TriggerSmartContract.deserializeBinaryFromReader = function (msg, reader) {\n    while (reader.nextField()) {\n        if (reader.isEndGroup()) {\n            break;\n        }\n        var field = reader.getFieldNumber();\n        switch (field) {\n            case 1:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setOwnerAddress(value);\n                break;\n            case 2:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setContractAddress(value);\n                break;\n            case 3:\n                var value = /** @type {number} */ (reader.readInt64());\n                msg.setCallValue(value);\n                break;\n            case 4:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setData(value);\n                break;\n            case 5:\n                var value = /** @type {number} */ (reader.readInt64());\n                msg.setCallTokenValue(value);\n                break;\n            case 6:\n                var value = /** @type {number} */ (reader.readInt64());\n                msg.setTokenId(value);\n                break;\n            default:\n                reader.skipField();\n                break;\n        }\n    }\n    return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.TriggerSmartContract.prototype.serializeBinary = function () {\n    var writer = new jspb.BinaryWriter();\n    TronWebProto.TriggerSmartContract.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.TriggerSmartContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.TriggerSmartContract.serializeBinaryToWriter = function (message, writer) {\n    var f = undefined;\n    f = message.getOwnerAddress_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(1, f);\n    }\n    f = message.getContractAddress_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(2, f);\n    }\n    f = message.getCallValue();\n    if (f !== 0) {\n        writer.writeInt64(3, f);\n    }\n    f = message.getData_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(4, f);\n    }\n    f = message.getCallTokenValue();\n    if (f !== 0) {\n        writer.writeInt64(5, f);\n    }\n    f = message.getTokenId();\n    if (f !== 0) {\n        writer.writeInt64(6, f);\n    }\n};\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.TriggerSmartContract.prototype.getOwnerAddress = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));\n};\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.TriggerSmartContract.prototype.getOwnerAddress_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getOwnerAddress()));\n};\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.TriggerSmartContract.prototype.getOwnerAddress_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getOwnerAddress()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.TriggerSmartContract} returns this\n */\nTronWebProto.TriggerSmartContract.prototype.setOwnerAddress = function (value) {\n    return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n/**\n * optional bytes contract_address = 2;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.TriggerSmartContract.prototype.getContractAddress = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ''));\n};\n\n/**\n * optional bytes contract_address = 2;\n * This is a type-conversion wrapper around `getContractAddress()`\n * @return {string}\n */\nTronWebProto.TriggerSmartContract.prototype.getContractAddress_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getContractAddress()));\n};\n\n/**\n * optional bytes contract_address = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getContractAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.TriggerSmartContract.prototype.getContractAddress_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getContractAddress()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.TriggerSmartContract} returns this\n */\nTronWebProto.TriggerSmartContract.prototype.setContractAddress = function (value) {\n    return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n/**\n * optional int64 call_value = 3;\n * @return {number}\n */\nTronWebProto.TriggerSmartContract.prototype.getCallValue = function () {\n    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n/**\n * @param {number} value\n * @return {!TronWebProto.TriggerSmartContract} returns this\n */\nTronWebProto.TriggerSmartContract.prototype.setCallValue = function (value) {\n    return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n/**\n * optional bytes data = 4;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.TriggerSmartContract.prototype.getData = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ''));\n};\n\n/**\n * optional bytes data = 4;\n * This is a type-conversion wrapper around `getData()`\n * @return {string}\n */\nTronWebProto.TriggerSmartContract.prototype.getData_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getData()));\n};\n\n/**\n * optional bytes data = 4;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getData()`\n * @return {!Uint8Array}\n */\nTronWebProto.TriggerSmartContract.prototype.getData_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getData()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.TriggerSmartContract} returns this\n */\nTronWebProto.TriggerSmartContract.prototype.setData = function (value) {\n    return jspb.Message.setProto3BytesField(this, 4, value);\n};\n\n/**\n * optional int64 call_token_value = 5;\n * @return {number}\n */\nTronWebProto.TriggerSmartContract.prototype.getCallTokenValue = function () {\n    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));\n};\n\n/**\n * @param {number} value\n * @return {!TronWebProto.TriggerSmartContract} returns this\n */\nTronWebProto.TriggerSmartContract.prototype.setCallTokenValue = function (value) {\n    return jspb.Message.setProto3IntField(this, 5, value);\n};\n\n/**\n * optional int64 token_id = 6;\n * @return {number}\n */\nTronWebProto.TriggerSmartContract.prototype.getTokenId = function () {\n    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));\n};\n\n/**\n * @param {number} value\n * @return {!TronWebProto.TriggerSmartContract} returns this\n */\nTronWebProto.TriggerSmartContract.prototype.setTokenId = function (value) {\n    return jspb.Message.setProto3IntField(this, 6, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n    /**\n     * Creates an object representation of this proto.\n     * Field names that are reserved in JavaScript and will be renamed to pb_name.\n     * Optional fields that are not set will be set to undefined.\n     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n     * For the list of reserved names please see:\n     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n     * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n     *     JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @return {!Object}\n     */\n    TronWebProto.ClearABIContract.prototype.toObject = function (opt_includeInstance) {\n        return TronWebProto.ClearABIContract.toObject(opt_includeInstance, this);\n    };\n\n    /**\n     * Static version of the {@see toObject} method.\n     * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n     *     the JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @param {!TronWebProto.ClearABIContract} msg The msg instance to transform.\n     * @return {!Object}\n     * @suppress {unusedLocalVariables} f is only used for nested messages\n     */\n    TronWebProto.ClearABIContract.toObject = function (includeInstance, msg) {\n        var f,\n            obj = {\n                ownerAddress: msg.getOwnerAddress_asB64(),\n                contractAddress: msg.getContractAddress_asB64(),\n            };\n\n        if (includeInstance) {\n            obj.$jspbMessageInstance = msg;\n        }\n        return obj;\n    };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.ClearABIContract}\n */\nTronWebProto.ClearABIContract.deserializeBinary = function (bytes) {\n    var reader = new jspb.BinaryReader(bytes);\n    var msg = new TronWebProto.ClearABIContract();\n    return TronWebProto.ClearABIContract.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.ClearABIContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.ClearABIContract}\n */\nTronWebProto.ClearABIContract.deserializeBinaryFromReader = function (msg, reader) {\n    while (reader.nextField()) {\n        if (reader.isEndGroup()) {\n            break;\n        }\n        var field = reader.getFieldNumber();\n        switch (field) {\n            case 1:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setOwnerAddress(value);\n                break;\n            case 2:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setContractAddress(value);\n                break;\n            default:\n                reader.skipField();\n                break;\n        }\n    }\n    return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.ClearABIContract.prototype.serializeBinary = function () {\n    var writer = new jspb.BinaryWriter();\n    TronWebProto.ClearABIContract.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.ClearABIContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.ClearABIContract.serializeBinaryToWriter = function (message, writer) {\n    var f = undefined;\n    f = message.getOwnerAddress_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(1, f);\n    }\n    f = message.getContractAddress_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(2, f);\n    }\n};\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.ClearABIContract.prototype.getOwnerAddress = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));\n};\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.ClearABIContract.prototype.getOwnerAddress_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getOwnerAddress()));\n};\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.ClearABIContract.prototype.getOwnerAddress_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getOwnerAddress()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.ClearABIContract} returns this\n */\nTronWebProto.ClearABIContract.prototype.setOwnerAddress = function (value) {\n    return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n/**\n * optional bytes contract_address = 2;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.ClearABIContract.prototype.getContractAddress = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ''));\n};\n\n/**\n * optional bytes contract_address = 2;\n * This is a type-conversion wrapper around `getContractAddress()`\n * @return {string}\n */\nTronWebProto.ClearABIContract.prototype.getContractAddress_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getContractAddress()));\n};\n\n/**\n * optional bytes contract_address = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getContractAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.ClearABIContract.prototype.getContractAddress_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getContractAddress()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.ClearABIContract} returns this\n */\nTronWebProto.ClearABIContract.prototype.setContractAddress = function (value) {\n    return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n    /**\n     * Creates an object representation of this proto.\n     * Field names that are reserved in JavaScript and will be renamed to pb_name.\n     * Optional fields that are not set will be set to undefined.\n     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n     * For the list of reserved names please see:\n     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n     * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n     *     JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @return {!Object}\n     */\n    TronWebProto.UpdateSettingContract.prototype.toObject = function (opt_includeInstance) {\n        return TronWebProto.UpdateSettingContract.toObject(opt_includeInstance, this);\n    };\n\n    /**\n     * Static version of the {@see toObject} method.\n     * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n     *     the JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @param {!TronWebProto.UpdateSettingContract} msg The msg instance to transform.\n     * @return {!Object}\n     * @suppress {unusedLocalVariables} f is only used for nested messages\n     */\n    TronWebProto.UpdateSettingContract.toObject = function (includeInstance, msg) {\n        var f,\n            obj = {\n                ownerAddress: msg.getOwnerAddress_asB64(),\n                contractAddress: msg.getContractAddress_asB64(),\n                consumeUserResourcePercent: jspb.Message.getFieldWithDefault(msg, 3, 0),\n            };\n\n        if (includeInstance) {\n            obj.$jspbMessageInstance = msg;\n        }\n        return obj;\n    };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.UpdateSettingContract}\n */\nTronWebProto.UpdateSettingContract.deserializeBinary = function (bytes) {\n    var reader = new jspb.BinaryReader(bytes);\n    var msg = new TronWebProto.UpdateSettingContract();\n    return TronWebProto.UpdateSettingContract.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.UpdateSettingContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.UpdateSettingContract}\n */\nTronWebProto.UpdateSettingContract.deserializeBinaryFromReader = function (msg, reader) {\n    while (reader.nextField()) {\n        if (reader.isEndGroup()) {\n            break;\n        }\n        var field = reader.getFieldNumber();\n        switch (field) {\n            case 1:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setOwnerAddress(value);\n                break;\n            case 2:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setContractAddress(value);\n                break;\n            case 3:\n                var value = /** @type {number} */ (reader.readInt64());\n                msg.setConsumeUserResourcePercent(value);\n                break;\n            default:\n                reader.skipField();\n                break;\n        }\n    }\n    return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.UpdateSettingContract.prototype.serializeBinary = function () {\n    var writer = new jspb.BinaryWriter();\n    TronWebProto.UpdateSettingContract.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.UpdateSettingContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.UpdateSettingContract.serializeBinaryToWriter = function (message, writer) {\n    var f = undefined;\n    f = message.getOwnerAddress_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(1, f);\n    }\n    f = message.getContractAddress_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(2, f);\n    }\n    f = message.getConsumeUserResourcePercent();\n    if (f !== 0) {\n        writer.writeInt64(3, f);\n    }\n};\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.UpdateSettingContract.prototype.getOwnerAddress = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));\n};\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.UpdateSettingContract.prototype.getOwnerAddress_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getOwnerAddress()));\n};\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.UpdateSettingContract.prototype.getOwnerAddress_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getOwnerAddress()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.UpdateSettingContract} returns this\n */\nTronWebProto.UpdateSettingContract.prototype.setOwnerAddress = function (value) {\n    return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n/**\n * optional bytes contract_address = 2;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.UpdateSettingContract.prototype.getContractAddress = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ''));\n};\n\n/**\n * optional bytes contract_address = 2;\n * This is a type-conversion wrapper around `getContractAddress()`\n * @return {string}\n */\nTronWebProto.UpdateSettingContract.prototype.getContractAddress_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getContractAddress()));\n};\n\n/**\n * optional bytes contract_address = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getContractAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.UpdateSettingContract.prototype.getContractAddress_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getContractAddress()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.UpdateSettingContract} returns this\n */\nTronWebProto.UpdateSettingContract.prototype.setContractAddress = function (value) {\n    return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n/**\n * optional int64 consume_user_resource_percent = 3;\n * @return {number}\n */\nTronWebProto.UpdateSettingContract.prototype.getConsumeUserResourcePercent = function () {\n    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n/**\n * @param {number} value\n * @return {!TronWebProto.UpdateSettingContract} returns this\n */\nTronWebProto.UpdateSettingContract.prototype.setConsumeUserResourcePercent = function (value) {\n    return jspb.Message.setProto3IntField(this, 3, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n    /**\n     * Creates an object representation of this proto.\n     * Field names that are reserved in JavaScript and will be renamed to pb_name.\n     * Optional fields that are not set will be set to undefined.\n     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n     * For the list of reserved names please see:\n     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n     * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n     *     JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @return {!Object}\n     */\n    TronWebProto.UpdateEnergyLimitContract.prototype.toObject = function (opt_includeInstance) {\n        return TronWebProto.UpdateEnergyLimitContract.toObject(opt_includeInstance, this);\n    };\n\n    /**\n     * Static version of the {@see toObject} method.\n     * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n     *     the JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @param {!TronWebProto.UpdateEnergyLimitContract} msg The msg instance to transform.\n     * @return {!Object}\n     * @suppress {unusedLocalVariables} f is only used for nested messages\n     */\n    TronWebProto.UpdateEnergyLimitContract.toObject = function (includeInstance, msg) {\n        var f,\n            obj = {\n                ownerAddress: msg.getOwnerAddress_asB64(),\n                contractAddress: msg.getContractAddress_asB64(),\n                originEnergyLimit: jspb.Message.getFieldWithDefault(msg, 3, 0),\n            };\n\n        if (includeInstance) {\n            obj.$jspbMessageInstance = msg;\n        }\n        return obj;\n    };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.UpdateEnergyLimitContract}\n */\nTronWebProto.UpdateEnergyLimitContract.deserializeBinary = function (bytes) {\n    var reader = new jspb.BinaryReader(bytes);\n    var msg = new TronWebProto.UpdateEnergyLimitContract();\n    return TronWebProto.UpdateEnergyLimitContract.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.UpdateEnergyLimitContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.UpdateEnergyLimitContract}\n */\nTronWebProto.UpdateEnergyLimitContract.deserializeBinaryFromReader = function (msg, reader) {\n    while (reader.nextField()) {\n        if (reader.isEndGroup()) {\n            break;\n        }\n        var field = reader.getFieldNumber();\n        switch (field) {\n            case 1:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setOwnerAddress(value);\n                break;\n            case 2:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setContractAddress(value);\n                break;\n            case 3:\n                var value = /** @type {number} */ (reader.readInt64());\n                msg.setOriginEnergyLimit(value);\n                break;\n            default:\n                reader.skipField();\n                break;\n        }\n    }\n    return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.UpdateEnergyLimitContract.prototype.serializeBinary = function () {\n    var writer = new jspb.BinaryWriter();\n    TronWebProto.UpdateEnergyLimitContract.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.UpdateEnergyLimitContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.UpdateEnergyLimitContract.serializeBinaryToWriter = function (message, writer) {\n    var f = undefined;\n    f = message.getOwnerAddress_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(1, f);\n    }\n    f = message.getContractAddress_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(2, f);\n    }\n    f = message.getOriginEnergyLimit();\n    if (f !== 0) {\n        writer.writeInt64(3, f);\n    }\n};\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.UpdateEnergyLimitContract.prototype.getOwnerAddress = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));\n};\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.UpdateEnergyLimitContract.prototype.getOwnerAddress_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getOwnerAddress()));\n};\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.UpdateEnergyLimitContract.prototype.getOwnerAddress_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getOwnerAddress()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.UpdateEnergyLimitContract} returns this\n */\nTronWebProto.UpdateEnergyLimitContract.prototype.setOwnerAddress = function (value) {\n    return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n/**\n * optional bytes contract_address = 2;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.UpdateEnergyLimitContract.prototype.getContractAddress = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ''));\n};\n\n/**\n * optional bytes contract_address = 2;\n * This is a type-conversion wrapper around `getContractAddress()`\n * @return {string}\n */\nTronWebProto.UpdateEnergyLimitContract.prototype.getContractAddress_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getContractAddress()));\n};\n\n/**\n * optional bytes contract_address = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getContractAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.UpdateEnergyLimitContract.prototype.getContractAddress_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getContractAddress()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.UpdateEnergyLimitContract} returns this\n */\nTronWebProto.UpdateEnergyLimitContract.prototype.setContractAddress = function (value) {\n    return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n/**\n * optional int64 origin_energy_limit = 3;\n * @return {number}\n */\nTronWebProto.UpdateEnergyLimitContract.prototype.getOriginEnergyLimit = function () {\n    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n/**\n * @param {number} value\n * @return {!TronWebProto.UpdateEnergyLimitContract} returns this\n */\nTronWebProto.UpdateEnergyLimitContract.prototype.setOriginEnergyLimit = function (value) {\n    return jspb.Message.setProto3IntField(this, 3, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n    /**\n     * Creates an object representation of this proto.\n     * Field names that are reserved in JavaScript and will be renamed to pb_name.\n     * Optional fields that are not set will be set to undefined.\n     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n     * For the list of reserved names please see:\n     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n     * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n     *     JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @return {!Object}\n     */\n    TronWebProto.SmartContractDataWrapper.prototype.toObject = function (opt_includeInstance) {\n        return TronWebProto.SmartContractDataWrapper.toObject(opt_includeInstance, this);\n    };\n\n    /**\n     * Static version of the {@see toObject} method.\n     * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n     *     the JSPB instance for transitional soy proto support:\n     *     http://goto/soy-param-migration\n     * @param {!TronWebProto.SmartContractDataWrapper} msg The msg instance to transform.\n     * @return {!Object}\n     * @suppress {unusedLocalVariables} f is only used for nested messages\n     */\n    TronWebProto.SmartContractDataWrapper.toObject = function (includeInstance, msg) {\n        var f,\n            obj = {\n                smartContract: (f = msg.getSmartContract()) && TronWebProto.SmartContract.toObject(includeInstance, f),\n                runtimecode: msg.getRuntimecode_asB64(),\n                contractState: (f = msg.getContractState()) && TronWebProto.ContractState.toObject(includeInstance, f),\n            };\n\n        if (includeInstance) {\n            obj.$jspbMessageInstance = msg;\n        }\n        return obj;\n    };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.SmartContractDataWrapper}\n */\nTronWebProto.SmartContractDataWrapper.deserializeBinary = function (bytes) {\n    var reader = new jspb.BinaryReader(bytes);\n    var msg = new TronWebProto.SmartContractDataWrapper();\n    return TronWebProto.SmartContractDataWrapper.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.SmartContractDataWrapper} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.SmartContractDataWrapper}\n */\nTronWebProto.SmartContractDataWrapper.deserializeBinaryFromReader = function (msg, reader) {\n    while (reader.nextField()) {\n        if (reader.isEndGroup()) {\n            break;\n        }\n        var field = reader.getFieldNumber();\n        switch (field) {\n            case 1:\n                var value = new TronWebProto.SmartContract();\n                reader.readMessage(value, TronWebProto.SmartContract.deserializeBinaryFromReader);\n                msg.setSmartContract(value);\n                break;\n            case 2:\n                var value = /** @type {!Uint8Array} */ (reader.readBytes());\n                msg.setRuntimecode(value);\n                break;\n            case 3:\n                var value = new TronWebProto.ContractState();\n                reader.readMessage(value, TronWebProto.ContractState.deserializeBinaryFromReader);\n                msg.setContractState(value);\n                break;\n            default:\n                reader.skipField();\n                break;\n        }\n    }\n    return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.SmartContractDataWrapper.prototype.serializeBinary = function () {\n    var writer = new jspb.BinaryWriter();\n    TronWebProto.SmartContractDataWrapper.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.SmartContractDataWrapper} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.SmartContractDataWrapper.serializeBinaryToWriter = function (message, writer) {\n    var f = undefined;\n    f = message.getSmartContract();\n    if (f != null) {\n        writer.writeMessage(1, f, TronWebProto.SmartContract.serializeBinaryToWriter);\n    }\n    f = message.getRuntimecode_asU8();\n    if (f.length > 0) {\n        writer.writeBytes(2, f);\n    }\n    f = message.getContractState();\n    if (f != null) {\n        writer.writeMessage(3, f, TronWebProto.ContractState.serializeBinaryToWriter);\n    }\n};\n\n/**\n * optional SmartContract smart_contract = 1;\n * @return {?TronWebProto.SmartContract}\n */\nTronWebProto.SmartContractDataWrapper.prototype.getSmartContract = function () {\n    return /** @type{?TronWebProto.SmartContract} */ (jspb.Message.getWrapperField(this, TronWebProto.SmartContract, 1));\n};\n\n/**\n * @param {?TronWebProto.SmartContract|undefined} value\n * @return {!TronWebProto.SmartContractDataWrapper} returns this\n */\nTronWebProto.SmartContractDataWrapper.prototype.setSmartContract = function (value) {\n    return jspb.Message.setWrapperField(this, 1, value);\n};\n\n/**\n * Clears the message field making it undefined.\n * @return {!TronWebProto.SmartContractDataWrapper} returns this\n */\nTronWebProto.SmartContractDataWrapper.prototype.clearSmartContract = function () {\n    return this.setSmartContract(undefined);\n};\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nTronWebProto.SmartContractDataWrapper.prototype.hasSmartContract = function () {\n    return jspb.Message.getField(this, 1) != null;\n};\n\n/**\n * optional bytes runtimecode = 2;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.SmartContractDataWrapper.prototype.getRuntimecode = function () {\n    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ''));\n};\n\n/**\n * optional bytes runtimecode = 2;\n * This is a type-conversion wrapper around `getRuntimecode()`\n * @return {string}\n */\nTronWebProto.SmartContractDataWrapper.prototype.getRuntimecode_asB64 = function () {\n    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getRuntimecode()));\n};\n\n/**\n * optional bytes runtimecode = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getRuntimecode()`\n * @return {!Uint8Array}\n */\nTronWebProto.SmartContractDataWrapper.prototype.getRuntimecode_asU8 = function () {\n    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getRuntimecode()));\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.SmartContractDataWrapper} returns this\n */\nTronWebProto.SmartContractDataWrapper.prototype.setRuntimecode = function (value) {\n    return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n/**\n * optional ContractState contract_state = 3;\n * @return {?TronWebProto.ContractState}\n */\nTronWebProto.SmartContractDataWrapper.prototype.getContractState = function () {\n    return /** @type{?TronWebProto.ContractState} */ (jspb.Message.getWrapperField(this, TronWebProto.ContractState, 3));\n};\n\n/**\n * @param {?TronWebProto.ContractState|undefined} value\n * @return {!TronWebProto.SmartContractDataWrapper} returns this\n */\nTronWebProto.SmartContractDataWrapper.prototype.setContractState = function (value) {\n    return jspb.Message.setWrapperField(this, 3, value);\n};\n\n/**\n * Clears the message field making it undefined.\n * @return {!TronWebProto.SmartContractDataWrapper} returns this\n */\nTronWebProto.SmartContractDataWrapper.prototype.clearContractState = function () {\n    return this.setContractState(undefined);\n};\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nTronWebProto.SmartContractDataWrapper.prototype.hasContractState = function () {\n    return jspb.Message.getField(this, 3) != null;\n};\n\ngoog.object.extend(exports, TronWebProto);\n","// source: core/contract/storage_contract.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('@tronweb3/google-protobuf');\nvar goog = jspb;\nvar global =\n  (typeof globalThis !== 'undefined' && globalThis) ||\n  (typeof window !== 'undefined' && window) ||\n  (typeof global !== 'undefined' && global) ||\n  (typeof self !== 'undefined' && self) ||\n  (function () { return this; }).call(null) ||\n  Function('return this')();\n\ngoog.exportSymbol('TronWebProto.BuyStorageBytesContract', null, global);\ngoog.exportSymbol('TronWebProto.BuyStorageContract', null, global);\ngoog.exportSymbol('TronWebProto.SellStorageContract', null, global);\ngoog.exportSymbol('TronWebProto.UpdateBrokerageContract', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.BuyStorageBytesContract = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.BuyStorageBytesContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.BuyStorageBytesContract.displayName = 'TronWebProto.BuyStorageBytesContract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.BuyStorageContract = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.BuyStorageContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.BuyStorageContract.displayName = 'TronWebProto.BuyStorageContract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.SellStorageContract = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.SellStorageContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.SellStorageContract.displayName = 'TronWebProto.SellStorageContract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.UpdateBrokerageContract = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.UpdateBrokerageContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.UpdateBrokerageContract.displayName = 'TronWebProto.UpdateBrokerageContract';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.BuyStorageBytesContract.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.BuyStorageBytesContract.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.BuyStorageBytesContract} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.BuyStorageBytesContract.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    ownerAddress: msg.getOwnerAddress_asB64(),\n    bytes: jspb.Message.getFieldWithDefault(msg, 2, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.BuyStorageBytesContract}\n */\nTronWebProto.BuyStorageBytesContract.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.BuyStorageBytesContract;\n  return TronWebProto.BuyStorageBytesContract.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.BuyStorageBytesContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.BuyStorageBytesContract}\n */\nTronWebProto.BuyStorageBytesContract.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setOwnerAddress(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setBytes(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.BuyStorageBytesContract.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.BuyStorageBytesContract.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.BuyStorageBytesContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.BuyStorageBytesContract.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getOwnerAddress_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getBytes();\n  if (f !== 0) {\n    writer.writeInt64(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.BuyStorageBytesContract.prototype.getOwnerAddress = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.BuyStorageBytesContract.prototype.getOwnerAddress_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.BuyStorageBytesContract.prototype.getOwnerAddress_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.BuyStorageBytesContract} returns this\n */\nTronWebProto.BuyStorageBytesContract.prototype.setOwnerAddress = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional int64 bytes = 2;\n * @return {number}\n */\nTronWebProto.BuyStorageBytesContract.prototype.getBytes = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.BuyStorageBytesContract} returns this\n */\nTronWebProto.BuyStorageBytesContract.prototype.setBytes = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.BuyStorageContract.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.BuyStorageContract.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.BuyStorageContract} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.BuyStorageContract.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    ownerAddress: msg.getOwnerAddress_asB64(),\n    quant: jspb.Message.getFieldWithDefault(msg, 2, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.BuyStorageContract}\n */\nTronWebProto.BuyStorageContract.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.BuyStorageContract;\n  return TronWebProto.BuyStorageContract.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.BuyStorageContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.BuyStorageContract}\n */\nTronWebProto.BuyStorageContract.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setOwnerAddress(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setQuant(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.BuyStorageContract.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.BuyStorageContract.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.BuyStorageContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.BuyStorageContract.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getOwnerAddress_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getQuant();\n  if (f !== 0) {\n    writer.writeInt64(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.BuyStorageContract.prototype.getOwnerAddress = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.BuyStorageContract.prototype.getOwnerAddress_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.BuyStorageContract.prototype.getOwnerAddress_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.BuyStorageContract} returns this\n */\nTronWebProto.BuyStorageContract.prototype.setOwnerAddress = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional int64 quant = 2;\n * @return {number}\n */\nTronWebProto.BuyStorageContract.prototype.getQuant = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.BuyStorageContract} returns this\n */\nTronWebProto.BuyStorageContract.prototype.setQuant = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.SellStorageContract.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.SellStorageContract.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.SellStorageContract} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.SellStorageContract.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    ownerAddress: msg.getOwnerAddress_asB64(),\n    storageBytes: jspb.Message.getFieldWithDefault(msg, 2, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.SellStorageContract}\n */\nTronWebProto.SellStorageContract.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.SellStorageContract;\n  return TronWebProto.SellStorageContract.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.SellStorageContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.SellStorageContract}\n */\nTronWebProto.SellStorageContract.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setOwnerAddress(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setStorageBytes(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.SellStorageContract.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.SellStorageContract.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.SellStorageContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.SellStorageContract.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getOwnerAddress_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getStorageBytes();\n  if (f !== 0) {\n    writer.writeInt64(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.SellStorageContract.prototype.getOwnerAddress = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.SellStorageContract.prototype.getOwnerAddress_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.SellStorageContract.prototype.getOwnerAddress_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.SellStorageContract} returns this\n */\nTronWebProto.SellStorageContract.prototype.setOwnerAddress = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional int64 storage_bytes = 2;\n * @return {number}\n */\nTronWebProto.SellStorageContract.prototype.getStorageBytes = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.SellStorageContract} returns this\n */\nTronWebProto.SellStorageContract.prototype.setStorageBytes = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.UpdateBrokerageContract.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.UpdateBrokerageContract.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.UpdateBrokerageContract} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.UpdateBrokerageContract.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    ownerAddress: msg.getOwnerAddress_asB64(),\n    brokerage: jspb.Message.getFieldWithDefault(msg, 2, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.UpdateBrokerageContract}\n */\nTronWebProto.UpdateBrokerageContract.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.UpdateBrokerageContract;\n  return TronWebProto.UpdateBrokerageContract.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.UpdateBrokerageContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.UpdateBrokerageContract}\n */\nTronWebProto.UpdateBrokerageContract.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setOwnerAddress(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readInt32());\n      msg.setBrokerage(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.UpdateBrokerageContract.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.UpdateBrokerageContract.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.UpdateBrokerageContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.UpdateBrokerageContract.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getOwnerAddress_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getBrokerage();\n  if (f !== 0) {\n    writer.writeInt32(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.UpdateBrokerageContract.prototype.getOwnerAddress = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.UpdateBrokerageContract.prototype.getOwnerAddress_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.UpdateBrokerageContract.prototype.getOwnerAddress_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.UpdateBrokerageContract} returns this\n */\nTronWebProto.UpdateBrokerageContract.prototype.setOwnerAddress = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional int32 brokerage = 2;\n * @return {number}\n */\nTronWebProto.UpdateBrokerageContract.prototype.getBrokerage = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.UpdateBrokerageContract} returns this\n */\nTronWebProto.UpdateBrokerageContract.prototype.setBrokerage = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\ngoog.object.extend(exports, TronWebProto);\n","// source: core/contract/witness_contract.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('@tronweb3/google-protobuf');\nvar goog = jspb;\nvar global =\n  (typeof globalThis !== 'undefined' && globalThis) ||\n  (typeof window !== 'undefined' && window) ||\n  (typeof global !== 'undefined' && global) ||\n  (typeof self !== 'undefined' && self) ||\n  (function () { return this; }).call(null) ||\n  Function('return this')();\n\ngoog.exportSymbol('TronWebProto.VoteWitnessContract', null, global);\ngoog.exportSymbol('TronWebProto.VoteWitnessContract.Vote', null, global);\ngoog.exportSymbol('TronWebProto.WitnessCreateContract', null, global);\ngoog.exportSymbol('TronWebProto.WitnessUpdateContract', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.WitnessCreateContract = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.WitnessCreateContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.WitnessCreateContract.displayName = 'TronWebProto.WitnessCreateContract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.WitnessUpdateContract = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.WitnessUpdateContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.WitnessUpdateContract.displayName = 'TronWebProto.WitnessUpdateContract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.VoteWitnessContract = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, TronWebProto.VoteWitnessContract.repeatedFields_, null);\n};\ngoog.inherits(TronWebProto.VoteWitnessContract, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.VoteWitnessContract.displayName = 'TronWebProto.VoteWitnessContract';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nTronWebProto.VoteWitnessContract.Vote = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(TronWebProto.VoteWitnessContract.Vote, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  TronWebProto.VoteWitnessContract.Vote.displayName = 'TronWebProto.VoteWitnessContract.Vote';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.WitnessCreateContract.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.WitnessCreateContract.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.WitnessCreateContract} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.WitnessCreateContract.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    ownerAddress: msg.getOwnerAddress_asB64(),\n    url: msg.getUrl_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.WitnessCreateContract}\n */\nTronWebProto.WitnessCreateContract.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.WitnessCreateContract;\n  return TronWebProto.WitnessCreateContract.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.WitnessCreateContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.WitnessCreateContract}\n */\nTronWebProto.WitnessCreateContract.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setOwnerAddress(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setUrl(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.WitnessCreateContract.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.WitnessCreateContract.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.WitnessCreateContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.WitnessCreateContract.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getOwnerAddress_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getUrl_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.WitnessCreateContract.prototype.getOwnerAddress = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.WitnessCreateContract.prototype.getOwnerAddress_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.WitnessCreateContract.prototype.getOwnerAddress_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.WitnessCreateContract} returns this\n */\nTronWebProto.WitnessCreateContract.prototype.setOwnerAddress = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional bytes url = 2;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.WitnessCreateContract.prototype.getUrl = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes url = 2;\n * This is a type-conversion wrapper around `getUrl()`\n * @return {string}\n */\nTronWebProto.WitnessCreateContract.prototype.getUrl_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getUrl()));\n};\n\n\n/**\n * optional bytes url = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getUrl()`\n * @return {!Uint8Array}\n */\nTronWebProto.WitnessCreateContract.prototype.getUrl_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getUrl()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.WitnessCreateContract} returns this\n */\nTronWebProto.WitnessCreateContract.prototype.setUrl = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.WitnessUpdateContract.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.WitnessUpdateContract.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.WitnessUpdateContract} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.WitnessUpdateContract.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    ownerAddress: msg.getOwnerAddress_asB64(),\n    updateUrl: msg.getUpdateUrl_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.WitnessUpdateContract}\n */\nTronWebProto.WitnessUpdateContract.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.WitnessUpdateContract;\n  return TronWebProto.WitnessUpdateContract.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.WitnessUpdateContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.WitnessUpdateContract}\n */\nTronWebProto.WitnessUpdateContract.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setOwnerAddress(value);\n      break;\n    case 12:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setUpdateUrl(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.WitnessUpdateContract.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.WitnessUpdateContract.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.WitnessUpdateContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.WitnessUpdateContract.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getOwnerAddress_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getUpdateUrl_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      12,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.WitnessUpdateContract.prototype.getOwnerAddress = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.WitnessUpdateContract.prototype.getOwnerAddress_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.WitnessUpdateContract.prototype.getOwnerAddress_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.WitnessUpdateContract} returns this\n */\nTronWebProto.WitnessUpdateContract.prototype.setOwnerAddress = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional bytes update_url = 12;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.WitnessUpdateContract.prototype.getUpdateUrl = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, \"\"));\n};\n\n\n/**\n * optional bytes update_url = 12;\n * This is a type-conversion wrapper around `getUpdateUrl()`\n * @return {string}\n */\nTronWebProto.WitnessUpdateContract.prototype.getUpdateUrl_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getUpdateUrl()));\n};\n\n\n/**\n * optional bytes update_url = 12;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getUpdateUrl()`\n * @return {!Uint8Array}\n */\nTronWebProto.WitnessUpdateContract.prototype.getUpdateUrl_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getUpdateUrl()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.WitnessUpdateContract} returns this\n */\nTronWebProto.WitnessUpdateContract.prototype.setUpdateUrl = function(value) {\n  return jspb.Message.setProto3BytesField(this, 12, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nTronWebProto.VoteWitnessContract.repeatedFields_ = [2];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.VoteWitnessContract.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.VoteWitnessContract.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.VoteWitnessContract} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.VoteWitnessContract.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    ownerAddress: msg.getOwnerAddress_asB64(),\n    votesList: jspb.Message.toObjectList(msg.getVotesList(),\n    TronWebProto.VoteWitnessContract.Vote.toObject, includeInstance),\n    support: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.VoteWitnessContract}\n */\nTronWebProto.VoteWitnessContract.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.VoteWitnessContract;\n  return TronWebProto.VoteWitnessContract.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.VoteWitnessContract} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.VoteWitnessContract}\n */\nTronWebProto.VoteWitnessContract.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setOwnerAddress(value);\n      break;\n    case 2:\n      var value = new TronWebProto.VoteWitnessContract.Vote;\n      reader.readMessage(value,TronWebProto.VoteWitnessContract.Vote.deserializeBinaryFromReader);\n      msg.addVotes(value);\n      break;\n    case 3:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setSupport(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.VoteWitnessContract.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.VoteWitnessContract.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.VoteWitnessContract} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.VoteWitnessContract.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getOwnerAddress_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getVotesList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      2,\n      f,\n      TronWebProto.VoteWitnessContract.Vote.serializeBinaryToWriter\n    );\n  }\n  f = message.getSupport();\n  if (f) {\n    writer.writeBool(\n      3,\n      f\n    );\n  }\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nTronWebProto.VoteWitnessContract.Vote.prototype.toObject = function(opt_includeInstance) {\n  return TronWebProto.VoteWitnessContract.Vote.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!TronWebProto.VoteWitnessContract.Vote} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.VoteWitnessContract.Vote.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    voteAddress: msg.getVoteAddress_asB64(),\n    voteCount: jspb.Message.getFieldWithDefault(msg, 2, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!TronWebProto.VoteWitnessContract.Vote}\n */\nTronWebProto.VoteWitnessContract.Vote.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new TronWebProto.VoteWitnessContract.Vote;\n  return TronWebProto.VoteWitnessContract.Vote.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!TronWebProto.VoteWitnessContract.Vote} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!TronWebProto.VoteWitnessContract.Vote}\n */\nTronWebProto.VoteWitnessContract.Vote.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setVoteAddress(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setVoteCount(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nTronWebProto.VoteWitnessContract.Vote.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  TronWebProto.VoteWitnessContract.Vote.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!TronWebProto.VoteWitnessContract.Vote} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nTronWebProto.VoteWitnessContract.Vote.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getVoteAddress_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getVoteCount();\n  if (f !== 0) {\n    writer.writeInt64(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes vote_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.VoteWitnessContract.Vote.prototype.getVoteAddress = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes vote_address = 1;\n * This is a type-conversion wrapper around `getVoteAddress()`\n * @return {string}\n */\nTronWebProto.VoteWitnessContract.Vote.prototype.getVoteAddress_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getVoteAddress()));\n};\n\n\n/**\n * optional bytes vote_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getVoteAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.VoteWitnessContract.Vote.prototype.getVoteAddress_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getVoteAddress()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.VoteWitnessContract.Vote} returns this\n */\nTronWebProto.VoteWitnessContract.Vote.prototype.setVoteAddress = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional int64 vote_count = 2;\n * @return {number}\n */\nTronWebProto.VoteWitnessContract.Vote.prototype.getVoteCount = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!TronWebProto.VoteWitnessContract.Vote} returns this\n */\nTronWebProto.VoteWitnessContract.Vote.prototype.setVoteCount = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * @return {!(string|Uint8Array)}\n */\nTronWebProto.VoteWitnessContract.prototype.getOwnerAddress = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {string}\n */\nTronWebProto.VoteWitnessContract.prototype.getOwnerAddress_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * optional bytes owner_address = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getOwnerAddress()`\n * @return {!Uint8Array}\n */\nTronWebProto.VoteWitnessContract.prototype.getOwnerAddress_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getOwnerAddress()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!TronWebProto.VoteWitnessContract} returns this\n */\nTronWebProto.VoteWitnessContract.prototype.setOwnerAddress = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * repeated Vote votes = 2;\n * @return {!Array<!TronWebProto.VoteWitnessContract.Vote>}\n */\nTronWebProto.VoteWitnessContract.prototype.getVotesList = function() {\n  return /** @type{!Array<!TronWebProto.VoteWitnessContract.Vote>} */ (\n    jspb.Message.getRepeatedWrapperField(this, TronWebProto.VoteWitnessContract.Vote, 2));\n};\n\n\n/**\n * @param {!Array<!TronWebProto.VoteWitnessContract.Vote>} value\n * @return {!TronWebProto.VoteWitnessContract} returns this\n*/\nTronWebProto.VoteWitnessContract.prototype.setVotesList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 2, value);\n};\n\n\n/**\n * @param {!TronWebProto.VoteWitnessContract.Vote=} opt_value\n * @param {number=} opt_index\n * @return {!TronWebProto.VoteWitnessContract.Vote}\n */\nTronWebProto.VoteWitnessContract.prototype.addVotes = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, TronWebProto.VoteWitnessContract.Vote, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!TronWebProto.VoteWitnessContract} returns this\n */\nTronWebProto.VoteWitnessContract.prototype.clearVotesList = function() {\n  return this.setVotesList([]);\n};\n\n\n/**\n * optional bool support = 3;\n * @return {boolean}\n */\nTronWebProto.VoteWitnessContract.prototype.getSupport = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!TronWebProto.VoteWitnessContract} returns this\n */\nTronWebProto.VoteWitnessContract.prototype.setSupport = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 3, value);\n};\n\n\ngoog.object.extend(exports, TronWebProto);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import utils from './utils/index.js';\nexport { utils };\n\nimport { BigNumber } from 'bignumber.js';\nexport { BigNumber };\n\nimport { providers } from './lib/providers/index.js';\nexport { providers };\n\nimport { TransactionBuilder } from './lib/TransactionBuilder/TransactionBuilder.js';\nexport { TransactionBuilder };\n\nimport { Trx } from './lib/trx.js';\nexport { Trx };\n\nimport { Contract } from './lib/contract/index.js';\nexport { Contract };\n\nimport { Event } from './lib/event.js';\nexport { Event };\n\nimport { Plugin } from './lib/plugin.js';\nexport { Plugin };\n\nimport { TronWeb } from './tronweb.js';\nexport { TronWeb };\n\nexport default {\n    utils,\n    BigNumber,\n    providers,\n    TransactionBuilder,\n    Trx,\n    Contract,\n    Event,\n    Plugin,\n    TronWeb,\n};\n"],"names":["tronWeb","validator","constructor","TronWeb","Error","this","Validator","sendTrx","to","amount","from","defaultAddress","hex","options","parseInt","notValid","name","type","value","names","msg","gt","data","to_address","toHex","owner_address","transactionOptions","getTransactionOptions","createTransaction","ContractType","TransferContract","permissionId","sendToken","tokenId","asset_name","fromUtf8","TransferAssetContract","purchaseToken","issuerAddress","buyer","ParticipateAssetIssueContract","freezeBalance","duration","resource","ownerAddress","receiverAddress","optional","gte","frozen_balance","frozen_duration","String","isNotNullOrUndefined","receiver_address","FreezeBalanceContract","unfreezeBalance","address","UnfreezeBalanceContract","freezeBalanceV2","FreezeBalanceV2Contract","unfreezeBalanceV2","unfreeze_balance","UnfreezeBalanceV2Contract","cancelUnfreezeBalanceV2","CancelAllUnfreezeV2Contract","delegateResource","lock","lockPeriod","balance","lock_period","DelegateResourceContract","undelegateResource","UnDelegateResourceContract","withdrawExpireUnfreeze","WithdrawExpireUnfreezeContract","withdrawBlockRewards","WithdrawBalanceContract","applyForSR","url","lte","WitnessCreateContract","vote","votes","voterAddress","entries","Object","srAddress","voteCount","voteList","map","vote_address","vote_count","VoteWitnessContract","createSmartContract","feeLimit","userFeePercentage","originEnergyLimit","callValue","tokenValue","token_id","abi","parameters","bytecode","isString","JSON","parse","newAbi","entrys","isArray","payable","some","func","stateMutability","toLowerCase","rawParameter","funcABIV2","parametersV2","replace","encodeParamsV2ByABI","constructorParams","find","it","abiCoder","AbiCoder","types","values","inputs","length","i","replaceAddressPrefix","v","ADDRESS_PREFIX_REGEX","match","test","push","encode","ex","args","fee_limit","call_value","consume_user_resource_percent","origin_energy_limit","stringify","parameter","call_token_value","contract","new_contract","origin_address","tx","CreateSmartContract","contract_address","genContractAddress","txID","triggerSmartContract","contractAddress","functionSelector","params","splice","txLocal","_triggerSmartContractLocal","_triggerSmartContract","triggerConstantContract","_isConstant","triggerConfirmedConstantContract","confirmed","estimateEnergy","deployConstantContract","input","pathInfo","transaction","request","result","message","toUtf8","_getTriggerSmartContractArgs","parameterStr","shieldedParameter","function_selector","Permission_id","assign","keccak256","Buffer","toString","substring","TriggerSmartContract","resultManagerTriggerSmartContract","clearABI","isAddress","trx","cache","contracts","ClearABIContract","updateBrokerage","brokerage","isInteger","UpdateBrokerageContract","createToken","abbreviation","description","totalSupply","trxRatio","tokenRatio","saleStart","Date","now","saleEnd","freeBandwidth","freeBandwidthLimit","frozenAmount","frozenDuration","voteScore","precision","abbr","total_supply","trx_num","num","start_time","end_time","frozen_supply","frozen_amount","frozen_days","forEach","key","isNaN","free_asset_net_limit","public_free_asset_net_limit","vote_score","AssetIssueContract","createAccount","accountAddress","account_address","AccountCreateContract","updateAccount","accountName","account_name","AccountUpdateContract","setAccountId","accountId","startsWith","slice","account_id","SetAccountIdContract","updateToken","new_limit","new_public_limit","UpdateAssetContract","sendAsset","purchaseAsset","createAsset","updateAsset","createProposal","invalid","newParams","isObject","ProposalCreateContract","deleteProposal","proposalID","proposal_id","ProposalDeleteContract","voteProposal","isApproval","is_add_approval","ProposalApproveContract","createTRXExchange","tokenName","tokenBalance","trxBalance","first_token_id","first_token_balance","second_token_id","second_token_balance","ExchangeCreateContract","createTokenExchange","firstTokenName","firstTokenBalance","secondTokenName","secondTokenBalance","injectExchangeTokens","exchangeID","tokenAmount","exchange_id","quant","ExchangeInjectContract","withdrawExchangeTokens","ExchangeWithdrawContract","tradeExchangeTokens","tokenAmountSold","tokenAmountExpected","fromAscii","expected","ExchangeTransactionContract","updateSetting","UpdateSettingContract","updateEnergyLimit","UpdateEnergyLimitContract","checkPermissions","permissions","permission_name","threshold","keys","weight","operations","updateAccountPermissions","ownerPermission","witnessPermission","activesPermissions","Array","activesPermission","_ownerPermissions","deepCopyJson","owner","_witnessPermissions","witness","_activesPermissions","activePermissions","_activesPermission","actives","AccountPermissionUpdateContract","newTxID","raw_data","ref_block_bytes","ref_block_hash","expiration","timestamp","signature","visible","e","res","fullNode","resultManager","alterTransaction","Reflect","has","dataFormat","extension","extendExpiration","addUpdateData","getHeaderInfo","node","detail","then","block_header","number","padStart","blockID","checkBlockHeader","json","txCheckWithArgs","async","raw_data_hex","type_url","pb","txJsonToPb","txPbToTxID","txPbToRawDataHex","ret","blockHeader","eventListener","deployed","lastBlock","methods","methodInstances","props","loadAbi","hasProperty","property","hasOwnProperty","__proto__","prop","method","Method","methodCall","onMethod","bind","decodeInput","methodName","inputData","privateKey","defaultPrivateKey","callback","fromPrivateKey","transactionBuilder","signedTransaction","sign","sendRawTransaction","code","error","sleep","at","getContract","includes","decodeOutput","output","decodeParamsV2ByABI","outputs","defaultOptions","iface","ethersUtils","Interface","obj","getEvent","getFunction","format","getFunctionSelector","sha3","shouldPollResponse","call","_call","send","_send","index","undefined","len","constant_result","msg2","chunk","base58","broadcast","err","checkResult","pollTimes","getTransactionInfo","Promise","r","setTimeout","resMessage","rawResponse","decoded","contractResult","keepTxID","setServer","eventServer","healthcheck","HttpProvider","isValidProvider","isConnected","catch","getEventsByContractAddress","newOptions","limit","eventName","blockNumber","onlyUnconfirmed","onlyConfirmed","minBlockTimestamp","maxBlockTimestamp","orderBy","fingerprint","console","warn","qs","event_name","block_number","only_unconfirmed","only_confirmed","min_block_timestamp","max_block_timestamp","order_by","fromHex","URLSearchParams","success","getEventsByTransactionID","transactionID","getEventsByBlockNumber","getEventsOfLatestBlock","pluginNoOverride","disablePlugins","register","Plugin","pluginInterface","requires","components","libs","plugged","skipped","plugin","isFunction","satisfies","version","fullClass","className","classInstanceName","component","host","timeout","user","password","headers","statusPage","instance","isValidURL","create","baseURL","auth","username","setStatusPage","hasProperties","payload","providers","TRX_MESSAGE_HEADER","ETH_MESSAGE_HEADER","Trx","signMessage","broadcastHex","signTransaction","sendTransaction","sendHexTransaction","_parseToken","token","getCurrentBlock","getConfirmedCurrentBlock","solidityNode","getBlock","block","defaultBlock","isHex","getBlockByHash","getBlockByNumber","blockHash","getBlockTransactionCount","transactions","getTransactionFromBlock","getTransactionsFromBlock","getTransaction","getConfirmedTransaction","getUnconfirmedTransactionInfo","getTransactionsToAddress","offset","getTransactionsRelated","getTransactionsFromAddress","direction","all","sort","a","b","account","getAccount","getAccountById","id","getAccountInfoById","getBalance","getUnconfirmedAccount","getUnconfirmedAccountById","getUnconfirmedBalance","getBandwidth","freeNetUsed","freeNetLimit","NetUsed","NetLimit","getTokensIssuedByAddress","assetIssue","reduce","tokens","getTokenFromID","tokenID","listNodes","nodes","port","getBlockRange","start","end","startNum","endNum","listSuperRepresentatives","witnesses","listTokens","timeUntilNextVoteCycle","Math","floor","ecRecover","txCheck","tronAddress","sig","verifyMessage","useTronHeader","verifySignature","messageBytes","toUtf8Bytes","hexStr2byteArray","messageDigest","Uint8Array","recovered","recoverAddress","Signature","ADDRESS_PREFIX","substr","verifyMessageV2","verifyTypedData","domain","_TypedDataEncoder","hash","multisig","signString","crypto","signingKey","SigningKey","s","Number","join","signMessageV2","_signTypedData","multiSign","signWeight","getSignWeight","foundKey","permission","approved_list","indexOf","getApprovedList","signedHexTransaction","hexTransaction","getProposal","listProposals","proposals","getChainParameters","chainParameter","getAccountResources","getDelegatedResourceV2","fromAddress","toAddress","getDelegatedResourceAccountIndexV2","getCanDelegatedMaxSize","getAvailableUnfreezeCount","getCanWithdrawUnfreezeAmount","getExchangeByID","listExchanges","exchanges","listExchangesPaginated","getNodeInfo","getTokenListByName","t","getTokenByID","getReward","_getReward","getUnconfirmedReward","getBrokerage","_getBrokerage","getUnconfirmedBrokerage","reward","getBandwidthPrices","prices","getEnergyPrices","param","notPositive","notEqual","normalized","no","lt","isBoolean","DEFAULT_VERSION","isValidOptions","fullHost","BigNumber","event","static","utils","fullnodeVersion","super","eventHeaders","Event","TransactionBuilder","setFullNode","setSolidityNode","setEventServer","toAscii","toBigNumber","toDecimal","fromDecimal","toSun","fromSun","createRandom","fromMnemonic","setPrivateKey","setFullNodeHeader","setEventHeader","getFullnodeVersion","nodeInfo","configNodeInfo","codeVersion","split","setDefaultBlock","abs","setAddress","emit","fullnodeSatisfies","provider","knownProvider","setHeader","currentProviders","currentProvider","getEventResult","getEventByTransactionID","Contract","strict","string","prefix","val","isBigNumber","isFinite","str","l","fromCharCode","padding","padEnd","toNumber","isLessThan","sun","div","times","accounts","generateAccount","generateRandom","generateAccountWithMnemonic","Permission_PermissionType","AccountType","_addressToHex","deepCopy","target","prototype","newTarget","_array","_isBigNumber","extractSize","size","extractArrayDim","ignoreMethodHash","decode","arg","funABI","buildFullTypeDefinition","typeDef","innerType","convertAddresses","addrArr","addrs","mapTuple","dimension","encodeArgs","convertTypes","decodeResult","buildFullTypeNameDefinition","outputTypes","convertTypeNames","decodeResCopy","priKeyBytes","genPriKey","pubKeyBytes","getPubKeyFromPriKey","addressBytes","getAddressFromPriKey","byteArray2hexStr","publicKey","getBase58CheckAddress","path","TRON_BIP39_PATH_INDEX_0","wordlist","ethersHDNodeWallet","mnemonic","pkToAddress","Mnemonic","fromPhrase","ADDRESS_SIZE","ADDRESS_PREFIX_BYTE","TRON_BIP39_PATH_PREFIX","decodeBase58Address","isAddressValid","ALPHABET","ALPHABET_MAP","charAt","buffer","j","digits","carry","reverse","digit","bytes","c","_keyStr","chr1","chr2","chr3","enc1","enc2","enc3","enc4","charCodeAt","encodeIgnoreUtf8","inputBytes","_utf8_decode","decodeToByteArray","_out2ByteArray","utftext","byteArray","_utf8_encode","n","c2","c3","byte2hexStr","byte","hexByteMap","arr","one","bytesLength","store","st","out","tmp","string64","Base64","hexChar2byte","d","isHexChar","isNumber","bytesToString","hextoString","base64DecodeFromString","base64EncodeToString","array","array1","array2","k","tempStrs","dateStrs","year","month","day","timeStrs","hour","minute","second","hash0","SHA256","checkSum","concat","encode58","computeAddress","pubBytes","addressHex","pubkey","ProjectivePoint","normalizePrivateKeyBytes","x","y","pubkeyHex","ECKeySign","hashBytes","recovery","msgBytes","msgHex","hashHex","sha256","base58Sting","decode58","checkSum1","signedData","arrayify","btoa","contents","TypedDataEncoder","base64Data","bytesDecode","globalThis","proto","protocol","Transaction","deserializeBinary","getRawData","serializeBinary","priKey","randomPrivateKey","priKeyHex","addressStr","decodeCheck","decodeData","hash1","base58Str","priKeyBase64String","toUtf8String","Wordlist","wordlists","splitSignature","sigBytes","joinSignature","splitSig","serialized","getBytes","FormatTypes","sighash","minimal","full","isValidMnemonic","computeHmac","algorithm","_","setify","items","Set","add","freeze","_kwVisib","KwVisib","_kwTypes","KwTypes","_kwModifiers","KwModifiers","Keywords","SimpleTokens","regexWhitespacePrefix","RegExp","regexNumberPrefix","regexIdPrefix","regexId","regexType","TokenString","clone","reset","linkBack","linkNext","popKeyword","allowed","top","peek","text","pop","popType","popParen","popParams","link","peekKeyword","peekType","lex","throwError","brackets","commas","cur","depth","suffix","getNumber","allowSingle","set","included","consumeName","keyword","consumeKeywords","keywords","consumeMutability","modifiers","consumeParams","allowIndexed","ParamType","consumeGas","getBigInt","consumeEoi","regexArrayType","verifyBasicType","assertArgument","_guard","internal","Symbol","for","ParamTypeInternal","ErrorFragmentInternal","EventFragmentInternal","ConstructorFragmentInternal","FallbackFragmentInternal","FunctionFragmentInternal","StructFragmentInternal","baseType","indexed","arrayLength","arrayChildren","guard","assertPrivate","defineProperty","defineProperties","isTuple","comp","isIndexable","walk","process","promises","setValue","childType","walkAsync","isParamType","comps","bracket","arrayMatch","Fragment","ConstructorFragment","ErrorFragment","EventFragment","FallbackFragment","FunctionFragment","StructFragment","assert","operation","isConstructor","isFragment","isError","isEvent","isStruct","NamedFragment","joinParams","p","selector","anonymous","topicHash","getTopicHash","gas","errorObj","topIsValid","mutability","constant","o","getSelector","checkResultErrors","Result","LogDescription","fragment","topic","TransactionDescription","ErrorDescription","Indexed","_isIndexed","isIndexed","PanicReasons","BuiltinErrors","reason","fragments","deploy","fallback","receive","Map","frags","log","getAbiCoder","bucket","f","formatJson","defaultAbiCoder","forceUnique","isHexString","matching","lastValue","valueLength","allowOptions","Typed","isTyped","lastArg","matchStr","m","get","getFunctionName","hasFunction","forEachFunction","localeCompare","eventTopic","getEventName","hasEvent","forEachEvent","getError","forEachError","_decodeParams","_encodeParams","encodeDeploy","decodeErrorResult","dataSlice","encodeErrorResult","decodeFunctionData","encodeFunctionData","decodeFunctionResult","getBytesCopy","hexlify","info","makeError","_data","getBuiltinCallException","ef","revert","parsed","parseTransaction","invocation","encodeFunctionResult","encodeFilterTopics","count","expectedCount","topics","encodeTopic","toBeHex","zeroPadValue","encodeEventLog","dataTypes","dataValues","decodeEventLog","nonIndexed","dynamic","resultIndexed","resultNonIndexed","nonIndexedIndex","indexedIndex","fromItems","parseCallResult","parseLog","parseError","hexData","hashMessage","TRON_MESSAGE_PREFIX","Permission","Key","TronWebProto","SmartContract","ResourceCode","fromHexString","hexString","buildCommonTransaction","contractType","typeName","anyValue","Any","pack","setType","setParameter","setPermissionId","raw","addContract","setRawData","contractJsonToProtobuf","transferContract","setToAddress","setOwnerAddress","setAmount","TRANSFERCONTRACT","buildTransferContract","setAssetName","TRANSFERASSETCONTRACT","buildTransferAssetContract","pbObj","PARTICIPATEASSETISSUECONTRACT","buildParticipateAssetIssueContract","setContractAddress","setCallValue","setData","contractData","setTokenId","setCallTokenValue","TRIGGERSMARTCONTRACT","buildTriggerSmartContract","freezeBalanceContract","setFrozenBalance","setFrozenDuration","setResource","setReceiverAddress","FREEZEBALANCECONTRACT","buildFreezeBalanceContract","unfreezeBalanceContract","UNFREEZEBALANCECONTRACT","buildUnfreezeBalanceContract","withdrawbalanceContract","WITHDRAWBALANCECONTRACT","buildWithdrawBalanceContract","freezeBalanceV2Contract","FREEZEBALANCEV2CONTRACT","buildFreezeBalanceV2Contract","CANCELALLUNFREEZEV2CONTRACT","buildCancelFreezeBalanceV2Contract","unfreezeBalanceV2Contract","setUnfreezeBalance","UNFREEZEBALANCEV2CONTRACT","buildUnfreezeBalanceV2Contract","delegateResourceContract","setBalance","setLock","setLockPeriod","DELEGATERESOURCECONTRACT","buildDelegateResourceContract","unDelegateResourceContract","UNDELEGATERESOURCECONTRACT","buildUnDelegateResourceContract","WITHDRAWEXPIREUNFREEZECONTRACT","buildWithdrawExpireUnfreezeContract","createWitnessContract","setUrl","WITNESSCREATECONTRACT","buildCreateWitness","voteWitnessContract","voteItem","Vote","setVoteAddress","numberOfVotes","setVoteCount","addVotes","VOTEWITNESSCONTRACT","buildVoteWitnessAccount","contracName","smartContractBuilder","abiJson","abiBuilder","ABI","buildEntryParam","Entry","Param","setIndexed","setName","entryBuilders","entry","entryBuilder","setAnonymous","setConstant","setInputsList","setOutputsList","EntryType","toUpperCase","setPayable","setStatemutability","StateMutabilityType","setEntrysList","setAbi","setConsumeUserResourcePercent","setOriginEnergyLimit","setOriginAddress","bytecodeParameter","setBytecode","setNewContract","CREATESMARTCONTRACT","buildCreateSmartContract","clearABIContract","CLEARABICONTRACT","buildClearABIContract","updateBrokerageContract","setBrokerage","UPDATEBROKERAGECONTRACT","buildUpdateBrokerageContract","public_free_asset_net_usage","public_latest_free_net_time","assetIssueContract","setAbbr","setTotalSupply","setNum","setEndTime","setStartTime","setTrxNum","setVoteScore","setPrecision","setPublicLatestFreeNetTime","setDescription","setPublicFreeAssetNetUsage","setFreeAssetNetLimit","setPublicFreeAssetNetLimit","frozenSupplyContract","FrozenSupply","setFrozenAmount","setFrozenDays","addFrozenSupply","ASSETISSUECONTRACT","buildAssetIssueContract","accountCreateContract","setAccountAddress","ACCOUNTCREATECONTRACT","buildAccountCreateContract","accountUpdateContract","setAccountName","ACCOUNTUPDATECONTRACT","buildAccountUpdateContract","setAccountIdContract","SETACCOUNTIDCONTRACT","buildSetAccountIdContract","proposalCreateContract","getParametersMap","PROPOSALCREATECONTRACT","buildProposalCreateContract","proposalDeleteContract","setProposalId","PROPOSALDELETECONTRACT","buildProposalDeleteContract","proposalVoteContract","setIsAddApproval","PROPOSALAPPROVECONTRACT","buildVoteProposalContract","exchangeCreateContract","setFirstTokenId","setFirstTokenBalance","setSecondTokenId","setSecondTokenBalance","EXCHANGECREATECONTRACT","buildExchangeCreateContract","exchangeInjectContract","setExchangeId","setQuant","EXCHANGEINJECTCONTRACT","buildExchangeInjectContract","exchangeWithdrawContract","EXCHANGEWITHDRAWCONTRACT","buildExchangeWithdrawContract","exchangeTransactionContract","setExpected","EXCHANGETRANSACTIONCONTRACT","buildExchangeTransactionContract","updateSettingContract","UPDATESETTINGCONTRACT","buildUpdateSettingContract","updateEnergyLimitContract","UPDATEENERGYLIMITCONTRACT","buildUpdateEnergyLimitContract","accountPermissionUpdateContract","buildPermission","parentId","getType","setId","setPermissionName","setThreshold","setParentId","setOperations","setKeysList","keyBuilder","setWeight","setOwner","setWitness","setActivesList","active","ACCOUNTPERMISSIONUPDATECONTRACT","buildAccountPermissionUpdateContract","updateAssetContract","setNewLimit","setNewPublicLimit","UPDATEASSETCONTRACT","buildUpdateAssetContract","rawData","contractJson","transactionObj","rawDataObj","setRefBlockBytes","setRefBlockHash","setFeeLimit","setExpiration","setTimestamp","txJsonToPbWithArgs","compareTransaction","transactionPb","rawDataBytes","rawDataHex","fill","BN__1","BigInt","BN_0","BN_1","BN_MAX_UINT256","hexTrue","hexFalse","domainFieldTypes","chainId","verifyingContract","salt","domainFieldNames","checkString","domainChecks","_value","isSafeInteger","toQuantity","getBaseEncoder","signed","width","boundsUpper","mask","boundsLower","toTwos","padOffset","hexPadRight","encodeType","fields","primaryType","links","parents","subtypes","uniqueNames","field","primaryTypes","filter","checkCircular","found","child","subtype","delete","getEncoder","encoder","subEncoder","encodedType","unshift","encodeData","hashStruct","_visit","accum","visit","getPrimaryType","hashDomain","domainFields","EIP712Domain","resolveNames","resolveName","ensCache","getPayload","domainValues","domainTypes","typesWithDomain","isURL","protocols","require_tld","bool","properties","block_timestamp","transaction_id","resourceNode","resource_Node","_unconfirmed","unconfirmed","_fingerprint","millis","resolve","module","exports","require","jspb","goog","global","window","self","Function","google_protobuf_any_pb","object","extend","exportSymbol","AccountId","opt_data","Message","initialize","inherits","DEBUG","COMPILED","displayName","Proposal","repeatedFields_","Exchange","Account","Frozen","AccountResource","DelegatedResource","authority","Witness","Votes","MarketOrderDetail","GENERATE_TO_OBJECT","toObject","opt_includeInstance","includeInstance","getName_asB64","getAddress_asB64","$jspbMessageInstance","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","getFieldNumber","readBytes","skipField","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","getName_asU8","writeBytes","getAddress_asU8","getName","getFieldWithDefault","bytesAsB64","bytesAsU8","setProto3BytesField","getAddress","voteAddress","getVoteAddress_asB64","readInt64","getVoteAddress_asU8","getVoteCount","writeInt64","getVoteAddress","setProto3IntField","proposalId","proposerAddress","getProposerAddress_asB64","parametersMap","expirationTime","createTime","approvalsList","getApprovalsList_asB64","state","setProposerAddress","readMessage","setExpirationTime","setCreateTime","addApprovals","readEnum","setState","getProposalId","getProposerAddress_asU8","getLength","getExpirationTime","getCreateTime","getApprovalsList_asU8","writeRepeatedBytes","getState","writeEnum","State","PENDING","DISAPPROVED","APPROVED","CANCELED","getProposerAddress","opt_noLazyCreate","getMapField","clearParametersMap","clear","getApprovalsList","getRepeatedField","bytesListAsB64","bytesListAsU8","setApprovalsList","setField","opt_index","addToRepeatedField","clearApprovalsList","setProto3EnumField","exchangeId","creatorAddress","getCreatorAddress_asB64","firstTokenId","getFirstTokenId_asB64","secondTokenId","getSecondTokenId_asB64","setCreatorAddress","getExchangeId","getCreatorAddress_asU8","getFirstTokenId_asU8","getFirstTokenBalance","getSecondTokenId_asU8","getSecondTokenBalance","getCreatorAddress","getFirstTokenId","getSecondTokenId","getAccountName_asB64","votesList","toObjectList","getVotesList","assetMap","getAssetMap","assetv2Map","getAssetv2Map","frozenList","getFrozenList","netUsage","acquiredDelegatedFrozenBalanceForBandwidth","delegatedFrozenBalanceForBandwidth","oldTronPower","tronPower","getTronPower","assetOptimized","getBooleanFieldWithDefault","latestOprationTime","allowance","latestWithdrawTime","getCode_asB64","isWitness","isCommittee","frozenSupplyList","getFrozenSupplyList","assetIssuedName","getAssetIssuedName_asB64","assetIssuedId","getAssetIssuedId_asB64","latestAssetOperationTimeMap","getLatestAssetOperationTimeMap","latestAssetOperationTimev2Map","getLatestAssetOperationTimev2Map","freeNetUsage","freeAssetNetUsageMap","getFreeAssetNetUsageMap","freeAssetNetUsagev2Map","getFreeAssetNetUsagev2Map","latestConsumeTime","latestConsumeFreeTime","getAccountId_asB64","accountResource","getAccountResource","codehash","getCodehash_asB64","getOwnerPermission","getWitnessPermission","activePermissionList","getActivePermissionList","readString","addFrozen","setNetUsage","setAcquiredDelegatedFrozenBalanceForBandwidth","setDelegatedFrozenBalanceForBandwidth","setOldTronPower","setTronPower","readBool","setAssetOptimized","setLatestOprationTime","setAllowance","setLatestWithdrawTime","setCode","setIsWitness","setIsCommittee","setAssetIssuedName","setAssetIssuedId","setFreeNetUsage","setLatestConsumeTime","setLatestConsumeFreeTime","setAccountResource","setCodehash","setOwnerPermission","setWitnessPermission","addActivePermission","getAccountName_asU8","writeRepeatedMessage","writeString","getNetUsage","getAcquiredDelegatedFrozenBalanceForBandwidth","getDelegatedFrozenBalanceForBandwidth","getOldTronPower","writeMessage","getAssetOptimized","writeBool","getLatestOprationTime","getAllowance","getLatestWithdrawTime","getCode_asU8","getIsWitness","getIsCommittee","getAssetIssuedName_asU8","getAssetIssuedId_asU8","getFreeNetUsage","getLatestConsumeTime","getLatestConsumeFreeTime","getAccountId_asU8","getCodehash_asU8","frozenBalance","expireTime","setExpireTime","getFrozenBalance","getExpireTime","energyUsage","frozenBalanceForEnergy","getFrozenBalanceForEnergy","latestConsumeTimeForEnergy","acquiredDelegatedFrozenBalanceForEnergy","delegatedFrozenBalanceForEnergy","storageLimit","storageUsage","latestExchangeStorageTime","setEnergyUsage","setFrozenBalanceForEnergy","setLatestConsumeTimeForEnergy","setAcquiredDelegatedFrozenBalanceForEnergy","setDelegatedFrozenBalanceForEnergy","setStorageLimit","setStorageUsage","setLatestExchangeStorageTime","getEnergyUsage","getLatestConsumeTimeForEnergy","getAcquiredDelegatedFrozenBalanceForEnergy","getDelegatedFrozenBalanceForEnergy","getStorageLimit","getStorageUsage","getLatestExchangeStorageTime","getWrapperField","setWrapperField","clearFrozenBalanceForEnergy","hasFrozenBalanceForEnergy","getField","getAccountName","getRepeatedWrapperField","setVotesList","setRepeatedWrapperField","opt_value","addToRepeatedWrapperField","clearVotesList","clearAssetMap","clearAssetv2Map","setFrozenList","clearFrozenList","clearTronPower","hasTronPower","setProto3BooleanField","getCode","setFrozenSupplyList","clearFrozenSupplyList","getAssetIssuedName","getAssetIssuedId","clearLatestAssetOperationTimeMap","clearLatestAssetOperationTimev2Map","clearFreeAssetNetUsageMap","clearFreeAssetNetUsagev2Map","getAccountId","clearAccountResource","hasAccountResource","getCodehash","clearOwnerPermission","hasOwnerPermission","clearWitnessPermission","hasWitnessPermission","setActivePermissionList","clearActivePermissionList","getWeight","getFrom_asB64","getTo_asB64","frozenBalanceForBandwidth","expireTimeForBandwidth","expireTimeForEnergy","setFrom","setTo","setFrozenBalanceForBandwidth","setExpireTimeForBandwidth","setExpireTimeForEnergy","getFrom_asU8","getTo_asU8","getFrozenBalanceForBandwidth","getExpireTimeForBandwidth","getExpireTimeForEnergy","getFrom","getTo","permissionName","getPermissionName_asB64","setAccount","getPermissionName_asU8","clearAccount","hasAccount","getPermissionName","getOperations_asB64","keysList","getKeysList","readInt32","addKeys","getId","writeInt32","getThreshold","getParentId","getOperations_asU8","PermissionType","OWNER","WITNESS","ACTIVE","setProto3StringField","getOperations","clearKeysList","votecount","getPubkey_asB64","totalproduced","totalmissed","latestblocknum","latestslotnum","isjobs","setVotecount","setPubkey","setTotalproduced","setTotalmissed","setLatestblocknum","setLatestslotnum","setIsjobs","getVotecount","getPubkey_asU8","getUrl","getTotalproduced","getTotalmissed","getLatestblocknum","getLatestslotnum","getIsjobs","getPubkey","oldVotesList","getOldVotesList","newVotesList","getNewVotesList","addOldVotes","addNewVotes","setOldVotesList","clearOldVotesList","setNewVotesList","clearNewVotesList","makerorderid","getMakerorderid_asB64","takerorderid","getTakerorderid_asB64","fillsellquantity","fillbuyquantity","setMakerorderid","setTakerorderid","setFillsellquantity","setFillbuyquantity","getMakerorderid_asU8","getTakerorderid_asU8","getFillsellquantity","getFillbuyquantity","getMakerorderid","getTakerorderid","signatureList","getSignatureList_asB64","retList","getRetList","addSignature","addRet","getSignatureList_asU8","getParameter","getProvider_asB64","contractname","getContractname_asB64","setProvider","setContractname","getProvider_asU8","getContractname_asU8","getPermissionId","VOTEASSETCONTRACT","WITNESSUPDATECONTRACT","UNFREEZEASSETCONTRACT","CUSTOMCONTRACT","GETCONTRACT","SHIELDEDTRANSFERCONTRACT","MARKETSELLASSETCONTRACT","MARKETCANCELORDERCONTRACT","clearParameter","hasParameter","getProvider","getContractname","fee","contractret","assetissueid","withdrawAmount","unfreezeAmount","exchangeReceivedAmount","exchangeInjectAnotherAmount","exchangeWithdrawAnotherAmount","shieldedTransactionFee","orderid","getOrderid_asB64","orderdetailsList","getOrderdetailsList","setFee","setRet","setContractret","setAssetissueid","setWithdrawAmount","setUnfreezeAmount","setExchangeReceivedAmount","setExchangeInjectAnotherAmount","setExchangeWithdrawAnotherAmount","setShieldedTransactionFee","setOrderid","addOrderdetails","getFee","getRet","getContractret","getAssetissueid","getWithdrawAmount","getUnfreezeAmount","getExchangeReceivedAmount","getExchangeInjectAnotherAmount","getExchangeWithdrawAnotherAmount","getShieldedTransactionFee","getOrderid_asU8","SUCESS","FAILED","DEFAULT","SUCCESS","REVERT","BAD_JUMP_DESTINATION","OUT_OF_MEMORY","PRECOMPILED_CONTRACT","STACK_TOO_SMALL","STACK_TOO_LARGE","ILLEGAL_OPERATION","STACK_OVERFLOW","OUT_OF_ENERGY","OUT_OF_TIME","JVM_STACK_OVER_FLOW","UNKNOWN","TRANSFER_FAILED","INVALID_CODE","getOrderid","setOrderdetailsList","clearOrderdetailsList","refBlockBytes","getRefBlockBytes_asB64","refBlockNum","refBlockHash","getRefBlockHash_asB64","authsList","getAuthsList","getData_asB64","contractList","getContractList","scripts","getScripts_asB64","setRefBlockNum","addAuths","setScripts","getRefBlockBytes_asU8","getRefBlockNum","getRefBlockHash_asU8","getExpiration","getData_asU8","getScripts_asU8","getTimestamp","getFeeLimit","getRefBlockBytes","getRefBlockHash","setAuthsList","clearAuthsList","getData","setContractList","clearContractList","getScripts","clearRawData","hasRawData","getSignatureList","setSignatureList","clearSignatureList","setRetList","clearRetList","NORMAL","ASSETISSUE","CONTRACT","core_Tron_pb","getOwnerAddress_asB64","getAccountAddress_asB64","getOwnerAddress_asU8","getAccountAddress_asU8","getOwnerAddress","getAccountAddress","getOwner","getWitness","activesList","getActivesList","addActives","clearOwner","hasOwner","clearWitness","hasWitness","clearActivesList","UnfreezeAssetContract","getAbbr_asB64","trxNum","startTime","endTime","order","getDescription_asB64","getUrl_asB64","freeAssetNetLimit","publicFreeAssetNetLimit","publicFreeAssetNetUsage","publicLatestFreeNetTime","setOrder","getAbbr_asU8","getTotalSupply","getTrxNum","getPrecision","getNum","getStartTime","getEndTime","getOrder","getVoteScore","getDescription_asU8","getUrl_asU8","getFreeAssetNetLimit","getPublicFreeAssetNetLimit","getPublicFreeAssetNetUsage","getPublicLatestFreeNetTime","frozenDays","getFrozenAmount","getFrozenDays","getAbbr","getDescription","assetName","getAssetName_asB64","getToAddress_asB64","getAssetName_asU8","getToAddress_asU8","getAmount","getAssetName","getToAddress","newLimit","newPublicLimit","getNewLimit","getNewPublicLimit","core_contract_common_pb","TransactionBalanceTrace","Operation","BlockBalanceTrace","BlockIdentifier","AccountTrace","AccountIdentifier","AccountBalanceRequest","AccountBalanceResponse","getReceiverAddress_asB64","getFrozenDuration","getResource","getReceiverAddress_asU8","getReceiverAddress","transactionIdentifier","getTransactionIdentifier_asB64","operationList","getOperationList","status","setTransactionIdentifier","addOperation","setStatus","getTransactionIdentifier_asU8","getStatus","operationIdentifier","setOperationIdentifier","getOperationIdentifier","getTransactionIdentifier","setOperationList","clearOperationList","blockIdentifier","getBlockIdentifier","transactionBalanceTraceList","getTransactionBalanceTraceList","setBlockIdentifier","addTransactionBalanceTrace","getHash_asB64","setHash","setNumber","getHash_asU8","getHash","clearBlockIdentifier","hasBlockIdentifier","setTransactionBalanceTraceList","clearTransactionBalanceTraceList","placeholder","setPlaceholder","getPlaceholder","accountIdentifier","getAccountIdentifier","setAccountIdentifier","clearAccountIdentifier","hasAccountIdentifier","getUnfreezeBalance","getLock","getLockPeriod","BANDWIDTH","ENERGY","TRON_POWER","getTokenId_asB64","getTokenId_asU8","getQuant","getTokenId","getExpected","isAddApproval","getIsAddApproval","ContractState","SmartContractDataWrapper","originAddress","getOriginAddress_asB64","getContractAddress_asB64","getAbi","getBytecode_asB64","consumeUserResourcePercent","codeHash","getCodeHash_asB64","trxHash","getTrxHash_asB64","setCodeHash","setTrxHash","setVersion","getOriginAddress_asU8","getContractAddress_asU8","getBytecode_asU8","getCallValue","getConsumeUserResourcePercent","getOriginEnergyLimit","getCodeHash_asU8","getTrxHash_asU8","getVersion","entrysList","getEntrysList","addEntrys","inputsList","getInputsList","outputsList","getOutputsList","statemutability","addInputs","addOutputs","getAnonymous","getConstant","getPayable","getStatemutability","UNKNOWNENTRYTYPE","CONSTRUCTOR","FUNCTION","EVENT","FALLBACK","RECEIVE","ERROR","UNKNOWNMUTABILITYTYPE","PURE","VIEW","NONPAYABLE","PAYABLE","getIndexed","clearInputsList","clearOutputsList","clearEntrysList","getOriginAddress","getContractAddress","clearAbi","hasAbi","getBytecode","getCodeHash","getTrxHash","energyFactor","updateCycle","setEnergyFactor","setUpdateCycle","getEnergyFactor","getUpdateCycle","newContract","getNewContract","callTokenValue","getCallTokenValue","clearNewContract","hasNewContract","smartContract","getSmartContract","runtimecode","getRuntimecode_asB64","contractState","getContractState","setSmartContract","setRuntimecode","setContractState","getRuntimecode_asU8","clearSmartContract","hasSmartContract","getRuntimecode","clearContractState","hasContractState","BuyStorageBytesContract","BuyStorageContract","SellStorageContract","setBytes","storageBytes","setStorageBytes","getStorageBytes","WitnessUpdateContract","updateUrl","getUpdateUrl_asB64","setUpdateUrl","getUpdateUrl_asU8","getUpdateUrl","support","setSupport","getSupport","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}